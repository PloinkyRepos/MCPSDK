{"version":3,"file":"stdio.js","sources":["../../../src/client/stdio.ts"],"sourcesContent":["import { ChildProcess, IOType } from 'node:child_process';\nimport spawn from 'cross-spawn';\nimport process from 'node:process';\nimport { Stream, PassThrough } from 'node:stream';\nimport { ReadBuffer, serializeMessage } from '../shared/stdio.js';\nimport { Transport } from '../shared/transport.js';\nimport { JSONRPCMessage } from '../types.js';\n\nexport type StdioServerParameters = {\n    /**\n     * The executable to run to start the server.\n     */\n    command: string;\n\n    /**\n     * Command line arguments to pass to the executable.\n     */\n    args?: string[];\n\n    /**\n     * The environment to use when spawning the process.\n     *\n     * If not specified, the result of getDefaultEnvironment() will be used.\n     */\n    env?: Record<string, string>;\n\n    /**\n     * How to handle stderr of the child process. This matches the semantics of Node's `child_process.spawn`.\n     *\n     * The default is \"inherit\", meaning messages to stderr will be printed to the parent process's stderr.\n     */\n    stderr?: IOType | Stream | number;\n\n    /**\n     * The working directory to use when spawning the process.\n     *\n     * If not specified, the current working directory will be inherited.\n     */\n    cwd?: string;\n};\n\n/**\n * Environment variables to inherit by default, if an environment is not explicitly given.\n */\nexport const DEFAULT_INHERITED_ENV_VARS =\n    process.platform === 'win32'\n        ? [\n              'APPDATA',\n              'HOMEDRIVE',\n              'HOMEPATH',\n              'LOCALAPPDATA',\n              'PATH',\n              'PROCESSOR_ARCHITECTURE',\n              'SYSTEMDRIVE',\n              'SYSTEMROOT',\n              'TEMP',\n              'USERNAME',\n              'USERPROFILE',\n              'PROGRAMFILES'\n          ]\n        : /* list inspired by the default env inheritance of sudo */\n          ['HOME', 'LOGNAME', 'PATH', 'SHELL', 'TERM', 'USER'];\n\n/**\n * Returns a default environment object including only environment variables deemed safe to inherit.\n */\nexport function getDefaultEnvironment(): Record<string, string> {\n    const env: Record<string, string> = {};\n\n    for (const key of DEFAULT_INHERITED_ENV_VARS) {\n        const value = process.env[key];\n        if (value === undefined) {\n            continue;\n        }\n\n        if (value.startsWith('()')) {\n            // Skip functions, which are a security risk.\n            continue;\n        }\n\n        env[key] = value;\n    }\n\n    return env;\n}\n\n/**\n * Client transport for stdio: this will connect to a server by spawning a process and communicating with it over stdin/stdout.\n *\n * This transport is only available in Node.js environments.\n */\nexport class StdioClientTransport implements Transport {\n    private _process?: ChildProcess;\n    private _abortController: AbortController = new AbortController();\n    private _readBuffer: ReadBuffer = new ReadBuffer();\n    private _serverParams: StdioServerParameters;\n    private _stderrStream: PassThrough | null = null;\n\n    onclose?: () => void;\n    onerror?: (error: Error) => void;\n    onmessage?: (message: JSONRPCMessage) => void;\n\n    constructor(server: StdioServerParameters) {\n        this._serverParams = server;\n        if (server.stderr === 'pipe' || server.stderr === 'overlapped') {\n            this._stderrStream = new PassThrough();\n        }\n    }\n\n    /**\n     * Starts the server process and prepares to communicate with it.\n     */\n    async start(): Promise<void> {\n        if (this._process) {\n            throw new Error(\n                'StdioClientTransport already started! If using Client class, note that connect() calls start() automatically.'\n            );\n        }\n\n        return new Promise((resolve, reject) => {\n            this._process = spawn(this._serverParams.command, this._serverParams.args ?? [], {\n                // merge default env with server env because mcp server needs some env vars\n                env: {\n                    ...getDefaultEnvironment(),\n                    ...this._serverParams.env\n                },\n                stdio: ['pipe', 'pipe', this._serverParams.stderr ?? 'inherit'],\n                shell: false,\n                signal: this._abortController.signal,\n                windowsHide: process.platform === 'win32' && isElectron(),\n                cwd: this._serverParams.cwd\n            });\n\n            this._process.on('error', error => {\n                if (error.name === 'AbortError') {\n                    // Expected when close() is called.\n                    this.onclose?.();\n                    return;\n                }\n\n                reject(error);\n                this.onerror?.(error);\n            });\n\n            this._process.on('spawn', () => {\n                resolve();\n            });\n\n            this._process.on('close', _code => {\n                this._process = undefined;\n                this.onclose?.();\n            });\n\n            this._process.stdin?.on('error', error => {\n                this.onerror?.(error);\n            });\n\n            this._process.stdout?.on('data', chunk => {\n                this._readBuffer.append(chunk);\n                this.processReadBuffer();\n            });\n\n            this._process.stdout?.on('error', error => {\n                this.onerror?.(error);\n            });\n\n            if (this._stderrStream && this._process.stderr) {\n                this._process.stderr.pipe(this._stderrStream);\n            }\n        });\n    }\n\n    /**\n     * The stderr stream of the child process, if `StdioServerParameters.stderr` was set to \"pipe\" or \"overlapped\".\n     *\n     * If stderr piping was requested, a PassThrough stream is returned _immediately_, allowing callers to\n     * attach listeners before the start method is invoked. This prevents loss of any early\n     * error output emitted by the child process.\n     */\n    get stderr(): Stream | null {\n        if (this._stderrStream) {\n            return this._stderrStream;\n        }\n\n        return this._process?.stderr ?? null;\n    }\n\n    /**\n     * The child process pid spawned by this transport.\n     *\n     * This is only available after the transport has been started.\n     */\n    get pid(): number | null {\n        return this._process?.pid ?? null;\n    }\n\n    private processReadBuffer() {\n        while (true) {\n            try {\n                const message = this._readBuffer.readMessage();\n                if (message === null) {\n                    break;\n                }\n\n                this.onmessage?.(message);\n            } catch (error) {\n                this.onerror?.(error as Error);\n            }\n        }\n    }\n\n    async close(): Promise<void> {\n        this._abortController.abort();\n        this._process = undefined;\n        this._readBuffer.clear();\n    }\n\n    send(message: JSONRPCMessage): Promise<void> {\n        return new Promise(resolve => {\n            if (!this._process?.stdin) {\n                throw new Error('Not connected');\n            }\n\n            const json = serializeMessage(message);\n            if (this._process.stdin.write(json)) {\n                resolve();\n            } else {\n                this._process.stdin.once('drain', resolve);\n            }\n        });\n    }\n}\n\nfunction isElectron() {\n    return 'type' in process;\n}\n"],"names":["ReadBuffer","PassThrough","serializeMessage"],"mappings":"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"}