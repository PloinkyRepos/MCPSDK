{"version":3,"file":"index.js","sources":["../../../src/client/index.ts"],"sourcesContent":["import { mergeCapabilities, Protocol, ProtocolOptions, RequestOptions } from '../shared/protocol.js';\nimport { Transport } from '../shared/transport.js';\nimport {\n    CallToolRequest,\n    CallToolResultSchema,\n    ClientCapabilities,\n    ClientNotification,\n    ClientRequest,\n    ClientResult,\n    CompatibilityCallToolResultSchema,\n    CompleteRequest,\n    CompleteResultSchema,\n    EmptyResultSchema,\n    GetPromptRequest,\n    GetPromptResultSchema,\n    Implementation,\n    InitializeResultSchema,\n    LATEST_PROTOCOL_VERSION,\n    ListPromptsRequest,\n    ListPromptsResultSchema,\n    ListResourcesRequest,\n    ListResourcesResultSchema,\n    ListResourceTemplatesRequest,\n    ListResourceTemplatesResultSchema,\n    ListToolsRequest,\n    ListToolsResultSchema,\n    LoggingLevel,\n    Notification,\n    ReadResourceRequest,\n    ReadResourceResultSchema,\n    Request,\n    Result,\n    ServerCapabilities,\n    SubscribeRequest,\n    SUPPORTED_PROTOCOL_VERSIONS,\n    UnsubscribeRequest,\n    Tool,\n    ErrorCode,\n    McpError\n} from '../types.js';\nimport Ajv from 'ajv';\nimport type { ValidateFunction } from 'ajv';\n\nexport type ClientOptions = ProtocolOptions & {\n    /**\n     * Capabilities to advertise as being supported by this client.\n     */\n    capabilities?: ClientCapabilities;\n};\n\n/**\n * An MCP client on top of a pluggable transport.\n *\n * The client will automatically begin the initialization flow with the server when connect() is called.\n *\n * To use with custom types, extend the base Request/Notification/Result types and pass them as type parameters:\n *\n * ```typescript\n * // Custom schemas\n * const CustomRequestSchema = RequestSchema.extend({...})\n * const CustomNotificationSchema = NotificationSchema.extend({...})\n * const CustomResultSchema = ResultSchema.extend({...})\n *\n * // Type aliases\n * type CustomRequest = z.infer<typeof CustomRequestSchema>\n * type CustomNotification = z.infer<typeof CustomNotificationSchema>\n * type CustomResult = z.infer<typeof CustomResultSchema>\n *\n * // Create typed client\n * const client = new Client<CustomRequest, CustomNotification, CustomResult>({\n *   name: \"CustomClient\",\n *   version: \"1.0.0\"\n * })\n * ```\n */\nexport class Client<\n    RequestT extends Request = Request,\n    NotificationT extends Notification = Notification,\n    ResultT extends Result = Result\n> extends Protocol<ClientRequest | RequestT, ClientNotification | NotificationT, ClientResult | ResultT> {\n    private _serverCapabilities?: ServerCapabilities;\n    private _serverVersion?: Implementation;\n    private _capabilities: ClientCapabilities;\n    private _instructions?: string;\n    private _cachedToolOutputValidators: Map<string, ValidateFunction> = new Map();\n    private _ajv: InstanceType<typeof Ajv>;\n\n    /**\n     * Initializes this client with the given name and version information.\n     */\n    constructor(\n        private _clientInfo: Implementation,\n        options?: ClientOptions\n    ) {\n        super(options);\n        this._capabilities = options?.capabilities ?? {};\n        this._ajv = new Ajv();\n    }\n\n    /**\n     * Registers new capabilities. This can only be called before connecting to a transport.\n     *\n     * The new capabilities will be merged with any existing capabilities previously given (e.g., at initialization).\n     */\n    public registerCapabilities(capabilities: ClientCapabilities): void {\n        if (this.transport) {\n            throw new Error('Cannot register capabilities after connecting to transport');\n        }\n\n        this._capabilities = mergeCapabilities(this._capabilities, capabilities);\n    }\n\n    protected assertCapability(capability: keyof ServerCapabilities, method: string): void {\n        if (!this._serverCapabilities?.[capability]) {\n            throw new Error(`Server does not support ${capability} (required for ${method})`);\n        }\n    }\n\n    override async connect(transport: Transport, options?: RequestOptions): Promise<void> {\n        await super.connect(transport);\n        // When transport sessionId is already set this means we are trying to reconnect.\n        // In this case we don't need to initialize again.\n        if (transport.sessionId !== undefined) {\n            return;\n        }\n        try {\n            const result = await this.request(\n                {\n                    method: 'initialize',\n                    params: {\n                        protocolVersion: LATEST_PROTOCOL_VERSION,\n                        capabilities: this._capabilities,\n                        clientInfo: this._clientInfo\n                    }\n                },\n                InitializeResultSchema,\n                options\n            );\n\n            if (result === undefined) {\n                throw new Error(`Server sent invalid initialize result: ${result}`);\n            }\n\n            if (!SUPPORTED_PROTOCOL_VERSIONS.includes(result.protocolVersion)) {\n                throw new Error(`Server's protocol version is not supported: ${result.protocolVersion}`);\n            }\n\n            this._serverCapabilities = result.capabilities;\n            this._serverVersion = result.serverInfo;\n            // HTTP transports must set the protocol version in each header after initialization.\n            if (transport.setProtocolVersion) {\n                transport.setProtocolVersion(result.protocolVersion);\n            }\n\n            this._instructions = result.instructions;\n\n            await this.notification({\n                method: 'notifications/initialized'\n            });\n        } catch (error) {\n            // Disconnect if initialization fails.\n            void this.close();\n            throw error;\n        }\n    }\n\n    /**\n     * After initialization has completed, this will be populated with the server's reported capabilities.\n     */\n    getServerCapabilities(): ServerCapabilities | undefined {\n        return this._serverCapabilities;\n    }\n\n    /**\n     * After initialization has completed, this will be populated with information about the server's name and version.\n     */\n    getServerVersion(): Implementation | undefined {\n        return this._serverVersion;\n    }\n\n    /**\n     * After initialization has completed, this may be populated with information about the server's instructions.\n     */\n    getInstructions(): string | undefined {\n        return this._instructions;\n    }\n\n    protected assertCapabilityForMethod(method: RequestT['method']): void {\n        switch (method as ClientRequest['method']) {\n            case 'logging/setLevel':\n                if (!this._serverCapabilities?.logging) {\n                    throw new Error(`Server does not support logging (required for ${method})`);\n                }\n                break;\n\n            case 'prompts/get':\n            case 'prompts/list':\n                if (!this._serverCapabilities?.prompts) {\n                    throw new Error(`Server does not support prompts (required for ${method})`);\n                }\n                break;\n\n            case 'resources/list':\n            case 'resources/templates/list':\n            case 'resources/read':\n            case 'resources/subscribe':\n            case 'resources/unsubscribe':\n                if (!this._serverCapabilities?.resources) {\n                    throw new Error(`Server does not support resources (required for ${method})`);\n                }\n\n                if (method === 'resources/subscribe' && !this._serverCapabilities.resources.subscribe) {\n                    throw new Error(`Server does not support resource subscriptions (required for ${method})`);\n                }\n\n                break;\n\n            case 'tools/call':\n            case 'tools/list':\n                if (!this._serverCapabilities?.tools) {\n                    throw new Error(`Server does not support tools (required for ${method})`);\n                }\n                break;\n\n            case 'completion/complete':\n                if (!this._serverCapabilities?.completions) {\n                    throw new Error(`Server does not support completions (required for ${method})`);\n                }\n                break;\n\n            case 'initialize':\n                // No specific capability required for initialize\n                break;\n\n            case 'ping':\n                // No specific capability required for ping\n                break;\n        }\n    }\n\n    protected assertNotificationCapability(method: NotificationT['method']): void {\n        switch (method as ClientNotification['method']) {\n            case 'notifications/roots/list_changed':\n                if (!this._capabilities.roots?.listChanged) {\n                    throw new Error(`Client does not support roots list changed notifications (required for ${method})`);\n                }\n                break;\n\n            case 'notifications/initialized':\n                // No specific capability required for initialized\n                break;\n\n            case 'notifications/cancelled':\n                // Cancellation notifications are always allowed\n                break;\n\n            case 'notifications/progress':\n                // Progress notifications are always allowed\n                break;\n        }\n    }\n\n    protected assertRequestHandlerCapability(method: string): void {\n        switch (method) {\n            case 'sampling/createMessage':\n                if (!this._capabilities.sampling) {\n                    throw new Error(`Client does not support sampling capability (required for ${method})`);\n                }\n                break;\n\n            case 'elicitation/create':\n                if (!this._capabilities.elicitation) {\n                    throw new Error(`Client does not support elicitation capability (required for ${method})`);\n                }\n                break;\n\n            case 'roots/list':\n                if (!this._capabilities.roots) {\n                    throw new Error(`Client does not support roots capability (required for ${method})`);\n                }\n                break;\n\n            case 'ping':\n                // No specific capability required for ping\n                break;\n        }\n    }\n\n    async ping(options?: RequestOptions) {\n        return this.request({ method: 'ping' }, EmptyResultSchema, options);\n    }\n\n    async complete(params: CompleteRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'completion/complete', params }, CompleteResultSchema, options);\n    }\n\n    async setLoggingLevel(level: LoggingLevel, options?: RequestOptions) {\n        return this.request({ method: 'logging/setLevel', params: { level } }, EmptyResultSchema, options);\n    }\n\n    async getPrompt(params: GetPromptRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'prompts/get', params }, GetPromptResultSchema, options);\n    }\n\n    async listPrompts(params?: ListPromptsRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'prompts/list', params }, ListPromptsResultSchema, options);\n    }\n\n    async listResources(params?: ListResourcesRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'resources/list', params }, ListResourcesResultSchema, options);\n    }\n\n    async listResourceTemplates(params?: ListResourceTemplatesRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'resources/templates/list', params }, ListResourceTemplatesResultSchema, options);\n    }\n\n    async readResource(params: ReadResourceRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'resources/read', params }, ReadResourceResultSchema, options);\n    }\n\n    async subscribeResource(params: SubscribeRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'resources/subscribe', params }, EmptyResultSchema, options);\n    }\n\n    async unsubscribeResource(params: UnsubscribeRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'resources/unsubscribe', params }, EmptyResultSchema, options);\n    }\n\n    async callTool(\n        params: CallToolRequest['params'],\n        resultSchema: typeof CallToolResultSchema | typeof CompatibilityCallToolResultSchema = CallToolResultSchema,\n        options?: RequestOptions\n    ) {\n        const result = await this.request({ method: 'tools/call', params }, resultSchema, options);\n\n        // Check if the tool has an outputSchema\n        const validator = this.getToolOutputValidator(params.name);\n        if (validator) {\n            // If tool has outputSchema, it MUST return structuredContent (unless it's an error)\n            if (!result.structuredContent && !result.isError) {\n                throw new McpError(\n                    ErrorCode.InvalidRequest,\n                    `Tool ${params.name} has an output schema but did not return structured content`\n                );\n            }\n\n            // Only validate structured content if present (not when there's an error)\n            if (result.structuredContent) {\n                try {\n                    // Validate the structured content (which is already an object) against the schema\n                    const isValid = validator(result.structuredContent);\n\n                    if (!isValid) {\n                        throw new McpError(\n                            ErrorCode.InvalidParams,\n                            `Structured content does not match the tool's output schema: ${this._ajv.errorsText(validator.errors)}`\n                        );\n                    }\n                } catch (error) {\n                    if (error instanceof McpError) {\n                        throw error;\n                    }\n                    throw new McpError(\n                        ErrorCode.InvalidParams,\n                        `Failed to validate structured content: ${error instanceof Error ? error.message : String(error)}`\n                    );\n                }\n            }\n        }\n\n        return result;\n    }\n\n    private cacheToolOutputSchemas(tools: Tool[]) {\n        this._cachedToolOutputValidators.clear();\n\n        for (const tool of tools) {\n            // If the tool has an outputSchema, create and cache the Ajv validator\n            if (tool.outputSchema) {\n                try {\n                    const validator = this._ajv.compile(tool.outputSchema);\n                    this._cachedToolOutputValidators.set(tool.name, validator);\n                } catch {\n                    // Ignore schema compilation errors\n                }\n            }\n        }\n    }\n\n    private getToolOutputValidator(toolName: string): ValidateFunction | undefined {\n        return this._cachedToolOutputValidators.get(toolName);\n    }\n\n    async listTools(params?: ListToolsRequest['params'], options?: RequestOptions) {\n        const result = await this.request({ method: 'tools/list', params }, ListToolsResultSchema, options);\n\n        // Cache the tools and their output schemas for future validation\n        this.cacheToolOutputSchemas(result.tools);\n\n        return result;\n    }\n\n    async sendRootsListChanged() {\n        return this.notification({ method: 'notifications/roots/list_changed' });\n    }\n}\n"],"names":["Protocol","mergeCapabilities","LATEST_PROTOCOL_VERSION","InitializeResultSchema","SUPPORTED_PROTOCOL_VERSIONS","EmptyResultSchema","CompleteResultSchema","GetPromptResultSchema","ListPromptsResultSchema","ListResourcesResultSchema","ListResourceTemplatesResultSchema","ReadResourceResultSchema","CallToolResultSchema","McpError","ErrorCode","ListToolsResultSchema"],"mappings":"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"}