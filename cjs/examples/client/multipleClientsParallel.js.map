{"version":3,"file":"multipleClientsParallel.js","sources":["../../../../src/examples/client/multipleClientsParallel.ts"],"sourcesContent":["import { Client } from '../../client/index.js';\nimport { StreamableHTTPClientTransport } from '../../client/streamableHttp.js';\nimport { CallToolRequest, CallToolResultSchema, LoggingMessageNotificationSchema, CallToolResult } from '../../types.js';\n\n/**\n * Multiple Clients MCP Example\n *\n * This client demonstrates how to:\n * 1. Create multiple MCP clients in parallel\n * 2. Each client calls a single tool\n * 3. Track notifications from each client independently\n */\n\n// Command line args processing\nconst args = process.argv.slice(2);\nconst serverUrl = args[0] || 'http://localhost:3000/mcp';\n\ninterface ClientConfig {\n    id: string;\n    name: string;\n    toolName: string;\n    toolArguments: Record<string, string | number | boolean>;\n}\n\nasync function createAndRunClient(config: ClientConfig): Promise<{ id: string; result: CallToolResult }> {\n    console.log(`[${config.id}] Creating client: ${config.name}`);\n\n    const client = new Client({\n        name: config.name,\n        version: '1.0.0'\n    });\n\n    const transport = new StreamableHTTPClientTransport(new URL(serverUrl));\n\n    // Set up client-specific error handler\n    client.onerror = error => {\n        console.error(`[${config.id}] Client error:`, error);\n    };\n\n    // Set up client-specific notification handler\n    client.setNotificationHandler(LoggingMessageNotificationSchema, notification => {\n        console.log(`[${config.id}] Notification: ${notification.params.data}`);\n    });\n\n    try {\n        // Connect to the server\n        await client.connect(transport);\n        console.log(`[${config.id}] Connected to MCP server`);\n\n        // Call the specified tool\n        console.log(`[${config.id}] Calling tool: ${config.toolName}`);\n        const toolRequest: CallToolRequest = {\n            method: 'tools/call',\n            params: {\n                name: config.toolName,\n                arguments: {\n                    ...config.toolArguments,\n                    // Add client ID to arguments for identification in notifications\n                    caller: config.id\n                }\n            }\n        };\n\n        const result = await client.request(toolRequest, CallToolResultSchema);\n        console.log(`[${config.id}] Tool call completed`);\n\n        // Keep the connection open for a bit to receive notifications\n        await new Promise(resolve => setTimeout(resolve, 5000));\n\n        // Disconnect\n        await transport.close();\n        console.log(`[${config.id}] Disconnected from MCP server`);\n\n        return { id: config.id, result };\n    } catch (error) {\n        console.error(`[${config.id}] Error:`, error);\n        throw error;\n    }\n}\n\nasync function main(): Promise<void> {\n    console.log('MCP Multiple Clients Example');\n    console.log('============================');\n    console.log(`Server URL: ${serverUrl}`);\n    console.log('');\n\n    try {\n        // Define client configurations\n        const clientConfigs: ClientConfig[] = [\n            {\n                id: 'client1',\n                name: 'basic-client-1',\n                toolName: 'start-notification-stream',\n                toolArguments: {\n                    interval: 3, // 1 second between notifications\n                    count: 5 // Send 5 notifications\n                }\n            },\n            {\n                id: 'client2',\n                name: 'basic-client-2',\n                toolName: 'start-notification-stream',\n                toolArguments: {\n                    interval: 2, // 2 seconds between notifications\n                    count: 3 // Send 3 notifications\n                }\n            },\n            {\n                id: 'client3',\n                name: 'basic-client-3',\n                toolName: 'start-notification-stream',\n                toolArguments: {\n                    interval: 1, // 0.5 second between notifications\n                    count: 8 // Send 8 notifications\n                }\n            }\n        ];\n\n        // Start all clients in parallel\n        console.log(`Starting ${clientConfigs.length} clients in parallel...`);\n        console.log('');\n\n        const clientPromises = clientConfigs.map(config => createAndRunClient(config));\n        const results = await Promise.all(clientPromises);\n\n        // Display results from all clients\n        console.log('\\n=== Final Results ===');\n        results.forEach(({ id, result }) => {\n            console.log(`\\n[${id}] Tool result:`);\n            if (Array.isArray(result.content)) {\n                result.content.forEach((item: { type: string; text?: string }) => {\n                    if (item.type === 'text' && item.text) {\n                        console.log(`  ${item.text}`);\n                    } else {\n                        console.log(`  ${item.type} content:`, item);\n                    }\n                });\n            } else {\n                console.log(`  Unexpected result format:`, result);\n            }\n        });\n\n        console.log('\\n=== All clients completed successfully ===');\n    } catch (error) {\n        console.error('Error running multiple clients:', error);\n        process.exit(1);\n    }\n}\n\n// Start the example\nmain().catch((error: unknown) => {\n    console.error('Error running MCP multiple clients example:', error);\n    process.exit(1);\n});\n"],"names":["Client","StreamableHTTPClientTransport","LoggingMessageNotificationSchema","CallToolResultSchema"],"mappings":"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"}