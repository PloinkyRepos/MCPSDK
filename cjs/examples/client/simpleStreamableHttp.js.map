{"version":3,"file":"simpleStreamableHttp.js","sources":["../../../../src/examples/client/simpleStreamableHttp.ts"],"sourcesContent":["import { Client } from '../../client/index.js';\nimport { StreamableHTTPClientTransport } from '../../client/streamableHttp.js';\nimport { createInterface } from 'node:readline';\nimport {\n    ListToolsRequest,\n    ListToolsResultSchema,\n    CallToolRequest,\n    CallToolResultSchema,\n    ListPromptsRequest,\n    ListPromptsResultSchema,\n    GetPromptRequest,\n    GetPromptResultSchema,\n    ListResourcesRequest,\n    ListResourcesResultSchema,\n    LoggingMessageNotificationSchema,\n    ResourceListChangedNotificationSchema,\n    ElicitRequestSchema,\n    ResourceLink,\n    ReadResourceRequest,\n    ReadResourceResultSchema\n} from '../../types.js';\nimport { getDisplayName } from '../../shared/metadataUtils.js';\nimport Ajv from 'ajv';\n\n// Create readline interface for user input\nconst readline = createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\n// Track received notifications for debugging resumability\nlet notificationCount = 0;\n\n// Global client and transport for interactive commands\nlet client: Client | null = null;\nlet transport: StreamableHTTPClientTransport | null = null;\nlet serverUrl = 'http://localhost:3000/mcp';\nlet notificationsToolLastEventId: string | undefined = undefined;\nlet sessionId: string | undefined = undefined;\n\nasync function main(): Promise<void> {\n    console.log('MCP Interactive Client');\n    console.log('=====================');\n\n    // Connect to server immediately with default settings\n    await connect();\n\n    // Print help and start the command loop\n    printHelp();\n    commandLoop();\n}\n\nfunction printHelp(): void {\n    console.log('\\nAvailable commands:');\n    console.log('  connect [url]              - Connect to MCP server (default: http://localhost:3000/mcp)');\n    console.log('  disconnect                 - Disconnect from server');\n    console.log('  terminate-session          - Terminate the current session');\n    console.log('  reconnect                  - Reconnect to the server');\n    console.log('  list-tools                 - List available tools');\n    console.log('  call-tool <name> [args]    - Call a tool with optional JSON arguments');\n    console.log('  greet [name]               - Call the greet tool');\n    console.log('  multi-greet [name]         - Call the multi-greet tool with notifications');\n    console.log('  collect-info [type]        - Test elicitation with collect-user-info tool (contact/preferences/feedback)');\n    console.log('  start-notifications [interval] [count] - Start periodic notifications');\n    console.log('  run-notifications-tool-with-resumability [interval] [count] - Run notification tool with resumability');\n    console.log('  list-prompts               - List available prompts');\n    console.log('  get-prompt [name] [args]   - Get a prompt with optional JSON arguments');\n    console.log('  list-resources             - List available resources');\n    console.log('  read-resource <uri>        - Read a specific resource by URI');\n    console.log('  help                       - Show this help');\n    console.log('  quit                       - Exit the program');\n}\n\nfunction commandLoop(): void {\n    readline.question('\\n> ', async input => {\n        const args = input.trim().split(/\\s+/);\n        const command = args[0]?.toLowerCase();\n\n        try {\n            switch (command) {\n                case 'connect':\n                    await connect(args[1]);\n                    break;\n\n                case 'disconnect':\n                    await disconnect();\n                    break;\n\n                case 'terminate-session':\n                    await terminateSession();\n                    break;\n\n                case 'reconnect':\n                    await reconnect();\n                    break;\n\n                case 'list-tools':\n                    await listTools();\n                    break;\n\n                case 'call-tool':\n                    if (args.length < 2) {\n                        console.log('Usage: call-tool <name> [args]');\n                    } else {\n                        const toolName = args[1];\n                        let toolArgs = {};\n                        if (args.length > 2) {\n                            try {\n                                toolArgs = JSON.parse(args.slice(2).join(' '));\n                            } catch {\n                                console.log('Invalid JSON arguments. Using empty args.');\n                            }\n                        }\n                        await callTool(toolName, toolArgs);\n                    }\n                    break;\n\n                case 'greet':\n                    await callGreetTool(args[1] || 'MCP User');\n                    break;\n\n                case 'multi-greet':\n                    await callMultiGreetTool(args[1] || 'MCP User');\n                    break;\n\n                case 'collect-info':\n                    await callCollectInfoTool(args[1] || 'contact');\n                    break;\n\n                case 'start-notifications': {\n                    const interval = args[1] ? parseInt(args[1], 10) : 2000;\n                    const count = args[2] ? parseInt(args[2], 10) : 10;\n                    await startNotifications(interval, count);\n                    break;\n                }\n\n                case 'run-notifications-tool-with-resumability': {\n                    const interval = args[1] ? parseInt(args[1], 10) : 2000;\n                    const count = args[2] ? parseInt(args[2], 10) : 10;\n                    await runNotificationsToolWithResumability(interval, count);\n                    break;\n                }\n\n                case 'list-prompts':\n                    await listPrompts();\n                    break;\n\n                case 'get-prompt':\n                    if (args.length < 2) {\n                        console.log('Usage: get-prompt <name> [args]');\n                    } else {\n                        const promptName = args[1];\n                        let promptArgs = {};\n                        if (args.length > 2) {\n                            try {\n                                promptArgs = JSON.parse(args.slice(2).join(' '));\n                            } catch {\n                                console.log('Invalid JSON arguments. Using empty args.');\n                            }\n                        }\n                        await getPrompt(promptName, promptArgs);\n                    }\n                    break;\n\n                case 'list-resources':\n                    await listResources();\n                    break;\n\n                case 'read-resource':\n                    if (args.length < 2) {\n                        console.log('Usage: read-resource <uri>');\n                    } else {\n                        await readResource(args[1]);\n                    }\n                    break;\n\n                case 'help':\n                    printHelp();\n                    break;\n\n                case 'quit':\n                case 'exit':\n                    await cleanup();\n                    return;\n\n                default:\n                    if (command) {\n                        console.log(`Unknown command: ${command}`);\n                    }\n                    break;\n            }\n        } catch (error) {\n            console.error(`Error executing command: ${error}`);\n        }\n\n        // Continue the command loop\n        commandLoop();\n    });\n}\n\nasync function connect(url?: string): Promise<void> {\n    if (client) {\n        console.log('Already connected. Disconnect first.');\n        return;\n    }\n\n    if (url) {\n        serverUrl = url;\n    }\n\n    console.log(`Connecting to ${serverUrl}...`);\n\n    try {\n        // Create a new client with elicitation capability\n        client = new Client(\n            {\n                name: 'example-client',\n                version: '1.0.0'\n            },\n            {\n                capabilities: {\n                    elicitation: {}\n                }\n            }\n        );\n        client.onerror = error => {\n            console.error('\\x1b[31mClient error:', error, '\\x1b[0m');\n        };\n\n        // Set up elicitation request handler with proper validation\n        client.setRequestHandler(ElicitRequestSchema, async request => {\n            console.log('\\n🔔 Elicitation Request Received:');\n            console.log(`Message: ${request.params.message}`);\n            console.log('Requested Schema:');\n            console.log(JSON.stringify(request.params.requestedSchema, null, 2));\n\n            const schema = request.params.requestedSchema;\n            const properties = schema.properties;\n            const required = schema.required || [];\n\n            // Set up AJV validator for the requested schema\n            const ajv = new Ajv();\n            const validate = ajv.compile(schema);\n\n            let attempts = 0;\n            const maxAttempts = 3;\n\n            while (attempts < maxAttempts) {\n                attempts++;\n                console.log(`\\nPlease provide the following information (attempt ${attempts}/${maxAttempts}):`);\n\n                const content: Record<string, unknown> = {};\n                let inputCancelled = false;\n\n                // Collect input for each field\n                for (const [fieldName, fieldSchema] of Object.entries(properties)) {\n                    const field = fieldSchema as {\n                        type?: string;\n                        title?: string;\n                        description?: string;\n                        default?: unknown;\n                        enum?: string[];\n                        minimum?: number;\n                        maximum?: number;\n                        minLength?: number;\n                        maxLength?: number;\n                        format?: string;\n                    };\n\n                    const isRequired = required.includes(fieldName);\n                    let prompt = `${field.title || fieldName}`;\n\n                    // Add helpful information to the prompt\n                    if (field.description) {\n                        prompt += ` (${field.description})`;\n                    }\n                    if (field.enum) {\n                        prompt += ` [options: ${field.enum.join(', ')}]`;\n                    }\n                    if (field.type === 'number' || field.type === 'integer') {\n                        if (field.minimum !== undefined && field.maximum !== undefined) {\n                            prompt += ` [${field.minimum}-${field.maximum}]`;\n                        } else if (field.minimum !== undefined) {\n                            prompt += ` [min: ${field.minimum}]`;\n                        } else if (field.maximum !== undefined) {\n                            prompt += ` [max: ${field.maximum}]`;\n                        }\n                    }\n                    if (field.type === 'string' && field.format) {\n                        prompt += ` [format: ${field.format}]`;\n                    }\n                    if (isRequired) {\n                        prompt += ' *required*';\n                    }\n                    if (field.default !== undefined) {\n                        prompt += ` [default: ${field.default}]`;\n                    }\n\n                    prompt += ': ';\n\n                    const answer = await new Promise<string>(resolve => {\n                        readline.question(prompt, input => {\n                            resolve(input.trim());\n                        });\n                    });\n\n                    // Check for cancellation\n                    if (answer.toLowerCase() === 'cancel' || answer.toLowerCase() === 'c') {\n                        inputCancelled = true;\n                        break;\n                    }\n\n                    // Parse and validate the input\n                    try {\n                        if (answer === '' && field.default !== undefined) {\n                            content[fieldName] = field.default;\n                        } else if (answer === '' && !isRequired) {\n                            // Skip optional empty fields\n                            continue;\n                        } else if (answer === '') {\n                            throw new Error(`${fieldName} is required`);\n                        } else {\n                            // Parse the value based on type\n                            let parsedValue: unknown;\n\n                            if (field.type === 'boolean') {\n                                parsedValue = answer.toLowerCase() === 'true' || answer.toLowerCase() === 'yes' || answer === '1';\n                            } else if (field.type === 'number') {\n                                parsedValue = parseFloat(answer);\n                                if (isNaN(parsedValue as number)) {\n                                    throw new Error(`${fieldName} must be a valid number`);\n                                }\n                            } else if (field.type === 'integer') {\n                                parsedValue = parseInt(answer, 10);\n                                if (isNaN(parsedValue as number)) {\n                                    throw new Error(`${fieldName} must be a valid integer`);\n                                }\n                            } else if (field.enum) {\n                                if (!field.enum.includes(answer)) {\n                                    throw new Error(`${fieldName} must be one of: ${field.enum.join(', ')}`);\n                                }\n                                parsedValue = answer;\n                            } else {\n                                parsedValue = answer;\n                            }\n\n                            content[fieldName] = parsedValue;\n                        }\n                    } catch (error) {\n                        console.log(`❌ Error: ${error}`);\n                        // Continue to next attempt\n                        break;\n                    }\n                }\n\n                if (inputCancelled) {\n                    return { action: 'cancel' };\n                }\n\n                // If we didn't complete all fields due to an error, try again\n                if (\n                    Object.keys(content).length !==\n                    Object.keys(properties).filter(name => required.includes(name) || content[name] !== undefined).length\n                ) {\n                    if (attempts < maxAttempts) {\n                        console.log('Please try again...');\n                        continue;\n                    } else {\n                        console.log('Maximum attempts reached. Declining request.');\n                        return { action: 'decline' };\n                    }\n                }\n\n                // Validate the complete object against the schema\n                const isValid = validate(content);\n\n                if (!isValid) {\n                    console.log('❌ Validation errors:');\n                    validate.errors?.forEach(error => {\n                        console.log(`  - ${error.dataPath || 'root'}: ${error.message}`);\n                    });\n\n                    if (attempts < maxAttempts) {\n                        console.log('Please correct the errors and try again...');\n                        continue;\n                    } else {\n                        console.log('Maximum attempts reached. Declining request.');\n                        return { action: 'decline' };\n                    }\n                }\n\n                // Show the collected data and ask for confirmation\n                console.log('\\n✅ Collected data:');\n                console.log(JSON.stringify(content, null, 2));\n\n                const confirmAnswer = await new Promise<string>(resolve => {\n                    readline.question('\\nSubmit this information? (yes/no/cancel): ', input => {\n                        resolve(input.trim().toLowerCase());\n                    });\n                });\n\n                if (confirmAnswer === 'yes' || confirmAnswer === 'y') {\n                    return {\n                        action: 'accept',\n                        content\n                    };\n                } else if (confirmAnswer === 'cancel' || confirmAnswer === 'c') {\n                    return { action: 'cancel' };\n                } else if (confirmAnswer === 'no' || confirmAnswer === 'n') {\n                    if (attempts < maxAttempts) {\n                        console.log('Please re-enter the information...');\n                        continue;\n                    } else {\n                        return { action: 'decline' };\n                    }\n                }\n            }\n\n            console.log('Maximum attempts reached. Declining request.');\n            return { action: 'decline' };\n        });\n\n        transport = new StreamableHTTPClientTransport(new URL(serverUrl), {\n            sessionId: sessionId\n        });\n\n        // Set up notification handlers\n        client.setNotificationHandler(LoggingMessageNotificationSchema, notification => {\n            notificationCount++;\n            console.log(`\\nNotification #${notificationCount}: ${notification.params.level} - ${notification.params.data}`);\n            // Re-display the prompt\n            process.stdout.write('> ');\n        });\n\n        client.setNotificationHandler(ResourceListChangedNotificationSchema, async _ => {\n            console.log(`\\nResource list changed notification received!`);\n            try {\n                if (!client) {\n                    console.log('Client disconnected, cannot fetch resources');\n                    return;\n                }\n                const resourcesResult = await client.request(\n                    {\n                        method: 'resources/list',\n                        params: {}\n                    },\n                    ListResourcesResultSchema\n                );\n                console.log('Available resources count:', resourcesResult.resources.length);\n            } catch {\n                console.log('Failed to list resources after change notification');\n            }\n            // Re-display the prompt\n            process.stdout.write('> ');\n        });\n\n        // Connect the client\n        await client.connect(transport);\n        sessionId = transport.sessionId;\n        console.log('Transport created with session ID:', sessionId);\n        console.log('Connected to MCP server');\n    } catch (error) {\n        console.error('Failed to connect:', error);\n        client = null;\n        transport = null;\n    }\n}\n\nasync function disconnect(): Promise<void> {\n    if (!client || !transport) {\n        console.log('Not connected.');\n        return;\n    }\n\n    try {\n        await transport.close();\n        console.log('Disconnected from MCP server');\n        client = null;\n        transport = null;\n    } catch (error) {\n        console.error('Error disconnecting:', error);\n    }\n}\n\nasync function terminateSession(): Promise<void> {\n    if (!client || !transport) {\n        console.log('Not connected.');\n        return;\n    }\n\n    try {\n        console.log('Terminating session with ID:', transport.sessionId);\n        await transport.terminateSession();\n        console.log('Session terminated successfully');\n\n        // Check if sessionId was cleared after termination\n        if (!transport.sessionId) {\n            console.log('Session ID has been cleared');\n            sessionId = undefined;\n\n            // Also close the transport and clear client objects\n            await transport.close();\n            console.log('Transport closed after session termination');\n            client = null;\n            transport = null;\n        } else {\n            console.log('Server responded with 405 Method Not Allowed (session termination not supported)');\n            console.log('Session ID is still active:', transport.sessionId);\n        }\n    } catch (error) {\n        console.error('Error terminating session:', error);\n    }\n}\n\nasync function reconnect(): Promise<void> {\n    if (client) {\n        await disconnect();\n    }\n    await connect();\n}\n\nasync function listTools(): Promise<void> {\n    if (!client) {\n        console.log('Not connected to server.');\n        return;\n    }\n\n    try {\n        const toolsRequest: ListToolsRequest = {\n            method: 'tools/list',\n            params: {}\n        };\n        const toolsResult = await client.request(toolsRequest, ListToolsResultSchema);\n\n        console.log('Available tools:');\n        if (toolsResult.tools.length === 0) {\n            console.log('  No tools available');\n        } else {\n            for (const tool of toolsResult.tools) {\n                console.log(`  - id: ${tool.name}, name: ${getDisplayName(tool)}, description: ${tool.description}`);\n            }\n        }\n    } catch (error) {\n        console.log(`Tools not supported by this server (${error})`);\n    }\n}\n\nasync function callTool(name: string, args: Record<string, unknown>): Promise<void> {\n    if (!client) {\n        console.log('Not connected to server.');\n        return;\n    }\n\n    try {\n        const request: CallToolRequest = {\n            method: 'tools/call',\n            params: {\n                name,\n                arguments: args\n            }\n        };\n\n        console.log(`Calling tool '${name}' with args:`, args);\n        const result = await client.request(request, CallToolResultSchema);\n\n        console.log('Tool result:');\n        const resourceLinks: ResourceLink[] = [];\n\n        result.content.forEach(item => {\n            if (item.type === 'text') {\n                console.log(`  ${item.text}`);\n            } else if (item.type === 'resource_link') {\n                const resourceLink = item as ResourceLink;\n                resourceLinks.push(resourceLink);\n                console.log(`  📁 Resource Link: ${resourceLink.name}`);\n                console.log(`     URI: ${resourceLink.uri}`);\n                if (resourceLink.mimeType) {\n                    console.log(`     Type: ${resourceLink.mimeType}`);\n                }\n                if (resourceLink.description) {\n                    console.log(`     Description: ${resourceLink.description}`);\n                }\n            } else if (item.type === 'resource') {\n                console.log(`  [Embedded Resource: ${item.resource.uri}]`);\n            } else if (item.type === 'image') {\n                console.log(`  [Image: ${item.mimeType}]`);\n            } else if (item.type === 'audio') {\n                console.log(`  [Audio: ${item.mimeType}]`);\n            } else {\n                console.log(`  [Unknown content type]:`, item);\n            }\n        });\n\n        // Offer to read resource links\n        if (resourceLinks.length > 0) {\n            console.log(`\\nFound ${resourceLinks.length} resource link(s). Use 'read-resource <uri>' to read their content.`);\n        }\n    } catch (error) {\n        console.log(`Error calling tool ${name}: ${error}`);\n    }\n}\n\nasync function callGreetTool(name: string): Promise<void> {\n    await callTool('greet', { name });\n}\n\nasync function callMultiGreetTool(name: string): Promise<void> {\n    console.log('Calling multi-greet tool with notifications...');\n    await callTool('multi-greet', { name });\n}\n\nasync function callCollectInfoTool(infoType: string): Promise<void> {\n    console.log(`Testing elicitation with collect-user-info tool (${infoType})...`);\n    await callTool('collect-user-info', { infoType });\n}\n\nasync function startNotifications(interval: number, count: number): Promise<void> {\n    console.log(`Starting notification stream: interval=${interval}ms, count=${count || 'unlimited'}`);\n    await callTool('start-notification-stream', { interval, count });\n}\n\nasync function runNotificationsToolWithResumability(interval: number, count: number): Promise<void> {\n    if (!client) {\n        console.log('Not connected to server.');\n        return;\n    }\n\n    try {\n        console.log(`Starting notification stream with resumability: interval=${interval}ms, count=${count || 'unlimited'}`);\n        console.log(`Using resumption token: ${notificationsToolLastEventId || 'none'}`);\n\n        const request: CallToolRequest = {\n            method: 'tools/call',\n            params: {\n                name: 'start-notification-stream',\n                arguments: { interval, count }\n            }\n        };\n\n        const onLastEventIdUpdate = (event: string) => {\n            notificationsToolLastEventId = event;\n            console.log(`Updated resumption token: ${event}`);\n        };\n\n        const result = await client.request(request, CallToolResultSchema, {\n            resumptionToken: notificationsToolLastEventId,\n            onresumptiontoken: onLastEventIdUpdate\n        });\n\n        console.log('Tool result:');\n        result.content.forEach(item => {\n            if (item.type === 'text') {\n                console.log(`  ${item.text}`);\n            } else {\n                console.log(`  ${item.type} content:`, item);\n            }\n        });\n    } catch (error) {\n        console.log(`Error starting notification stream: ${error}`);\n    }\n}\n\nasync function listPrompts(): Promise<void> {\n    if (!client) {\n        console.log('Not connected to server.');\n        return;\n    }\n\n    try {\n        const promptsRequest: ListPromptsRequest = {\n            method: 'prompts/list',\n            params: {}\n        };\n        const promptsResult = await client.request(promptsRequest, ListPromptsResultSchema);\n        console.log('Available prompts:');\n        if (promptsResult.prompts.length === 0) {\n            console.log('  No prompts available');\n        } else {\n            for (const prompt of promptsResult.prompts) {\n                console.log(`  - id: ${prompt.name}, name: ${getDisplayName(prompt)}, description: ${prompt.description}`);\n            }\n        }\n    } catch (error) {\n        console.log(`Prompts not supported by this server (${error})`);\n    }\n}\n\nasync function getPrompt(name: string, args: Record<string, unknown>): Promise<void> {\n    if (!client) {\n        console.log('Not connected to server.');\n        return;\n    }\n\n    try {\n        const promptRequest: GetPromptRequest = {\n            method: 'prompts/get',\n            params: {\n                name,\n                arguments: args as Record<string, string>\n            }\n        };\n\n        const promptResult = await client.request(promptRequest, GetPromptResultSchema);\n        console.log('Prompt template:');\n        promptResult.messages.forEach((msg, index) => {\n            console.log(`  [${index + 1}] ${msg.role}: ${msg.content.text}`);\n        });\n    } catch (error) {\n        console.log(`Error getting prompt ${name}: ${error}`);\n    }\n}\n\nasync function listResources(): Promise<void> {\n    if (!client) {\n        console.log('Not connected to server.');\n        return;\n    }\n\n    try {\n        const resourcesRequest: ListResourcesRequest = {\n            method: 'resources/list',\n            params: {}\n        };\n        const resourcesResult = await client.request(resourcesRequest, ListResourcesResultSchema);\n\n        console.log('Available resources:');\n        if (resourcesResult.resources.length === 0) {\n            console.log('  No resources available');\n        } else {\n            for (const resource of resourcesResult.resources) {\n                console.log(`  - id: ${resource.name}, name: ${getDisplayName(resource)}, description: ${resource.uri}`);\n            }\n        }\n    } catch (error) {\n        console.log(`Resources not supported by this server (${error})`);\n    }\n}\n\nasync function readResource(uri: string): Promise<void> {\n    if (!client) {\n        console.log('Not connected to server.');\n        return;\n    }\n\n    try {\n        const request: ReadResourceRequest = {\n            method: 'resources/read',\n            params: { uri }\n        };\n\n        console.log(`Reading resource: ${uri}`);\n        const result = await client.request(request, ReadResourceResultSchema);\n\n        console.log('Resource contents:');\n        for (const content of result.contents) {\n            console.log(`  URI: ${content.uri}`);\n            if (content.mimeType) {\n                console.log(`  Type: ${content.mimeType}`);\n            }\n\n            if ('text' in content && typeof content.text === 'string') {\n                console.log('  Content:');\n                console.log('  ---');\n                console.log(\n                    content.text\n                        .split('\\n')\n                        .map((line: string) => '  ' + line)\n                        .join('\\n')\n                );\n                console.log('  ---');\n            } else if ('blob' in content && typeof content.blob === 'string') {\n                console.log(`  [Binary data: ${content.blob.length} bytes]`);\n            }\n        }\n    } catch (error) {\n        console.log(`Error reading resource ${uri}: ${error}`);\n    }\n}\n\nasync function cleanup(): Promise<void> {\n    if (client && transport) {\n        try {\n            // First try to terminate the session gracefully\n            if (transport.sessionId) {\n                try {\n                    console.log('Terminating session before exit...');\n                    await transport.terminateSession();\n                    console.log('Session terminated successfully');\n                } catch (error) {\n                    console.error('Error terminating session:', error);\n                }\n            }\n\n            // Then close the transport\n            await transport.close();\n        } catch (error) {\n            console.error('Error closing transport:', error);\n        }\n    }\n\n    process.stdin.setRawMode(false);\n    readline.close();\n    console.log('\\nGoodbye!');\n    process.exit(0);\n}\n\n// Set up raw mode for keyboard input to capture Escape key\nprocess.stdin.setRawMode(true);\nprocess.stdin.on('data', async data => {\n    // Check for Escape key (27)\n    if (data.length === 1 && data[0] === 27) {\n        console.log('\\nESC key pressed. Disconnecting from server...');\n\n        // Abort current operation and disconnect from server\n        if (client && transport) {\n            await disconnect();\n            console.log('Disconnected. Press Enter to continue.');\n        } else {\n            console.log('Not connected to server.');\n        }\n\n        // Re-display the prompt\n        process.stdout.write('> ');\n    }\n});\n\n// Handle Ctrl+C\nprocess.on('SIGINT', async () => {\n    console.log('\\nReceived SIGINT. Cleaning up...');\n    await cleanup();\n});\n\n// Start the interactive client\nmain().catch((error: unknown) => {\n    console.error('Error running MCP client:', error);\n    process.exit(1);\n});\n"],"names":["createInterface","Client","ElicitRequestSchema","StreamableHTTPClientTransport","LoggingMessageNotificationSchema","ResourceListChangedNotificationSchema","ListResourcesResultSchema","ListToolsResultSchema","getDisplayName","CallToolResultSchema","ListPromptsResultSchema","GetPromptResultSchema","index","ReadResourceResultSchema"],"mappings":"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"}