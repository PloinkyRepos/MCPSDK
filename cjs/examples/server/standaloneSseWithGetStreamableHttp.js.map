{"version":3,"file":"standaloneSseWithGetStreamableHttp.js","sources":["../../../../src/examples/server/standaloneSseWithGetStreamableHttp.ts"],"sourcesContent":["import express, { Request, Response } from 'express';\nimport { randomUUID } from 'node:crypto';\nimport { McpServer } from '../../server/mcp.js';\nimport { StreamableHTTPServerTransport } from '../../server/streamableHttp.js';\nimport { isInitializeRequest, ReadResourceResult } from '../../types.js';\n\n// Create an MCP server with implementation details\nconst server = new McpServer({\n    name: 'resource-list-changed-notification-server',\n    version: '1.0.0'\n});\n\n// Store transports by session ID to send notifications\nconst transports: { [sessionId: string]: StreamableHTTPServerTransport } = {};\n\nconst addResource = (name: string, content: string) => {\n    const uri = `https://mcp-example.com/dynamic/${encodeURIComponent(name)}`;\n    server.resource(\n        name,\n        uri,\n        { mimeType: 'text/plain', description: `Dynamic resource: ${name}` },\n        async (): Promise<ReadResourceResult> => {\n            return {\n                contents: [{ uri, text: content }]\n            };\n        }\n    );\n};\n\naddResource('example-resource', 'Initial content for example-resource');\n\nconst resourceChangeInterval = setInterval(() => {\n    const name = randomUUID();\n    addResource(name, `Content for ${name}`);\n}, 5000); // Change resources every 5 seconds for testing\n\nconst app = express();\napp.use(express.json());\n\napp.post('/mcp', async (req: Request, res: Response) => {\n    console.log('Received MCP request:', req.body);\n    try {\n        // Check for existing session ID\n        const sessionId = req.headers['mcp-session-id'] as string | undefined;\n        let transport: StreamableHTTPServerTransport;\n\n        if (sessionId && transports[sessionId]) {\n            // Reuse existing transport\n            transport = transports[sessionId];\n        } else if (!sessionId && isInitializeRequest(req.body)) {\n            // New initialization request\n            transport = new StreamableHTTPServerTransport({\n                sessionIdGenerator: () => randomUUID(),\n                onsessioninitialized: sessionId => {\n                    // Store the transport by session ID when session is initialized\n                    // This avoids race conditions where requests might come in before the session is stored\n                    console.log(`Session initialized with ID: ${sessionId}`);\n                    transports[sessionId] = transport;\n                }\n            });\n\n            // Connect the transport to the MCP server\n            await server.connect(transport);\n\n            // Handle the request - the onsessioninitialized callback will store the transport\n            await transport.handleRequest(req, res, req.body);\n            return; // Already handled\n        } else {\n            // Invalid request - no session ID or not initialization request\n            res.status(400).json({\n                jsonrpc: '2.0',\n                error: {\n                    code: -32000,\n                    message: 'Bad Request: No valid session ID provided'\n                },\n                id: null\n            });\n            return;\n        }\n\n        // Handle the request with existing transport\n        await transport.handleRequest(req, res, req.body);\n    } catch (error) {\n        console.error('Error handling MCP request:', error);\n        if (!res.headersSent) {\n            res.status(500).json({\n                jsonrpc: '2.0',\n                error: {\n                    code: -32603,\n                    message: 'Internal server error'\n                },\n                id: null\n            });\n        }\n    }\n});\n\n// Handle GET requests for SSE streams (now using built-in support from StreamableHTTP)\napp.get('/mcp', async (req: Request, res: Response) => {\n    const sessionId = req.headers['mcp-session-id'] as string | undefined;\n    if (!sessionId || !transports[sessionId]) {\n        res.status(400).send('Invalid or missing session ID');\n        return;\n    }\n\n    console.log(`Establishing SSE stream for session ${sessionId}`);\n    const transport = transports[sessionId];\n    await transport.handleRequest(req, res);\n});\n\n// Start the server\nconst PORT = 3000;\napp.listen(PORT, error => {\n    if (error) {\n        console.error('Failed to start server:', error);\n        process.exit(1);\n    }\n    console.log(`Server listening on port ${PORT}`);\n});\n\n// Handle server shutdown\nprocess.on('SIGINT', async () => {\n    console.log('Shutting down server...');\n    clearInterval(resourceChangeInterval);\n    await server.close();\n    process.exit(0);\n});\n"],"names":["McpServer","randomUUID","isInitializeRequest","StreamableHTTPServerTransport","sessionId"],"mappings":";;;;;;AAOA,MAAM,SAAS,IAAIA,IAAAA,UAAU;AAAA,EACzB,MAAM;AAAA,EACN,SAAS;AACb,CAAC;AAGD,MAAM,aAAqE,CAAA;AAE3E,MAAM,cAAc,CAAC,MAAc,YAAoB;AACnD,QAAM,MAAM,mCAAmC,mBAAmB,IAAI,CAAC;AACvE,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA,EAAE,UAAU,cAAc,aAAa,qBAAqB,IAAI,GAAA;AAAA,IAChE,YAAyC;AACrC,aAAO;AAAA,QACH,UAAU,CAAC,EAAE,KAAK,MAAM,SAAS;AAAA,MAAA;AAAA,IAEzC;AAAA,EAAA;AAER;AAEA,YAAY,oBAAoB,sCAAsC;AAEtE,MAAM,yBAAyB,YAAY,MAAM;AAC7C,QAAM,OAAOC,OAAAA,WAAA;AACb,cAAY,MAAM,eAAe,IAAI,EAAE;AAC3C,GAAG,GAAI;AAEP,MAAM,MAAM,QAAA;AACZ,IAAI,IAAI,QAAQ,MAAM;AAEtB,IAAI,KAAK,QAAQ,OAAO,KAAc,QAAkB;AACpD,UAAQ,IAAI,yBAAyB,IAAI,IAAI;AAC7C,MAAI;AAEA,UAAM,YAAY,IAAI,QAAQ,gBAAgB;AAC9C,QAAI;AAEJ,QAAI,aAAa,WAAW,SAAS,GAAG;AAEpC,kBAAY,WAAW,SAAS;AAAA,IACpC,WAAW,CAAC,aAAaC,MAAAA,oBAAoB,IAAI,IAAI,GAAG;AAEpD,kBAAY,IAAIC,eAAAA,8BAA8B;AAAA,QAC1C,oBAAoB,MAAMF,OAAAA,WAAA;AAAA,QAC1B,sBAAsB,CAAAG,eAAa;AAG/B,kBAAQ,IAAI,gCAAgCA,UAAS,EAAE;AACvD,qBAAWA,UAAS,IAAI;AAAA,QAC5B;AAAA,MAAA,CACH;AAGD,YAAM,OAAO,QAAQ,SAAS;AAG9B,YAAM,UAAU,cAAc,KAAK,KAAK,IAAI,IAAI;AAChD;AAAA,IACJ,OAAO;AAEH,UAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QACjB,SAAS;AAAA,QACT,OAAO;AAAA,UACH,MAAM;AAAA,UACN,SAAS;AAAA,QAAA;AAAA,QAEb,IAAI;AAAA,MAAA,CACP;AACD;AAAA,IACJ;AAGA,UAAM,UAAU,cAAc,KAAK,KAAK,IAAI,IAAI;AAAA,EACpD,SAAS,OAAO;AACZ,YAAQ,MAAM,+BAA+B,KAAK;AAClD,QAAI,CAAC,IAAI,aAAa;AAClB,UAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QACjB,SAAS;AAAA,QACT,OAAO;AAAA,UACH,MAAM;AAAA,UACN,SAAS;AAAA,QAAA;AAAA,QAEb,IAAI;AAAA,MAAA,CACP;AAAA,IACL;AAAA,EACJ;AACJ,CAAC;AAGD,IAAI,IAAI,QAAQ,OAAO,KAAc,QAAkB;AACnD,QAAM,YAAY,IAAI,QAAQ,gBAAgB;AAC9C,MAAI,CAAC,aAAa,CAAC,WAAW,SAAS,GAAG;AACtC,QAAI,OAAO,GAAG,EAAE,KAAK,+BAA+B;AACpD;AAAA,EACJ;AAEA,UAAQ,IAAI,uCAAuC,SAAS,EAAE;AAC9D,QAAM,YAAY,WAAW,SAAS;AACtC,QAAM,UAAU,cAAc,KAAK,GAAG;AAC1C,CAAC;AAGD,MAAM,OAAO;AACb,IAAI,OAAO,MAAM,CAAA,UAAS;AACtB,MAAI,OAAO;AACP,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,YAAQ,KAAK,CAAC;AAAA,EAClB;AACA,UAAQ,IAAI,4BAA4B,IAAI,EAAE;AAClD,CAAC;AAGD,QAAQ,GAAG,UAAU,YAAY;AAC7B,UAAQ,IAAI,yBAAyB;AACrC,gBAAc,sBAAsB;AACpC,QAAM,OAAO,MAAA;AACb,UAAQ,KAAK,CAAC;AAClB,CAAC;"}