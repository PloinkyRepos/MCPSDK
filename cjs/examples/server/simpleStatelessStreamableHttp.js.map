{"version":3,"file":"simpleStatelessStreamableHttp.js","sources":["../../../../src/examples/server/simpleStatelessStreamableHttp.ts"],"sourcesContent":["import express, { Request, Response } from 'express';\nimport { McpServer } from '../../server/mcp.js';\nimport { StreamableHTTPServerTransport } from '../../server/streamableHttp.js';\nimport { z } from 'zod';\nimport { CallToolResult, GetPromptResult, ReadResourceResult } from '../../types.js';\nimport cors from 'cors';\n\nconst getServer = () => {\n    // Create an MCP server with implementation details\n    const server = new McpServer(\n        {\n            name: 'stateless-streamable-http-server',\n            version: '1.0.0'\n        },\n        { capabilities: { logging: {} } }\n    );\n\n    // Register a simple prompt\n    server.prompt(\n        'greeting-template',\n        'A simple greeting prompt template',\n        {\n            name: z.string().describe('Name to include in greeting')\n        },\n        async ({ name }): Promise<GetPromptResult> => {\n            return {\n                messages: [\n                    {\n                        role: 'user',\n                        content: {\n                            type: 'text',\n                            text: `Please greet ${name} in a friendly manner.`\n                        }\n                    }\n                ]\n            };\n        }\n    );\n\n    // Register a tool specifically for testing resumability\n    server.tool(\n        'start-notification-stream',\n        'Starts sending periodic notifications for testing resumability',\n        {\n            interval: z.number().describe('Interval in milliseconds between notifications').default(100),\n            count: z.number().describe('Number of notifications to send (0 for 100)').default(10)\n        },\n        async ({ interval, count }, extra): Promise<CallToolResult> => {\n            const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n            let counter = 0;\n\n            while (count === 0 || counter < count) {\n                counter++;\n                try {\n                    await server.sendLoggingMessage(\n                        {\n                            level: 'info',\n                            data: `Periodic notification #${counter} at ${new Date().toISOString()}`\n                        },\n                        extra.sessionId\n                    );\n                } catch (error) {\n                    console.error('Error sending notification:', error);\n                }\n                // Wait for the specified interval\n                await sleep(interval);\n            }\n\n            return {\n                content: [\n                    {\n                        type: 'text',\n                        text: `Started sending periodic notifications every ${interval}ms`\n                    }\n                ]\n            };\n        }\n    );\n\n    // Create a simple resource at a fixed URI\n    server.resource(\n        'greeting-resource',\n        'https://example.com/greetings/default',\n        { mimeType: 'text/plain' },\n        async (): Promise<ReadResourceResult> => {\n            return {\n                contents: [\n                    {\n                        uri: 'https://example.com/greetings/default',\n                        text: 'Hello, world!'\n                    }\n                ]\n            };\n        }\n    );\n    return server;\n};\n\nconst app = express();\napp.use(express.json());\n\n// Configure CORS to expose Mcp-Session-Id header for browser-based clients\napp.use(\n    cors({\n        origin: '*', // Allow all origins - adjust as needed for production\n        exposedHeaders: ['Mcp-Session-Id']\n    })\n);\n\napp.post('/mcp', async (req: Request, res: Response) => {\n    const server = getServer();\n    try {\n        const transport: StreamableHTTPServerTransport = new StreamableHTTPServerTransport({\n            sessionIdGenerator: undefined\n        });\n        await server.connect(transport);\n        await transport.handleRequest(req, res, req.body);\n        res.on('close', () => {\n            console.log('Request closed');\n            transport.close();\n            server.close();\n        });\n    } catch (error) {\n        console.error('Error handling MCP request:', error);\n        if (!res.headersSent) {\n            res.status(500).json({\n                jsonrpc: '2.0',\n                error: {\n                    code: -32603,\n                    message: 'Internal server error'\n                },\n                id: null\n            });\n        }\n    }\n});\n\napp.get('/mcp', async (req: Request, res: Response) => {\n    console.log('Received GET MCP request');\n    res.writeHead(405).end(\n        JSON.stringify({\n            jsonrpc: '2.0',\n            error: {\n                code: -32000,\n                message: 'Method not allowed.'\n            },\n            id: null\n        })\n    );\n});\n\napp.delete('/mcp', async (req: Request, res: Response) => {\n    console.log('Received DELETE MCP request');\n    res.writeHead(405).end(\n        JSON.stringify({\n            jsonrpc: '2.0',\n            error: {\n                code: -32000,\n                message: 'Method not allowed.'\n            },\n            id: null\n        })\n    );\n});\n\n// Start the server\nconst PORT = 3000;\napp.listen(PORT, error => {\n    if (error) {\n        console.error('Failed to start server:', error);\n        process.exit(1);\n    }\n    console.log(`MCP Stateless Streamable HTTP Server listening on port ${PORT}`);\n});\n\n// Handle server shutdown\nprocess.on('SIGINT', async () => {\n    console.log('Shutting down server...');\n    process.exit(0);\n});\n"],"names":["McpServer","z","StreamableHTTPServerTransport"],"mappings":"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"}