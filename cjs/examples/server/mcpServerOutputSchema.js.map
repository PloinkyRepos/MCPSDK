{"version":3,"file":"mcpServerOutputSchema.js","sources":["../../../../src/examples/server/mcpServerOutputSchema.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Example MCP server using the high-level McpServer API with outputSchema\n * This demonstrates how to easily create tools with structured output\n */\n\nimport { McpServer } from '../../server/mcp.js';\nimport { StdioServerTransport } from '../../server/stdio.js';\nimport { z } from 'zod';\n\nconst server = new McpServer({\n    name: 'mcp-output-schema-high-level-example',\n    version: '1.0.0'\n});\n\n// Define a tool with structured output - Weather data\nserver.registerTool(\n    'get_weather',\n    {\n        description: 'Get weather information for a city',\n        inputSchema: {\n            city: z.string().describe('City name'),\n            country: z.string().describe('Country code (e.g., US, UK)')\n        },\n        outputSchema: {\n            temperature: z.object({\n                celsius: z.number(),\n                fahrenheit: z.number()\n            }),\n            conditions: z.enum(['sunny', 'cloudy', 'rainy', 'stormy', 'snowy']),\n            humidity: z.number().min(0).max(100),\n            wind: z.object({\n                speed_kmh: z.number(),\n                direction: z.string()\n            })\n        }\n    },\n    async ({ city, country }) => {\n        // Parameters are available but not used in this example\n        void city;\n        void country;\n        // Simulate weather API call\n        const temp_c = Math.round((Math.random() * 35 - 5) * 10) / 10;\n        const conditions = ['sunny', 'cloudy', 'rainy', 'stormy', 'snowy'][Math.floor(Math.random() * 5)];\n\n        const structuredContent = {\n            temperature: {\n                celsius: temp_c,\n                fahrenheit: Math.round(((temp_c * 9) / 5 + 32) * 10) / 10\n            },\n            conditions,\n            humidity: Math.round(Math.random() * 100),\n            wind: {\n                speed_kmh: Math.round(Math.random() * 50),\n                direction: ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'][Math.floor(Math.random() * 8)]\n            }\n        };\n\n        return {\n            content: [\n                {\n                    type: 'text',\n                    text: JSON.stringify(structuredContent, null, 2)\n                }\n            ],\n            structuredContent\n        };\n    }\n);\n\nasync function main() {\n    const transport = new StdioServerTransport();\n    await server.connect(transport);\n    console.error('High-level Output Schema Example Server running on stdio');\n}\n\nmain().catch(error => {\n    console.error('Server error:', error);\n    process.exit(1);\n});\n"],"names":["McpServer","z","StdioServerTransport"],"mappings":";;;;;AAUA,MAAM,SAAS,IAAIA,IAAAA,UAAU;AAAA,EACzB,MAAM;AAAA,EACN,SAAS;AACb,CAAC;AAGD,OAAO;AAAA,EACH;AAAA,EACA;AAAA,IACI,aAAa;AAAA,IACb,aAAa;AAAA,MACT,MAAMC,IAAAA,EAAE,SAAS,SAAS,WAAW;AAAA,MACrC,SAASA,IAAAA,EAAE,OAAA,EAAS,SAAS,6BAA6B;AAAA,IAAA;AAAA,IAE9D,cAAc;AAAA,MACV,aAAaA,IAAAA,EAAE,OAAO;AAAA,QAClB,SAASA,IAAAA,EAAE,OAAA;AAAA,QACX,YAAYA,IAAAA,EAAE,OAAA;AAAA,MAAO,CACxB;AAAA,MACD,YAAYA,IAAAA,EAAE,KAAK,CAAC,SAAS,UAAU,SAAS,UAAU,OAAO,CAAC;AAAA,MAClE,UAAUA,IAAAA,EAAE,OAAA,EAAS,IAAI,CAAC,EAAE,IAAI,GAAG;AAAA,MACnC,MAAMA,IAAAA,EAAE,OAAO;AAAA,QACX,WAAWA,IAAAA,EAAE,OAAA;AAAA,QACb,WAAWA,IAAAA,EAAE,OAAA;AAAA,MAAO,CACvB;AAAA,IAAA;AAAA,EACL;AAAA,EAEJ,OAAO,EAAE,MAAM,cAAc;AAKzB,UAAM,SAAS,KAAK,OAAO,KAAK,WAAW,KAAK,KAAK,EAAE,IAAI;AAC3D,UAAM,aAAa,CAAC,SAAS,UAAU,SAAS,UAAU,OAAO,EAAE,KAAK,MAAM,KAAK,OAAA,IAAW,CAAC,CAAC;AAEhG,UAAM,oBAAoB;AAAA,MACtB,aAAa;AAAA,QACT,SAAS;AAAA,QACT,YAAY,KAAK,OAAQ,SAAS,IAAK,IAAI,MAAM,EAAE,IAAI;AAAA,MAAA;AAAA,MAE3D;AAAA,MACA,UAAU,KAAK,MAAM,KAAK,OAAA,IAAW,GAAG;AAAA,MACxC,MAAM;AAAA,QACF,WAAW,KAAK,MAAM,KAAK,OAAA,IAAW,EAAE;AAAA,QACxC,WAAW,CAAC,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,IAAI,EAAE,KAAK,MAAM,KAAK,OAAA,IAAW,CAAC,CAAC;AAAA,MAAA;AAAA,IACzF;AAGJ,WAAO;AAAA,MACH,SAAS;AAAA,QACL;AAAA,UACI,MAAM;AAAA,UACN,MAAM,KAAK,UAAU,mBAAmB,MAAM,CAAC;AAAA,QAAA;AAAA,MACnD;AAAA,MAEJ;AAAA,IAAA;AAAA,EAER;AACJ;AAEA,eAAe,OAAO;AAClB,QAAM,YAAY,IAAIC,2BAAA;AACtB,QAAM,OAAO,QAAQ,SAAS;AAC9B,UAAQ,MAAM,0DAA0D;AAC5E;AAEA,OAAO,MAAM,CAAA,UAAS;AAClB,UAAQ,MAAM,iBAAiB,KAAK;AACpC,UAAQ,KAAK,CAAC;AAClB,CAAC;"}