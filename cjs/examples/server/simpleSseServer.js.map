{"version":3,"file":"simpleSseServer.js","sources":["../../../../src/examples/server/simpleSseServer.ts"],"sourcesContent":["import express, { Request, Response } from 'express';\nimport { McpServer } from '../../server/mcp.js';\nimport { SSEServerTransport } from '../../server/sse.js';\nimport { z } from 'zod';\nimport { CallToolResult } from '../../types.js';\n\n/**\n * This example server demonstrates the deprecated HTTP+SSE transport\n * (protocol version 2024-11-05). It mainly used for testing backward compatible clients.\n *\n * The server exposes two endpoints:\n * - /mcp: For establishing the SSE stream (GET)\n * - /messages: For receiving client messages (POST)\n *\n */\n\n// Create an MCP server instance\nconst getServer = () => {\n    const server = new McpServer(\n        {\n            name: 'simple-sse-server',\n            version: '1.0.0'\n        },\n        { capabilities: { logging: {} } }\n    );\n\n    server.tool(\n        'start-notification-stream',\n        'Starts sending periodic notifications',\n        {\n            interval: z.number().describe('Interval in milliseconds between notifications').default(1000),\n            count: z.number().describe('Number of notifications to send').default(10)\n        },\n        async ({ interval, count }, extra): Promise<CallToolResult> => {\n            const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n            let counter = 0;\n\n            // Send the initial notification\n            await server.sendLoggingMessage(\n                {\n                    level: 'info',\n                    data: `Starting notification stream with ${count} messages every ${interval}ms`\n                },\n                extra.sessionId\n            );\n\n            // Send periodic notifications\n            while (counter < count) {\n                counter++;\n                await sleep(interval);\n\n                try {\n                    await server.sendLoggingMessage(\n                        {\n                            level: 'info',\n                            data: `Notification #${counter} at ${new Date().toISOString()}`\n                        },\n                        extra.sessionId\n                    );\n                } catch (error) {\n                    console.error('Error sending notification:', error);\n                }\n            }\n\n            return {\n                content: [\n                    {\n                        type: 'text',\n                        text: `Completed sending ${count} notifications every ${interval}ms`\n                    }\n                ]\n            };\n        }\n    );\n    return server;\n};\n\nconst app = express();\napp.use(express.json());\n\n// Store transports by session ID\nconst transports: Record<string, SSEServerTransport> = {};\n\n// SSE endpoint for establishing the stream\napp.get('/mcp', async (req: Request, res: Response) => {\n    console.log('Received GET request to /sse (establishing SSE stream)');\n\n    try {\n        // Create a new SSE transport for the client\n        // The endpoint for POST messages is '/messages'\n        const transport = new SSEServerTransport('/messages', res);\n\n        // Store the transport by session ID\n        const sessionId = transport.sessionId;\n        transports[sessionId] = transport;\n\n        // Set up onclose handler to clean up transport when closed\n        transport.onclose = () => {\n            console.log(`SSE transport closed for session ${sessionId}`);\n            delete transports[sessionId];\n        };\n\n        // Connect the transport to the MCP server\n        const server = getServer();\n        await server.connect(transport);\n\n        console.log(`Established SSE stream with session ID: ${sessionId}`);\n    } catch (error) {\n        console.error('Error establishing SSE stream:', error);\n        if (!res.headersSent) {\n            res.status(500).send('Error establishing SSE stream');\n        }\n    }\n});\n\n// Messages endpoint for receiving client JSON-RPC requests\napp.post('/messages', async (req: Request, res: Response) => {\n    console.log('Received POST request to /messages');\n\n    // Extract session ID from URL query parameter\n    // In the SSE protocol, this is added by the client based on the endpoint event\n    const sessionId = req.query.sessionId as string | undefined;\n\n    if (!sessionId) {\n        console.error('No session ID provided in request URL');\n        res.status(400).send('Missing sessionId parameter');\n        return;\n    }\n\n    const transport = transports[sessionId];\n    if (!transport) {\n        console.error(`No active transport found for session ID: ${sessionId}`);\n        res.status(404).send('Session not found');\n        return;\n    }\n\n    try {\n        // Handle the POST message with the transport\n        await transport.handlePostMessage(req, res, req.body);\n    } catch (error) {\n        console.error('Error handling request:', error);\n        if (!res.headersSent) {\n            res.status(500).send('Error handling request');\n        }\n    }\n});\n\n// Start the server\nconst PORT = 3000;\napp.listen(PORT, error => {\n    if (error) {\n        console.error('Failed to start server:', error);\n        process.exit(1);\n    }\n    console.log(`Simple SSE Server (deprecated protocol version 2024-11-05) listening on port ${PORT}`);\n});\n\n// Handle server shutdown\nprocess.on('SIGINT', async () => {\n    console.log('Shutting down server...');\n\n    // Close all active transports to properly clean up resources\n    for (const sessionId in transports) {\n        try {\n            console.log(`Closing transport for session ${sessionId}`);\n            await transports[sessionId].close();\n            delete transports[sessionId];\n        } catch (error) {\n            console.error(`Error closing transport for session ${sessionId}:`, error);\n        }\n    }\n    console.log('Server shutdown complete');\n    process.exit(0);\n});\n"],"names":["McpServer","z","SSEServerTransport"],"mappings":"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"}