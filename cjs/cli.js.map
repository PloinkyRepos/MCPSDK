{"version":3,"file":"cli.js","sources":["../../src/cli.ts"],"sourcesContent":["import WebSocket from 'ws';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(global as any).WebSocket = WebSocket;\n\nimport express from 'express';\nimport { Client } from './client/index.js';\nimport { SSEClientTransport } from './client/sse.js';\nimport { StdioClientTransport } from './client/stdio.js';\nimport { WebSocketClientTransport } from './client/websocket.js';\nimport { Server } from './server/index.js';\nimport { SSEServerTransport } from './server/sse.js';\nimport { StdioServerTransport } from './server/stdio.js';\nimport { ListResourcesResultSchema } from './types.js';\n\nasync function runClient(url_or_command: string, args: string[]) {\n    const client = new Client(\n        {\n            name: 'mcp-typescript test client',\n            version: '0.1.0'\n        },\n        {\n            capabilities: {\n                sampling: {}\n            }\n        }\n    );\n\n    let clientTransport;\n\n    let url: URL | undefined = undefined;\n    try {\n        url = new URL(url_or_command);\n    } catch {\n        // Ignore\n    }\n\n    if (url?.protocol === 'http:' || url?.protocol === 'https:') {\n        clientTransport = new SSEClientTransport(new URL(url_or_command));\n    } else if (url?.protocol === 'ws:' || url?.protocol === 'wss:') {\n        clientTransport = new WebSocketClientTransport(new URL(url_or_command));\n    } else {\n        clientTransport = new StdioClientTransport({\n            command: url_or_command,\n            args\n        });\n    }\n\n    console.log('Connected to server.');\n\n    await client.connect(clientTransport);\n    console.log('Initialized.');\n\n    await client.request({ method: 'resources/list' }, ListResourcesResultSchema);\n\n    await client.close();\n    console.log('Closed.');\n}\n\nasync function runServer(port: number | null) {\n    if (port !== null) {\n        const app = express();\n\n        let servers: Server[] = [];\n\n        app.get('/sse', async (req, res) => {\n            console.log('Got new SSE connection');\n\n            const transport = new SSEServerTransport('/message', res);\n            const server = new Server(\n                {\n                    name: 'mcp-typescript test server',\n                    version: '0.1.0'\n                },\n                {\n                    capabilities: {}\n                }\n            );\n\n            servers.push(server);\n\n            server.onclose = () => {\n                console.log('SSE connection closed');\n                servers = servers.filter(s => s !== server);\n            };\n\n            await server.connect(transport);\n        });\n\n        app.post('/message', async (req, res) => {\n            console.log('Received message');\n\n            const sessionId = req.query.sessionId as string;\n            const transport = servers.map(s => s.transport as SSEServerTransport).find(t => t.sessionId === sessionId);\n            if (!transport) {\n                res.status(404).send('Session not found');\n                return;\n            }\n\n            await transport.handlePostMessage(req, res);\n        });\n\n        app.listen(port, error => {\n            if (error) {\n                console.error('Failed to start server:', error);\n                process.exit(1);\n            }\n            console.log(`Server running on http://localhost:${port}/sse`);\n        });\n    } else {\n        const server = new Server(\n            {\n                name: 'mcp-typescript test server',\n                version: '0.1.0'\n            },\n            {\n                capabilities: {\n                    prompts: {},\n                    resources: {},\n                    tools: {},\n                    logging: {}\n                }\n            }\n        );\n\n        const transport = new StdioServerTransport();\n        await server.connect(transport);\n\n        console.log('Server running on stdio');\n    }\n}\n\nconst args = process.argv.slice(2);\nconst command = args[0];\nswitch (command) {\n    case 'client':\n        if (args.length < 2) {\n            console.error('Usage: client <server_url_or_command> [args...]');\n            process.exit(1);\n        }\n\n        runClient(args[1], args.slice(2)).catch(error => {\n            console.error(error);\n            process.exit(1);\n        });\n\n        break;\n\n    case 'server': {\n        const port = args[1] ? parseInt(args[1]) : null;\n        runServer(port).catch(error => {\n            console.error(error);\n            process.exit(1);\n        });\n\n        break;\n    }\n\n    default:\n        console.error('Unrecognized command:', command);\n}\n"],"names":["WebSocket","args","Client","SSEClientTransport","WebSocketClientTransport","StdioClientTransport","ListResourcesResultSchema","SSEServerTransport","Server","StdioServerTransport"],"mappings":"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"}