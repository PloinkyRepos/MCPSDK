{"version":3,"file":"types.js","sources":["../../src/types.ts"],"sourcesContent":["import { z, ZodTypeAny } from 'zod';\nimport { AuthInfo } from './server/auth/types.js';\n\nexport const LATEST_PROTOCOL_VERSION = '2025-06-18';\nexport const DEFAULT_NEGOTIATED_PROTOCOL_VERSION = '2025-03-26';\nexport const SUPPORTED_PROTOCOL_VERSIONS = [LATEST_PROTOCOL_VERSION, '2025-03-26', '2024-11-05', '2024-10-07'];\n\n/* JSON-RPC types */\nexport const JSONRPC_VERSION = '2.0';\n\n/**\n * A progress token, used to associate progress notifications with the original request.\n */\nexport const ProgressTokenSchema = z.union([z.string(), z.number().int()]);\n\n/**\n * An opaque token used to represent a cursor for pagination.\n */\nexport const CursorSchema = z.string();\n\nconst RequestMetaSchema = z\n    .object({\n        /**\n         * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.\n         */\n        progressToken: z.optional(ProgressTokenSchema)\n    })\n    .passthrough();\n\nconst BaseRequestParamsSchema = z\n    .object({\n        _meta: z.optional(RequestMetaSchema)\n    })\n    .passthrough();\n\nexport const RequestSchema = z.object({\n    method: z.string(),\n    params: z.optional(BaseRequestParamsSchema)\n});\n\nconst BaseNotificationParamsSchema = z\n    .object({\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\nexport const NotificationSchema = z.object({\n    method: z.string(),\n    params: z.optional(BaseNotificationParamsSchema)\n});\n\nexport const ResultSchema = z\n    .object({\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\n/**\n * A uniquely identifying ID for a request in JSON-RPC.\n */\nexport const RequestIdSchema = z.union([z.string(), z.number().int()]);\n\n/**\n * A request that expects a response.\n */\nexport const JSONRPCRequestSchema = z\n    .object({\n        jsonrpc: z.literal(JSONRPC_VERSION),\n        id: RequestIdSchema\n    })\n    .merge(RequestSchema)\n    .strict();\n\nexport const isJSONRPCRequest = (value: unknown): value is JSONRPCRequest => JSONRPCRequestSchema.safeParse(value).success;\n\n/**\n * A notification which does not expect a response.\n */\nexport const JSONRPCNotificationSchema = z\n    .object({\n        jsonrpc: z.literal(JSONRPC_VERSION)\n    })\n    .merge(NotificationSchema)\n    .strict();\n\nexport const isJSONRPCNotification = (value: unknown): value is JSONRPCNotification => JSONRPCNotificationSchema.safeParse(value).success;\n\n/**\n * A successful (non-error) response to a request.\n */\nexport const JSONRPCResponseSchema = z\n    .object({\n        jsonrpc: z.literal(JSONRPC_VERSION),\n        id: RequestIdSchema,\n        result: ResultSchema\n    })\n    .strict();\n\nexport const isJSONRPCResponse = (value: unknown): value is JSONRPCResponse => JSONRPCResponseSchema.safeParse(value).success;\n\n/**\n * Error codes defined by the JSON-RPC specification.\n */\nexport enum ErrorCode {\n    // SDK error codes\n    ConnectionClosed = -32000,\n    RequestTimeout = -32001,\n\n    // Standard JSON-RPC error codes\n    ParseError = -32700,\n    InvalidRequest = -32600,\n    MethodNotFound = -32601,\n    InvalidParams = -32602,\n    InternalError = -32603\n}\n\n/**\n * A response to a request that indicates an error occurred.\n */\nexport const JSONRPCErrorSchema = z\n    .object({\n        jsonrpc: z.literal(JSONRPC_VERSION),\n        id: RequestIdSchema,\n        error: z.object({\n            /**\n             * The error type that occurred.\n             */\n            code: z.number().int(),\n            /**\n             * A short description of the error. The message SHOULD be limited to a concise single sentence.\n             */\n            message: z.string(),\n            /**\n             * Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.).\n             */\n            data: z.optional(z.unknown())\n        })\n    })\n    .strict();\n\nexport const isJSONRPCError = (value: unknown): value is JSONRPCError => JSONRPCErrorSchema.safeParse(value).success;\n\nexport const JSONRPCMessageSchema = z.union([JSONRPCRequestSchema, JSONRPCNotificationSchema, JSONRPCResponseSchema, JSONRPCErrorSchema]);\n\n/* Empty result */\n/**\n * A response that indicates success but carries no data.\n */\nexport const EmptyResultSchema = ResultSchema.strict();\n\n/* Cancellation */\n/**\n * This notification can be sent by either side to indicate that it is cancelling a previously-issued request.\n *\n * The request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.\n *\n * This notification indicates that the result will be unused, so any associated processing SHOULD cease.\n *\n * A client MUST NOT attempt to cancel its `initialize` request.\n */\nexport const CancelledNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/cancelled'),\n    params: BaseNotificationParamsSchema.extend({\n        /**\n         * The ID of the request to cancel.\n         *\n         * This MUST correspond to the ID of a request previously issued in the same direction.\n         */\n        requestId: RequestIdSchema,\n\n        /**\n         * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.\n         */\n        reason: z.string().optional()\n    })\n});\n\n/* Base Metadata */\n/**\n * Icon schema for use in tools, prompts, resources, and implementations.\n */\nexport const IconSchema = z\n    .object({\n        /**\n         * URL or data URI for the icon.\n         */\n        src: z.string(),\n        /**\n         * Optional MIME type for the icon.\n         */\n        mimeType: z.optional(z.string()),\n        /**\n         * Optional array of strings that specify sizes at which the icon can be used.\n         * Each string should be in WxH format (e.g., `\"48x48\"`, `\"96x96\"`) or `\"any\"` for scalable formats like SVG.\n         *\n         * If not provided, the client should assume that the icon can be used at any size.\n         */\n        sizes: z.optional(z.array(z.string()))\n    })\n    .passthrough();\n\n/**\n * Base schema to add `icons` property.\n *\n */\nexport const IconsSchema = z\n    .object({\n        /**\n         * Optional set of sized icons that the client can display in a user interface.\n         *\n         * Clients that support rendering icons MUST support at least the following MIME types:\n         * - `image/png` - PNG images (safe, universal compatibility)\n         * - `image/jpeg` (and `image/jpg`) - JPEG images (safe, universal compatibility)\n         *\n         * Clients that support rendering icons SHOULD also support:\n         * - `image/svg+xml` - SVG images (scalable but requires security precautions)\n         * - `image/webp` - WebP images (modern, efficient format)\n         */\n        icons: z.array(IconSchema).optional()\n    })\n    .passthrough();\n\n/**\n * Base metadata interface for common properties across resources, tools, prompts, and implementations.\n */\nexport const BaseMetadataSchema = z\n    .object({\n        /** Intended for programmatic or logical use, but used as a display name in past specs or fallback */\n        name: z.string(),\n        /**\n         * Intended for UI and end-user contexts â€” optimized to be human-readable and easily understood,\n         * even by those unfamiliar with domain-specific terminology.\n         *\n         * If not provided, the name should be used for display (except for Tool,\n         * where `annotations.title` should be given precedence over using `name`,\n         * if present).\n         */\n        title: z.optional(z.string())\n    })\n    .passthrough();\n\n/* Initialization */\n/**\n * Describes the name and version of an MCP implementation.\n */\nexport const ImplementationSchema = BaseMetadataSchema.extend({\n    version: z.string(),\n    /**\n     * An optional URL of the website for this implementation.\n     */\n    websiteUrl: z.optional(z.string())\n}).merge(IconsSchema);\n\n/**\n * Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.\n */\nexport const ClientCapabilitiesSchema = z\n    .object({\n        /**\n         * Experimental, non-standard capabilities that the client supports.\n         */\n        experimental: z.optional(z.object({}).passthrough()),\n        /**\n         * Present if the client supports sampling from an LLM.\n         */\n        sampling: z.optional(z.object({}).passthrough()),\n        /**\n         * Present if the client supports eliciting user input.\n         */\n        elicitation: z.optional(z.object({}).passthrough()),\n        /**\n         * Present if the client supports listing roots.\n         */\n        roots: z.optional(\n            z\n                .object({\n                    /**\n                     * Whether the client supports issuing notifications for changes to the roots list.\n                     */\n                    listChanged: z.optional(z.boolean())\n                })\n                .passthrough()\n        )\n    })\n    .passthrough();\n\n/**\n * This request is sent from the client to the server when it first connects, asking it to begin initialization.\n */\nexport const InitializeRequestSchema = RequestSchema.extend({\n    method: z.literal('initialize'),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.\n         */\n        protocolVersion: z.string(),\n        capabilities: ClientCapabilitiesSchema,\n        clientInfo: ImplementationSchema\n    })\n});\n\nexport const isInitializeRequest = (value: unknown): value is InitializeRequest => InitializeRequestSchema.safeParse(value).success;\n\n/**\n * Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.\n */\nexport const ServerCapabilitiesSchema = z\n    .object({\n        /**\n         * Experimental, non-standard capabilities that the server supports.\n         */\n        experimental: z.optional(z.object({}).passthrough()),\n        /**\n         * Present if the server supports sending log messages to the client.\n         */\n        logging: z.optional(z.object({}).passthrough()),\n        /**\n         * Present if the server supports sending completions to the client.\n         */\n        completions: z.optional(z.object({}).passthrough()),\n        /**\n         * Present if the server offers any prompt templates.\n         */\n        prompts: z.optional(\n            z\n                .object({\n                    /**\n                     * Whether this server supports issuing notifications for changes to the prompt list.\n                     */\n                    listChanged: z.optional(z.boolean())\n                })\n                .passthrough()\n        ),\n        /**\n         * Present if the server offers any resources to read.\n         */\n        resources: z.optional(\n            z\n                .object({\n                    /**\n                     * Whether this server supports clients subscribing to resource updates.\n                     */\n                    subscribe: z.optional(z.boolean()),\n\n                    /**\n                     * Whether this server supports issuing notifications for changes to the resource list.\n                     */\n                    listChanged: z.optional(z.boolean())\n                })\n                .passthrough()\n        ),\n        /**\n         * Present if the server offers any tools to call.\n         */\n        tools: z.optional(\n            z\n                .object({\n                    /**\n                     * Whether this server supports issuing notifications for changes to the tool list.\n                     */\n                    listChanged: z.optional(z.boolean())\n                })\n                .passthrough()\n        )\n    })\n    .passthrough();\n\n/**\n * After receiving an initialize request from the client, the server sends this response.\n */\nexport const InitializeResultSchema = ResultSchema.extend({\n    /**\n     * The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.\n     */\n    protocolVersion: z.string(),\n    capabilities: ServerCapabilitiesSchema,\n    serverInfo: ImplementationSchema,\n    /**\n     * Instructions describing how to use the server and its features.\n     *\n     * This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a \"hint\" to the model. For example, this information MAY be added to the system prompt.\n     */\n    instructions: z.optional(z.string())\n});\n\n/**\n * This notification is sent from the client to the server after initialization has finished.\n */\nexport const InitializedNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/initialized')\n});\n\nexport const isInitializedNotification = (value: unknown): value is InitializedNotification =>\n    InitializedNotificationSchema.safeParse(value).success;\n\n/* Ping */\n/**\n * A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.\n */\nexport const PingRequestSchema = RequestSchema.extend({\n    method: z.literal('ping')\n});\n\n/* Progress notifications */\nexport const ProgressSchema = z\n    .object({\n        /**\n         * The progress thus far. This should increase every time progress is made, even if the total is unknown.\n         */\n        progress: z.number(),\n        /**\n         * Total number of items to process (or total progress required), if known.\n         */\n        total: z.optional(z.number()),\n        /**\n         * An optional message describing the current progress.\n         */\n        message: z.optional(z.string())\n    })\n    .passthrough();\n\n/**\n * An out-of-band notification used to inform the receiver of a progress update for a long-running request.\n */\nexport const ProgressNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/progress'),\n    params: BaseNotificationParamsSchema.merge(ProgressSchema).extend({\n        /**\n         * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.\n         */\n        progressToken: ProgressTokenSchema\n    })\n});\n\n/* Pagination */\nexport const PaginatedRequestSchema = RequestSchema.extend({\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * An opaque token representing the current pagination position.\n         * If provided, the server should return results starting after this cursor.\n         */\n        cursor: z.optional(CursorSchema)\n    }).optional()\n});\n\nexport const PaginatedResultSchema = ResultSchema.extend({\n    /**\n     * An opaque token representing the pagination position after the last returned result.\n     * If present, there may be more results available.\n     */\n    nextCursor: z.optional(CursorSchema)\n});\n\n/* Resources */\n/**\n * The contents of a specific resource or sub-resource.\n */\nexport const ResourceContentsSchema = z\n    .object({\n        /**\n         * The URI of this resource.\n         */\n        uri: z.string(),\n        /**\n         * The MIME type of this resource, if known.\n         */\n        mimeType: z.optional(z.string()),\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\nexport const TextResourceContentsSchema = ResourceContentsSchema.extend({\n    /**\n     * The text of the item. This must only be set if the item can actually be represented as text (not binary data).\n     */\n    text: z.string()\n});\n\n/**\n * A Zod schema for validating Base64 strings that is more performant and\n * robust for very large inputs than the default regex-based check. It avoids\n * stack overflows by using the native `atob` function for validation.\n */\nconst Base64Schema = z.string().refine(\n    val => {\n        try {\n            // atob throws a DOMException if the string contains characters\n            // that are not part of the Base64 character set.\n            atob(val);\n            return true;\n        } catch {\n            return false;\n        }\n    },\n    { message: 'Invalid Base64 string' }\n);\n\nexport const BlobResourceContentsSchema = ResourceContentsSchema.extend({\n    /**\n     * A base64-encoded string representing the binary data of the item.\n     */\n    blob: Base64Schema\n});\n\n/**\n * A known resource that the server is capable of reading.\n */\nexport const ResourceSchema = BaseMetadataSchema.extend({\n    /**\n     * The URI of this resource.\n     */\n    uri: z.string(),\n\n    /**\n     * A description of what this resource represents.\n     *\n     * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.\n     */\n    description: z.optional(z.string()),\n\n    /**\n     * The MIME type of this resource, if known.\n     */\n    mimeType: z.optional(z.string()),\n\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough())\n}).merge(IconsSchema);\n\n/**\n * A template description for resources available on the server.\n */\nexport const ResourceTemplateSchema = BaseMetadataSchema.extend({\n    /**\n     * A URI template (according to RFC 6570) that can be used to construct resource URIs.\n     */\n    uriTemplate: z.string(),\n\n    /**\n     * A description of what this template is for.\n     *\n     * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.\n     */\n    description: z.optional(z.string()),\n\n    /**\n     * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.\n     */\n    mimeType: z.optional(z.string()),\n\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough())\n}).merge(IconsSchema);\n\n/**\n * Sent from the client to request a list of resources the server has.\n */\nexport const ListResourcesRequestSchema = PaginatedRequestSchema.extend({\n    method: z.literal('resources/list')\n});\n\n/**\n * The server's response to a resources/list request from the client.\n */\nexport const ListResourcesResultSchema = PaginatedResultSchema.extend({\n    resources: z.array(ResourceSchema)\n});\n\n/**\n * Sent from the client to request a list of resource templates the server has.\n */\nexport const ListResourceTemplatesRequestSchema = PaginatedRequestSchema.extend({\n    method: z.literal('resources/templates/list')\n});\n\n/**\n * The server's response to a resources/templates/list request from the client.\n */\nexport const ListResourceTemplatesResultSchema = PaginatedResultSchema.extend({\n    resourceTemplates: z.array(ResourceTemplateSchema)\n});\n\n/**\n * Sent from the client to the server, to read a specific resource URI.\n */\nexport const ReadResourceRequestSchema = RequestSchema.extend({\n    method: z.literal('resources/read'),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.\n         */\n        uri: z.string()\n    })\n});\n\n/**\n * The server's response to a resources/read request from the client.\n */\nexport const ReadResourceResultSchema = ResultSchema.extend({\n    contents: z.array(z.union([TextResourceContentsSchema, BlobResourceContentsSchema]))\n});\n\n/**\n * An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.\n */\nexport const ResourceListChangedNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/resources/list_changed')\n});\n\n/**\n * Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.\n */\nexport const SubscribeRequestSchema = RequestSchema.extend({\n    method: z.literal('resources/subscribe'),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.\n         */\n        uri: z.string()\n    })\n});\n\n/**\n * Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.\n */\nexport const UnsubscribeRequestSchema = RequestSchema.extend({\n    method: z.literal('resources/unsubscribe'),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The URI of the resource to unsubscribe from.\n         */\n        uri: z.string()\n    })\n});\n\n/**\n * A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.\n */\nexport const ResourceUpdatedNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/resources/updated'),\n    params: BaseNotificationParamsSchema.extend({\n        /**\n         * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.\n         */\n        uri: z.string()\n    })\n});\n\n/* Prompts */\n/**\n * Describes an argument that a prompt can accept.\n */\nexport const PromptArgumentSchema = z\n    .object({\n        /**\n         * The name of the argument.\n         */\n        name: z.string(),\n        /**\n         * A human-readable description of the argument.\n         */\n        description: z.optional(z.string()),\n        /**\n         * Whether this argument must be provided.\n         */\n        required: z.optional(z.boolean())\n    })\n    .passthrough();\n\n/**\n * A prompt or prompt template that the server offers.\n */\nexport const PromptSchema = BaseMetadataSchema.extend({\n    /**\n     * An optional description of what this prompt provides\n     */\n    description: z.optional(z.string()),\n    /**\n     * A list of arguments to use for templating the prompt.\n     */\n    arguments: z.optional(z.array(PromptArgumentSchema)),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough())\n}).merge(IconsSchema);\n\n/**\n * Sent from the client to request a list of prompts and prompt templates the server has.\n */\nexport const ListPromptsRequestSchema = PaginatedRequestSchema.extend({\n    method: z.literal('prompts/list')\n});\n\n/**\n * The server's response to a prompts/list request from the client.\n */\nexport const ListPromptsResultSchema = PaginatedResultSchema.extend({\n    prompts: z.array(PromptSchema)\n});\n\n/**\n * Used by the client to get a prompt provided by the server.\n */\nexport const GetPromptRequestSchema = RequestSchema.extend({\n    method: z.literal('prompts/get'),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The name of the prompt or prompt template.\n         */\n        name: z.string(),\n        /**\n         * Arguments to use for templating the prompt.\n         */\n        arguments: z.optional(z.record(z.string()))\n    })\n});\n\n/**\n * Text provided to or from an LLM.\n */\nexport const TextContentSchema = z\n    .object({\n        type: z.literal('text'),\n        /**\n         * The text content of the message.\n         */\n        text: z.string(),\n\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\n/**\n * An image provided to or from an LLM.\n */\nexport const ImageContentSchema = z\n    .object({\n        type: z.literal('image'),\n        /**\n         * The base64-encoded image data.\n         */\n        data: Base64Schema,\n        /**\n         * The MIME type of the image. Different providers may support different image types.\n         */\n        mimeType: z.string(),\n\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\n/**\n * An Audio provided to or from an LLM.\n */\nexport const AudioContentSchema = z\n    .object({\n        type: z.literal('audio'),\n        /**\n         * The base64-encoded audio data.\n         */\n        data: Base64Schema,\n        /**\n         * The MIME type of the audio. Different providers may support different audio types.\n         */\n        mimeType: z.string(),\n\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\n/**\n * The contents of a resource, embedded into a prompt or tool call result.\n */\nexport const EmbeddedResourceSchema = z\n    .object({\n        type: z.literal('resource'),\n        resource: z.union([TextResourceContentsSchema, BlobResourceContentsSchema]),\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\n/**\n * A resource that the server is capable of reading, included in a prompt or tool call result.\n *\n * Note: resource links returned by tools are not guaranteed to appear in the results of `resources/list` requests.\n */\nexport const ResourceLinkSchema = ResourceSchema.extend({\n    type: z.literal('resource_link')\n});\n\n/**\n * A content block that can be used in prompts and tool results.\n */\nexport const ContentBlockSchema = z.union([\n    TextContentSchema,\n    ImageContentSchema,\n    AudioContentSchema,\n    ResourceLinkSchema,\n    EmbeddedResourceSchema\n]);\n\n/**\n * Describes a message returned as part of a prompt.\n */\nexport const PromptMessageSchema = z\n    .object({\n        role: z.enum(['user', 'assistant']),\n        content: ContentBlockSchema\n    })\n    .passthrough();\n\n/**\n * The server's response to a prompts/get request from the client.\n */\nexport const GetPromptResultSchema = ResultSchema.extend({\n    /**\n     * An optional description for the prompt.\n     */\n    description: z.optional(z.string()),\n    messages: z.array(PromptMessageSchema)\n});\n\n/**\n * An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.\n */\nexport const PromptListChangedNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/prompts/list_changed')\n});\n\n/* Tools */\n/**\n * Additional properties describing a Tool to clients.\n *\n * NOTE: all properties in ToolAnnotations are **hints**.\n * They are not guaranteed to provide a faithful description of\n * tool behavior (including descriptive properties like `title`).\n *\n * Clients should never make tool use decisions based on ToolAnnotations\n * received from untrusted servers.\n */\nexport const ToolAnnotationsSchema = z\n    .object({\n        /**\n         * A human-readable title for the tool.\n         */\n        title: z.optional(z.string()),\n\n        /**\n         * If true, the tool does not modify its environment.\n         *\n         * Default: false\n         */\n        readOnlyHint: z.optional(z.boolean()),\n\n        /**\n         * If true, the tool may perform destructive updates to its environment.\n         * If false, the tool performs only additive updates.\n         *\n         * (This property is meaningful only when `readOnlyHint == false`)\n         *\n         * Default: true\n         */\n        destructiveHint: z.optional(z.boolean()),\n\n        /**\n         * If true, calling the tool repeatedly with the same arguments\n         * will have no additional effect on the its environment.\n         *\n         * (This property is meaningful only when `readOnlyHint == false`)\n         *\n         * Default: false\n         */\n        idempotentHint: z.optional(z.boolean()),\n\n        /**\n         * If true, this tool may interact with an \"open world\" of external\n         * entities. If false, the tool's domain of interaction is closed.\n         * For example, the world of a web search tool is open, whereas that\n         * of a memory tool is not.\n         *\n         * Default: true\n         */\n        openWorldHint: z.optional(z.boolean())\n    })\n    .passthrough();\n\n/**\n * Definition for a tool the client can call.\n */\nexport const ToolSchema = BaseMetadataSchema.extend({\n    /**\n     * A human-readable description of the tool.\n     */\n    description: z.optional(z.string()),\n    /**\n     * A JSON Schema object defining the expected parameters for the tool.\n     */\n    inputSchema: z\n        .object({\n            type: z.literal('object'),\n            properties: z.optional(z.object({}).passthrough()),\n            required: z.optional(z.array(z.string()))\n        })\n        .passthrough(),\n    /**\n     * An optional JSON Schema object defining the structure of the tool's output returned in\n     * the structuredContent field of a CallToolResult.\n     */\n    outputSchema: z.optional(\n        z\n            .object({\n                type: z.literal('object'),\n                properties: z.optional(z.object({}).passthrough()),\n                required: z.optional(z.array(z.string()))\n            })\n            .passthrough()\n    ),\n    /**\n     * Optional additional tool information.\n     */\n    annotations: z.optional(ToolAnnotationsSchema),\n\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough())\n}).merge(IconsSchema);\n\n/**\n * Sent from the client to request a list of tools the server has.\n */\nexport const ListToolsRequestSchema = PaginatedRequestSchema.extend({\n    method: z.literal('tools/list')\n});\n\n/**\n * The server's response to a tools/list request from the client.\n */\nexport const ListToolsResultSchema = PaginatedResultSchema.extend({\n    tools: z.array(ToolSchema)\n});\n\n/**\n * The server's response to a tool call.\n */\nexport const CallToolResultSchema = ResultSchema.extend({\n    /**\n     * A list of content objects that represent the result of the tool call.\n     *\n     * If the Tool does not define an outputSchema, this field MUST be present in the result.\n     * For backwards compatibility, this field is always present, but it may be empty.\n     */\n    content: z.array(ContentBlockSchema).default([]),\n\n    /**\n     * An object containing structured tool output.\n     *\n     * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.\n     */\n    structuredContent: z.object({}).passthrough().optional(),\n\n    /**\n     * Whether the tool call ended in an error.\n     *\n     * If not set, this is assumed to be false (the call was successful).\n     *\n     * Any errors that originate from the tool SHOULD be reported inside the result\n     * object, with `isError` set to true, _not_ as an MCP protocol-level error\n     * response. Otherwise, the LLM would not be able to see that an error occurred\n     * and self-correct.\n     *\n     * However, any errors in _finding_ the tool, an error indicating that the\n     * server does not support tool calls, or any other exceptional conditions,\n     * should be reported as an MCP error response.\n     */\n    isError: z.optional(z.boolean())\n});\n\n/**\n * CallToolResultSchema extended with backwards compatibility to protocol version 2024-10-07.\n */\nexport const CompatibilityCallToolResultSchema = CallToolResultSchema.or(\n    ResultSchema.extend({\n        toolResult: z.unknown()\n    })\n);\n\n/**\n * Used by the client to invoke a tool provided by the server.\n */\nexport const CallToolRequestSchema = RequestSchema.extend({\n    method: z.literal('tools/call'),\n    params: BaseRequestParamsSchema.extend({\n        name: z.string(),\n        arguments: z.optional(z.record(z.unknown()))\n    })\n});\n\n/**\n * An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.\n */\nexport const ToolListChangedNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/tools/list_changed')\n});\n\n/* Logging */\n/**\n * The severity of a log message.\n */\nexport const LoggingLevelSchema = z.enum(['debug', 'info', 'notice', 'warning', 'error', 'critical', 'alert', 'emergency']);\n\n/**\n * A request from the client to the server, to enable or adjust logging.\n */\nexport const SetLevelRequestSchema = RequestSchema.extend({\n    method: z.literal('logging/setLevel'),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/logging/message.\n         */\n        level: LoggingLevelSchema\n    })\n});\n\n/**\n * Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.\n */\nexport const LoggingMessageNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/message'),\n    params: BaseNotificationParamsSchema.extend({\n        /**\n         * The severity of this log message.\n         */\n        level: LoggingLevelSchema,\n        /**\n         * An optional name of the logger issuing this message.\n         */\n        logger: z.optional(z.string()),\n        /**\n         * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.\n         */\n        data: z.unknown()\n    })\n});\n\n/* Sampling */\n/**\n * Hints to use for model selection.\n */\nexport const ModelHintSchema = z\n    .object({\n        /**\n         * A hint for a model name.\n         */\n        name: z.string().optional()\n    })\n    .passthrough();\n\n/**\n * The server's preferences for model selection, requested of the client during sampling.\n */\nexport const ModelPreferencesSchema = z\n    .object({\n        /**\n         * Optional hints to use for model selection.\n         */\n        hints: z.optional(z.array(ModelHintSchema)),\n        /**\n         * How much to prioritize cost when selecting a model.\n         */\n        costPriority: z.optional(z.number().min(0).max(1)),\n        /**\n         * How much to prioritize sampling speed (latency) when selecting a model.\n         */\n        speedPriority: z.optional(z.number().min(0).max(1)),\n        /**\n         * How much to prioritize intelligence and capabilities when selecting a model.\n         */\n        intelligencePriority: z.optional(z.number().min(0).max(1))\n    })\n    .passthrough();\n\n/**\n * Describes a message issued to or received from an LLM API.\n */\nexport const SamplingMessageSchema = z\n    .object({\n        role: z.enum(['user', 'assistant']),\n        content: z.union([TextContentSchema, ImageContentSchema, AudioContentSchema])\n    })\n    .passthrough();\n\n/**\n * A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.\n */\nexport const CreateMessageRequestSchema = RequestSchema.extend({\n    method: z.literal('sampling/createMessage'),\n    params: BaseRequestParamsSchema.extend({\n        messages: z.array(SamplingMessageSchema),\n        /**\n         * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.\n         */\n        systemPrompt: z.optional(z.string()),\n        /**\n         * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.\n         */\n        includeContext: z.optional(z.enum(['none', 'thisServer', 'allServers'])),\n        temperature: z.optional(z.number()),\n        /**\n         * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.\n         */\n        maxTokens: z.number().int(),\n        stopSequences: z.optional(z.array(z.string())),\n        /**\n         * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.\n         */\n        metadata: z.optional(z.object({}).passthrough()),\n        /**\n         * The server's preferences for which model to select.\n         */\n        modelPreferences: z.optional(ModelPreferencesSchema)\n    })\n});\n\n/**\n * The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.\n */\nexport const CreateMessageResultSchema = ResultSchema.extend({\n    /**\n     * The name of the model that generated the message.\n     */\n    model: z.string(),\n    /**\n     * The reason why sampling stopped.\n     */\n    stopReason: z.optional(z.enum(['endTurn', 'stopSequence', 'maxTokens']).or(z.string())),\n    role: z.enum(['user', 'assistant']),\n    content: z.discriminatedUnion('type', [TextContentSchema, ImageContentSchema, AudioContentSchema])\n});\n\n/* Elicitation */\n/**\n * Primitive schema definition for boolean fields.\n */\nexport const BooleanSchemaSchema = z\n    .object({\n        type: z.literal('boolean'),\n        title: z.optional(z.string()),\n        description: z.optional(z.string()),\n        default: z.optional(z.boolean())\n    })\n    .passthrough();\n\n/**\n * Primitive schema definition for string fields.\n */\nexport const StringSchemaSchema = z\n    .object({\n        type: z.literal('string'),\n        title: z.optional(z.string()),\n        description: z.optional(z.string()),\n        minLength: z.optional(z.number()),\n        maxLength: z.optional(z.number()),\n        format: z.optional(z.enum(['email', 'uri', 'date', 'date-time']))\n    })\n    .passthrough();\n\n/**\n * Primitive schema definition for number fields.\n */\nexport const NumberSchemaSchema = z\n    .object({\n        type: z.enum(['number', 'integer']),\n        title: z.optional(z.string()),\n        description: z.optional(z.string()),\n        minimum: z.optional(z.number()),\n        maximum: z.optional(z.number())\n    })\n    .passthrough();\n\n/**\n * Primitive schema definition for enum fields.\n */\nexport const EnumSchemaSchema = z\n    .object({\n        type: z.literal('string'),\n        title: z.optional(z.string()),\n        description: z.optional(z.string()),\n        enum: z.array(z.string()),\n        enumNames: z.optional(z.array(z.string()))\n    })\n    .passthrough();\n\n/**\n * Union of all primitive schema definitions.\n */\nexport const PrimitiveSchemaDefinitionSchema = z.union([BooleanSchemaSchema, StringSchemaSchema, NumberSchemaSchema, EnumSchemaSchema]);\n\n/**\n * A request from the server to elicit user input via the client.\n * The client should present the message and form fields to the user.\n */\nexport const ElicitRequestSchema = RequestSchema.extend({\n    method: z.literal('elicitation/create'),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The message to present to the user.\n         */\n        message: z.string(),\n        /**\n         * The schema for the requested user input.\n         */\n        requestedSchema: z\n            .object({\n                type: z.literal('object'),\n                properties: z.record(z.string(), PrimitiveSchemaDefinitionSchema),\n                required: z.optional(z.array(z.string()))\n            })\n            .passthrough()\n    })\n});\n\n/**\n * The client's response to an elicitation/create request from the server.\n */\nexport const ElicitResultSchema = ResultSchema.extend({\n    /**\n     * The user's response action.\n     */\n    action: z.enum(['accept', 'decline', 'cancel']),\n    /**\n     * The collected user input content (only present if action is \"accept\").\n     */\n    content: z.optional(z.record(z.string(), z.unknown()))\n});\n\n/* Autocomplete */\n/**\n * A reference to a resource or resource template definition.\n */\nexport const ResourceTemplateReferenceSchema = z\n    .object({\n        type: z.literal('ref/resource'),\n        /**\n         * The URI or URI template of the resource.\n         */\n        uri: z.string()\n    })\n    .passthrough();\n\n/**\n * @deprecated Use ResourceTemplateReferenceSchema instead\n */\nexport const ResourceReferenceSchema = ResourceTemplateReferenceSchema;\n\n/**\n * Identifies a prompt.\n */\nexport const PromptReferenceSchema = z\n    .object({\n        type: z.literal('ref/prompt'),\n        /**\n         * The name of the prompt or prompt template\n         */\n        name: z.string()\n    })\n    .passthrough();\n\n/**\n * A request from the client to the server, to ask for completion options.\n */\nexport const CompleteRequestSchema = RequestSchema.extend({\n    method: z.literal('completion/complete'),\n    params: BaseRequestParamsSchema.extend({\n        ref: z.union([PromptReferenceSchema, ResourceTemplateReferenceSchema]),\n        /**\n         * The argument's information\n         */\n        argument: z\n            .object({\n                /**\n                 * The name of the argument\n                 */\n                name: z.string(),\n                /**\n                 * The value of the argument to use for completion matching.\n                 */\n                value: z.string()\n            })\n            .passthrough(),\n        context: z.optional(\n            z.object({\n                /**\n                 * Previously-resolved variables in a URI template or prompt.\n                 */\n                arguments: z.optional(z.record(z.string(), z.string()))\n            })\n        )\n    })\n});\n\n/**\n * The server's response to a completion/complete request\n */\nexport const CompleteResultSchema = ResultSchema.extend({\n    completion: z\n        .object({\n            /**\n             * An array of completion values. Must not exceed 100 items.\n             */\n            values: z.array(z.string()).max(100),\n            /**\n             * The total number of completion options available. This can exceed the number of values actually sent in the response.\n             */\n            total: z.optional(z.number().int()),\n            /**\n             * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.\n             */\n            hasMore: z.optional(z.boolean())\n        })\n        .passthrough()\n});\n\n/* Roots */\n/**\n * Represents a root directory or file that the server can operate on.\n */\nexport const RootSchema = z\n    .object({\n        /**\n         * The URI identifying the root. This *must* start with file:// for now.\n         */\n        uri: z.string().startsWith('file://'),\n        /**\n         * An optional name for the root.\n         */\n        name: z.optional(z.string()),\n\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\n/**\n * Sent from the server to request a list of root URIs from the client.\n */\nexport const ListRootsRequestSchema = RequestSchema.extend({\n    method: z.literal('roots/list')\n});\n\n/**\n * The client's response to a roots/list request from the server.\n */\nexport const ListRootsResultSchema = ResultSchema.extend({\n    roots: z.array(RootSchema)\n});\n\n/**\n * A notification from the client to the server, informing it that the list of roots has changed.\n */\nexport const RootsListChangedNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/roots/list_changed')\n});\n\n/* Client messages */\nexport const ClientRequestSchema = z.union([\n    PingRequestSchema,\n    InitializeRequestSchema,\n    CompleteRequestSchema,\n    SetLevelRequestSchema,\n    GetPromptRequestSchema,\n    ListPromptsRequestSchema,\n    ListResourcesRequestSchema,\n    ListResourceTemplatesRequestSchema,\n    ReadResourceRequestSchema,\n    SubscribeRequestSchema,\n    UnsubscribeRequestSchema,\n    CallToolRequestSchema,\n    ListToolsRequestSchema\n]);\n\nexport const ClientNotificationSchema = z.union([\n    CancelledNotificationSchema,\n    ProgressNotificationSchema,\n    InitializedNotificationSchema,\n    RootsListChangedNotificationSchema\n]);\n\nexport const ClientResultSchema = z.union([EmptyResultSchema, CreateMessageResultSchema, ElicitResultSchema, ListRootsResultSchema]);\n\n/* Server messages */\nexport const ServerRequestSchema = z.union([PingRequestSchema, CreateMessageRequestSchema, ElicitRequestSchema, ListRootsRequestSchema]);\n\nexport const ServerNotificationSchema = z.union([\n    CancelledNotificationSchema,\n    ProgressNotificationSchema,\n    LoggingMessageNotificationSchema,\n    ResourceUpdatedNotificationSchema,\n    ResourceListChangedNotificationSchema,\n    ToolListChangedNotificationSchema,\n    PromptListChangedNotificationSchema\n]);\n\nexport const ServerResultSchema = z.union([\n    EmptyResultSchema,\n    InitializeResultSchema,\n    CompleteResultSchema,\n    GetPromptResultSchema,\n    ListPromptsResultSchema,\n    ListResourcesResultSchema,\n    ListResourceTemplatesResultSchema,\n    ReadResourceResultSchema,\n    CallToolResultSchema,\n    ListToolsResultSchema\n]);\n\nexport class McpError extends Error {\n    constructor(\n        public readonly code: number,\n        message: string,\n        public readonly data?: unknown\n    ) {\n        super(`MCP error ${code}: ${message}`);\n        this.name = 'McpError';\n    }\n}\n\ntype Primitive = string | number | boolean | bigint | null | undefined;\ntype Flatten<T> = T extends Primitive\n    ? T\n    : T extends Array<infer U>\n      ? Array<Flatten<U>>\n      : T extends Set<infer U>\n        ? Set<Flatten<U>>\n        : T extends Map<infer K, infer V>\n          ? Map<Flatten<K>, Flatten<V>>\n          : T extends object\n            ? { [K in keyof T]: Flatten<T[K]> }\n            : T;\n\ntype Infer<Schema extends ZodTypeAny> = Flatten<z.infer<Schema>>;\n\n/**\n * Headers that are compatible with both Node.js and the browser.\n */\nexport type IsomorphicHeaders = Record<string, string | string[] | undefined>;\n\n/**\n * Information about the incoming request.\n */\nexport interface RequestInfo {\n    /**\n     * The headers of the request.\n     */\n    headers: IsomorphicHeaders;\n}\n\n/**\n * Extra information about a message.\n */\nexport interface MessageExtraInfo {\n    /**\n     * The request information.\n     */\n    requestInfo?: RequestInfo;\n\n    /**\n     * The authentication information.\n     */\n    authInfo?: AuthInfo;\n}\n\n/* JSON-RPC types */\nexport type ProgressToken = Infer<typeof ProgressTokenSchema>;\nexport type Cursor = Infer<typeof CursorSchema>;\nexport type Request = Infer<typeof RequestSchema>;\nexport type RequestMeta = Infer<typeof RequestMetaSchema>;\nexport type Notification = Infer<typeof NotificationSchema>;\nexport type Result = Infer<typeof ResultSchema>;\nexport type RequestId = Infer<typeof RequestIdSchema>;\nexport type JSONRPCRequest = Infer<typeof JSONRPCRequestSchema>;\nexport type JSONRPCNotification = Infer<typeof JSONRPCNotificationSchema>;\nexport type JSONRPCResponse = Infer<typeof JSONRPCResponseSchema>;\nexport type JSONRPCError = Infer<typeof JSONRPCErrorSchema>;\nexport type JSONRPCMessage = Infer<typeof JSONRPCMessageSchema>;\n\n/* Empty result */\nexport type EmptyResult = Infer<typeof EmptyResultSchema>;\n\n/* Cancellation */\nexport type CancelledNotification = Infer<typeof CancelledNotificationSchema>;\n\n/* Base Metadata */\nexport type Icon = Infer<typeof IconSchema>;\nexport type Icons = Infer<typeof IconsSchema>;\nexport type BaseMetadata = Infer<typeof BaseMetadataSchema>;\n\n/* Initialization */\nexport type Implementation = Infer<typeof ImplementationSchema>;\nexport type ClientCapabilities = Infer<typeof ClientCapabilitiesSchema>;\nexport type InitializeRequest = Infer<typeof InitializeRequestSchema>;\nexport type ServerCapabilities = Infer<typeof ServerCapabilitiesSchema>;\nexport type InitializeResult = Infer<typeof InitializeResultSchema>;\nexport type InitializedNotification = Infer<typeof InitializedNotificationSchema>;\n\n/* Ping */\nexport type PingRequest = Infer<typeof PingRequestSchema>;\n\n/* Progress notifications */\nexport type Progress = Infer<typeof ProgressSchema>;\nexport type ProgressNotification = Infer<typeof ProgressNotificationSchema>;\n\n/* Pagination */\nexport type PaginatedRequest = Infer<typeof PaginatedRequestSchema>;\nexport type PaginatedResult = Infer<typeof PaginatedResultSchema>;\n\n/* Resources */\nexport type ResourceContents = Infer<typeof ResourceContentsSchema>;\nexport type TextResourceContents = Infer<typeof TextResourceContentsSchema>;\nexport type BlobResourceContents = Infer<typeof BlobResourceContentsSchema>;\nexport type Resource = Infer<typeof ResourceSchema>;\nexport type ResourceTemplate = Infer<typeof ResourceTemplateSchema>;\nexport type ListResourcesRequest = Infer<typeof ListResourcesRequestSchema>;\nexport type ListResourcesResult = Infer<typeof ListResourcesResultSchema>;\nexport type ListResourceTemplatesRequest = Infer<typeof ListResourceTemplatesRequestSchema>;\nexport type ListResourceTemplatesResult = Infer<typeof ListResourceTemplatesResultSchema>;\nexport type ReadResourceRequest = Infer<typeof ReadResourceRequestSchema>;\nexport type ReadResourceResult = Infer<typeof ReadResourceResultSchema>;\nexport type ResourceListChangedNotification = Infer<typeof ResourceListChangedNotificationSchema>;\nexport type SubscribeRequest = Infer<typeof SubscribeRequestSchema>;\nexport type UnsubscribeRequest = Infer<typeof UnsubscribeRequestSchema>;\nexport type ResourceUpdatedNotification = Infer<typeof ResourceUpdatedNotificationSchema>;\n\n/* Prompts */\nexport type PromptArgument = Infer<typeof PromptArgumentSchema>;\nexport type Prompt = Infer<typeof PromptSchema>;\nexport type ListPromptsRequest = Infer<typeof ListPromptsRequestSchema>;\nexport type ListPromptsResult = Infer<typeof ListPromptsResultSchema>;\nexport type GetPromptRequest = Infer<typeof GetPromptRequestSchema>;\nexport type TextContent = Infer<typeof TextContentSchema>;\nexport type ImageContent = Infer<typeof ImageContentSchema>;\nexport type AudioContent = Infer<typeof AudioContentSchema>;\nexport type EmbeddedResource = Infer<typeof EmbeddedResourceSchema>;\nexport type ResourceLink = Infer<typeof ResourceLinkSchema>;\nexport type ContentBlock = Infer<typeof ContentBlockSchema>;\nexport type PromptMessage = Infer<typeof PromptMessageSchema>;\nexport type GetPromptResult = Infer<typeof GetPromptResultSchema>;\nexport type PromptListChangedNotification = Infer<typeof PromptListChangedNotificationSchema>;\n\n/* Tools */\nexport type ToolAnnotations = Infer<typeof ToolAnnotationsSchema>;\nexport type Tool = Infer<typeof ToolSchema>;\nexport type ListToolsRequest = Infer<typeof ListToolsRequestSchema>;\nexport type ListToolsResult = Infer<typeof ListToolsResultSchema>;\nexport type CallToolResult = Infer<typeof CallToolResultSchema>;\nexport type CompatibilityCallToolResult = Infer<typeof CompatibilityCallToolResultSchema>;\nexport type CallToolRequest = Infer<typeof CallToolRequestSchema>;\nexport type ToolListChangedNotification = Infer<typeof ToolListChangedNotificationSchema>;\n\n/* Logging */\nexport type LoggingLevel = Infer<typeof LoggingLevelSchema>;\nexport type SetLevelRequest = Infer<typeof SetLevelRequestSchema>;\nexport type LoggingMessageNotification = Infer<typeof LoggingMessageNotificationSchema>;\n\n/* Sampling */\nexport type SamplingMessage = Infer<typeof SamplingMessageSchema>;\nexport type CreateMessageRequest = Infer<typeof CreateMessageRequestSchema>;\nexport type CreateMessageResult = Infer<typeof CreateMessageResultSchema>;\n\n/* Elicitation */\nexport type BooleanSchema = Infer<typeof BooleanSchemaSchema>;\nexport type StringSchema = Infer<typeof StringSchemaSchema>;\nexport type NumberSchema = Infer<typeof NumberSchemaSchema>;\nexport type EnumSchema = Infer<typeof EnumSchemaSchema>;\nexport type PrimitiveSchemaDefinition = Infer<typeof PrimitiveSchemaDefinitionSchema>;\nexport type ElicitRequest = Infer<typeof ElicitRequestSchema>;\nexport type ElicitResult = Infer<typeof ElicitResultSchema>;\n\n/* Autocomplete */\nexport type ResourceTemplateReference = Infer<typeof ResourceTemplateReferenceSchema>;\n/**\n * @deprecated Use ResourceTemplateReference instead\n */\nexport type ResourceReference = ResourceTemplateReference;\nexport type PromptReference = Infer<typeof PromptReferenceSchema>;\nexport type CompleteRequest = Infer<typeof CompleteRequestSchema>;\nexport type CompleteResult = Infer<typeof CompleteResultSchema>;\n\n/* Roots */\nexport type Root = Infer<typeof RootSchema>;\nexport type ListRootsRequest = Infer<typeof ListRootsRequestSchema>;\nexport type ListRootsResult = Infer<typeof ListRootsResultSchema>;\nexport type RootsListChangedNotification = Infer<typeof RootsListChangedNotificationSchema>;\n\n/* Client messages */\nexport type ClientRequest = Infer<typeof ClientRequestSchema>;\nexport type ClientNotification = Infer<typeof ClientNotificationSchema>;\nexport type ClientResult = Infer<typeof ClientResultSchema>;\n\n/* Server messages */\nexport type ServerRequest = Infer<typeof ServerRequestSchema>;\nexport type ServerNotification = Infer<typeof ServerNotificationSchema>;\nexport type ServerResult = Infer<typeof ServerResultSchema>;\n"],"names":["z","ErrorCode"],"mappings":";;;AAGO,MAAM,0BAA0B;AAChC,MAAM,sCAAsC;AAC5C,MAAM,8BAA8B,CAAC,yBAAyB,cAAc,cAAc,YAAY;AAGtG,MAAM,kBAAkB;AAKxB,MAAM,sBAAsBA,IAAAA,EAAE,MAAM,CAACA,IAAAA,EAAE,OAAA,GAAUA,MAAE,SAAS,KAAK,CAAC;AAKlE,MAAM,eAAeA,IAAAA,EAAE,OAAA;AAE9B,MAAM,oBAAoBA,IAAAA,EACrB,OAAO;AAAA;AAAA;AAAA;AAAA,EAIJ,eAAeA,IAAAA,EAAE,SAAS,mBAAmB;AACjD,CAAC,EACA,YAAA;AAEL,MAAM,0BAA0BA,IAAAA,EAC3B,OAAO;AAAA,EACJ,OAAOA,IAAAA,EAAE,SAAS,iBAAiB;AACvC,CAAC,EACA,YAAA;AAEE,MAAM,gBAAgBA,IAAAA,EAAE,OAAO;AAAA,EAClC,QAAQA,IAAAA,EAAE,OAAA;AAAA,EACV,QAAQA,IAAAA,EAAE,SAAS,uBAAuB;AAC9C,CAAC;AAED,MAAM,+BAA+BA,IAAAA,EAChC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAKJ,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,YAAA,CAAa;AAChD,CAAC,EACA,YAAA;AAEE,MAAM,qBAAqBA,IAAAA,EAAE,OAAO;AAAA,EACvC,QAAQA,IAAAA,EAAE,OAAA;AAAA,EACV,QAAQA,IAAAA,EAAE,SAAS,4BAA4B;AACnD,CAAC;AAEM,MAAM,eAAeA,IAAAA,EACvB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAKJ,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,YAAA,CAAa;AAChD,CAAC,EACA,YAAA;AAKE,MAAM,kBAAkBA,IAAAA,EAAE,MAAM,CAACA,IAAAA,EAAE,OAAA,GAAUA,MAAE,SAAS,KAAK,CAAC;AAK9D,MAAM,uBAAuBA,IAAAA,EAC/B,OAAO;AAAA,EACJ,SAASA,IAAAA,EAAE,QAAQ,eAAe;AAAA,EAClC,IAAI;AACR,CAAC,EACA,MAAM,aAAa,EACnB,OAAA;AAEE,MAAM,mBAAmB,CAAC,UAA4C,qBAAqB,UAAU,KAAK,EAAE;AAK5G,MAAM,4BAA4BA,IAAAA,EACpC,OAAO;AAAA,EACJ,SAASA,IAAAA,EAAE,QAAQ,eAAe;AACtC,CAAC,EACA,MAAM,kBAAkB,EACxB,OAAA;AAEE,MAAM,wBAAwB,CAAC,UAAiD,0BAA0B,UAAU,KAAK,EAAE;AAK3H,MAAM,wBAAwBA,IAAAA,EAChC,OAAO;AAAA,EACJ,SAASA,IAAAA,EAAE,QAAQ,eAAe;AAAA,EAClC,IAAI;AAAA,EACJ,QAAQ;AACZ,CAAC,EACA,OAAA;AAEE,MAAM,oBAAoB,CAAC,UAA6C,sBAAsB,UAAU,KAAK,EAAE;AAK/G,IAAK,8BAAAC,eAAL;AAEHA,aAAAA,WAAA,sBAAmB,KAAA,IAAnB;AACAA,aAAAA,WAAA,oBAAiB,MAAA,IAAjB;AAGAA,aAAAA,WAAA,gBAAa,MAAA,IAAb;AACAA,aAAAA,WAAA,oBAAiB,MAAA,IAAjB;AACAA,aAAAA,WAAA,oBAAiB,MAAA,IAAjB;AACAA,aAAAA,WAAA,mBAAgB,MAAA,IAAhB;AACAA,aAAAA,WAAA,mBAAgB,MAAA,IAAhB;AAVQ,SAAAA;AAAA,GAAA,aAAA,CAAA,CAAA;AAgBL,MAAM,qBAAqBD,IAAAA,EAC7B,OAAO;AAAA,EACJ,SAASA,IAAAA,EAAE,QAAQ,eAAe;AAAA,EAClC,IAAI;AAAA,EACJ,OAAOA,IAAAA,EAAE,OAAO;AAAA;AAAA;AAAA;AAAA,IAIZ,MAAMA,IAAAA,EAAE,OAAA,EAAS,IAAA;AAAA;AAAA;AAAA;AAAA,IAIjB,SAASA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA,IAIX,MAAMA,IAAAA,EAAE,SAASA,IAAAA,EAAE,SAAS;AAAA,EAAA,CAC/B;AACL,CAAC,EACA,OAAA;AAEE,MAAM,iBAAiB,CAAC,UAA0C,mBAAmB,UAAU,KAAK,EAAE;AAEtG,MAAM,uBAAuBA,IAAAA,EAAE,MAAM,CAAC,sBAAsB,2BAA2B,uBAAuB,kBAAkB,CAAC;AAMjI,MAAM,oBAAoB,aAAa,OAAA;AAYvC,MAAM,8BAA8B,mBAAmB,OAAO;AAAA,EACjE,QAAQA,IAAAA,EAAE,QAAQ,yBAAyB;AAAA,EAC3C,QAAQ,6BAA6B,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMxC,WAAW;AAAA;AAAA;AAAA;AAAA,IAKX,QAAQA,IAAAA,EAAE,OAAA,EAAS,SAAA;AAAA,EAAS,CAC/B;AACL,CAAC;AAMM,MAAM,aAAaA,IAAAA,EACrB,OAAO;AAAA;AAAA;AAAA;AAAA,EAIJ,KAAKA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA,EAIP,UAAUA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/B,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,MAAMA,IAAAA,EAAE,QAAQ,CAAC;AACzC,CAAC,EACA,YAAA;AAME,MAAM,cAAcA,IAAAA,EACtB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYJ,OAAOA,IAAAA,EAAE,MAAM,UAAU,EAAE,SAAA;AAC/B,CAAC,EACA,YAAA;AAKE,MAAM,qBAAqBA,IAAAA,EAC7B,OAAO;AAAA;AAAA,EAEJ,MAAMA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASR,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAChC,CAAC,EACA,YAAA;AAME,MAAM,uBAAuB,mBAAmB,OAAO;AAAA,EAC1D,SAASA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA,EAIX,YAAYA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AACrC,CAAC,EAAE,MAAM,WAAW;AAKb,MAAM,2BAA2BA,IAAAA,EACnC,OAAO;AAAA;AAAA;AAAA;AAAA,EAIJ,cAAcA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,aAAa;AAAA;AAAA;AAAA;AAAA,EAInD,UAAUA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,aAAa;AAAA;AAAA;AAAA;AAAA,EAI/C,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,aAAa;AAAA;AAAA;AAAA;AAAA,EAIlD,OAAOA,IAAAA,EAAE;AAAA,IACLA,IAAAA,EACK,OAAO;AAAA;AAAA;AAAA;AAAA,MAIJ,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,SAAS;AAAA,IAAA,CACtC,EACA,YAAA;AAAA,EAAY;AAEzB,CAAC,EACA,YAAA;AAKE,MAAM,0BAA0B,cAAc,OAAO;AAAA,EACxD,QAAQA,IAAAA,EAAE,QAAQ,YAAY;AAAA,EAC9B,QAAQ,wBAAwB,OAAO;AAAA;AAAA;AAAA;AAAA,IAInC,iBAAiBA,IAAAA,EAAE,OAAA;AAAA,IACnB,cAAc;AAAA,IACd,YAAY;AAAA,EAAA,CACf;AACL,CAAC;AAEM,MAAM,sBAAsB,CAAC,UAA+C,wBAAwB,UAAU,KAAK,EAAE;AAKrH,MAAM,2BAA2BA,IAAAA,EACnC,OAAO;AAAA;AAAA;AAAA;AAAA,EAIJ,cAAcA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,aAAa;AAAA;AAAA;AAAA;AAAA,EAInD,SAASA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,aAAa;AAAA;AAAA;AAAA;AAAA,EAI9C,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,aAAa;AAAA;AAAA;AAAA;AAAA,EAIlD,SAASA,IAAAA,EAAE;AAAA,IACPA,IAAAA,EACK,OAAO;AAAA;AAAA;AAAA;AAAA,MAIJ,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,SAAS;AAAA,IAAA,CACtC,EACA,YAAA;AAAA,EAAY;AAAA;AAAA;AAAA;AAAA,EAKrB,WAAWA,IAAAA,EAAE;AAAA,IACTA,IAAAA,EACK,OAAO;AAAA;AAAA;AAAA;AAAA,MAIJ,WAAWA,IAAAA,EAAE,SAASA,IAAAA,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA,MAKjC,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,SAAS;AAAA,IAAA,CACtC,EACA,YAAA;AAAA,EAAY;AAAA;AAAA;AAAA;AAAA,EAKrB,OAAOA,IAAAA,EAAE;AAAA,IACLA,IAAAA,EACK,OAAO;AAAA;AAAA;AAAA;AAAA,MAIJ,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,SAAS;AAAA,IAAA,CACtC,EACA,YAAA;AAAA,EAAY;AAEzB,CAAC,EACA,YAAA;AAKE,MAAM,yBAAyB,aAAa,OAAO;AAAA;AAAA;AAAA;AAAA,EAItD,iBAAiBA,IAAAA,EAAE,OAAA;AAAA,EACnB,cAAc;AAAA,EACd,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMZ,cAAcA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AACvC,CAAC;AAKM,MAAM,gCAAgC,mBAAmB,OAAO;AAAA,EACnE,QAAQA,IAAAA,EAAE,QAAQ,2BAA2B;AACjD,CAAC;AAEM,MAAM,4BAA4B,CAAC,UACtC,8BAA8B,UAAU,KAAK,EAAE;AAM5C,MAAM,oBAAoB,cAAc,OAAO;AAAA,EAClD,QAAQA,IAAAA,EAAE,QAAQ,MAAM;AAC5B,CAAC;AAGM,MAAM,iBAAiBA,IAAAA,EACzB,OAAO;AAAA;AAAA;AAAA;AAAA,EAIJ,UAAUA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA,EAIZ,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA,EAI5B,SAASA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAClC,CAAC,EACA,YAAA;AAKE,MAAM,6BAA6B,mBAAmB,OAAO;AAAA,EAChE,QAAQA,IAAAA,EAAE,QAAQ,wBAAwB;AAAA,EAC1C,QAAQ,6BAA6B,MAAM,cAAc,EAAE,OAAO;AAAA;AAAA;AAAA;AAAA,IAI9D,eAAe;AAAA,EAAA,CAClB;AACL,CAAC;AAGM,MAAM,yBAAyB,cAAc,OAAO;AAAA,EACvD,QAAQ,wBAAwB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,IAKnC,QAAQA,IAAAA,EAAE,SAAS,YAAY;AAAA,EAAA,CAClC,EAAE,SAAA;AACP,CAAC;AAEM,MAAM,wBAAwB,aAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAKrD,YAAYA,IAAAA,EAAE,SAAS,YAAY;AACvC,CAAC;AAMM,MAAM,yBAAyBA,IAAAA,EACjC,OAAO;AAAA;AAAA;AAAA;AAAA,EAIJ,KAAKA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA,EAIP,UAAUA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,EAK/B,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,YAAA,CAAa;AAChD,CAAC,EACA,YAAA;AAEE,MAAM,6BAA6B,uBAAuB,OAAO;AAAA;AAAA;AAAA;AAAA,EAIpE,MAAMA,IAAAA,EAAE,OAAA;AACZ,CAAC;AAOD,MAAM,eAAeA,IAAAA,EAAE,OAAA,EAAS;AAAA,EAC5B,CAAA,QAAO;AACH,QAAI;AAGA,WAAK,GAAG;AACR,aAAO;AAAA,IACX,QAAQ;AACJ,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,EAAE,SAAS,wBAAA;AACf;AAEO,MAAM,6BAA6B,uBAAuB,OAAO;AAAA;AAAA;AAAA;AAAA,EAIpE,MAAM;AACV,CAAC;AAKM,MAAM,iBAAiB,mBAAmB,OAAO;AAAA;AAAA;AAAA;AAAA,EAIpD,KAAKA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOP,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA,EAKlC,UAAUA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,EAM/B,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,YAAA,CAAa;AAChD,CAAC,EAAE,MAAM,WAAW;AAKb,MAAM,yBAAyB,mBAAmB,OAAO;AAAA;AAAA;AAAA;AAAA,EAI5D,aAAaA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOf,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA,EAKlC,UAAUA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,EAM/B,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,YAAA,CAAa;AAChD,CAAC,EAAE,MAAM,WAAW;AAKb,MAAM,6BAA6B,uBAAuB,OAAO;AAAA,EACpE,QAAQA,IAAAA,EAAE,QAAQ,gBAAgB;AACtC,CAAC;AAKM,MAAM,4BAA4B,sBAAsB,OAAO;AAAA,EAClE,WAAWA,IAAAA,EAAE,MAAM,cAAc;AACrC,CAAC;AAKM,MAAM,qCAAqC,uBAAuB,OAAO;AAAA,EAC5E,QAAQA,IAAAA,EAAE,QAAQ,0BAA0B;AAChD,CAAC;AAKM,MAAM,oCAAoC,sBAAsB,OAAO;AAAA,EAC1E,mBAAmBA,IAAAA,EAAE,MAAM,sBAAsB;AACrD,CAAC;AAKM,MAAM,4BAA4B,cAAc,OAAO;AAAA,EAC1D,QAAQA,IAAAA,EAAE,QAAQ,gBAAgB;AAAA,EAClC,QAAQ,wBAAwB,OAAO;AAAA;AAAA;AAAA;AAAA,IAInC,KAAKA,IAAAA,EAAE,OAAA;AAAA,EAAO,CACjB;AACL,CAAC;AAKM,MAAM,2BAA2B,aAAa,OAAO;AAAA,EACxD,UAAUA,IAAAA,EAAE,MAAMA,IAAAA,EAAE,MAAM,CAAC,4BAA4B,0BAA0B,CAAC,CAAC;AACvF,CAAC;AAKM,MAAM,wCAAwC,mBAAmB,OAAO;AAAA,EAC3E,QAAQA,IAAAA,EAAE,QAAQ,sCAAsC;AAC5D,CAAC;AAKM,MAAM,yBAAyB,cAAc,OAAO;AAAA,EACvD,QAAQA,IAAAA,EAAE,QAAQ,qBAAqB;AAAA,EACvC,QAAQ,wBAAwB,OAAO;AAAA;AAAA;AAAA;AAAA,IAInC,KAAKA,IAAAA,EAAE,OAAA;AAAA,EAAO,CACjB;AACL,CAAC;AAKM,MAAM,2BAA2B,cAAc,OAAO;AAAA,EACzD,QAAQA,IAAAA,EAAE,QAAQ,uBAAuB;AAAA,EACzC,QAAQ,wBAAwB,OAAO;AAAA;AAAA;AAAA;AAAA,IAInC,KAAKA,IAAAA,EAAE,OAAA;AAAA,EAAO,CACjB;AACL,CAAC;AAKM,MAAM,oCAAoC,mBAAmB,OAAO;AAAA,EACvE,QAAQA,IAAAA,EAAE,QAAQ,iCAAiC;AAAA,EACnD,QAAQ,6BAA6B,OAAO;AAAA;AAAA;AAAA;AAAA,IAIxC,KAAKA,IAAAA,EAAE,OAAA;AAAA,EAAO,CACjB;AACL,CAAC;AAMM,MAAM,uBAAuBA,IAAAA,EAC/B,OAAO;AAAA;AAAA;AAAA;AAAA,EAIJ,MAAMA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA,EAIR,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA,EAIlC,UAAUA,IAAAA,EAAE,SAASA,IAAAA,EAAE,SAAS;AACpC,CAAC,EACA,YAAA;AAKE,MAAM,eAAe,mBAAmB,OAAO;AAAA;AAAA;AAAA;AAAA,EAIlD,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA,EAIlC,WAAWA,IAAAA,EAAE,SAASA,IAAAA,EAAE,MAAM,oBAAoB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKnD,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,YAAA,CAAa;AAChD,CAAC,EAAE,MAAM,WAAW;AAKb,MAAM,2BAA2B,uBAAuB,OAAO;AAAA,EAClE,QAAQA,IAAAA,EAAE,QAAQ,cAAc;AACpC,CAAC;AAKM,MAAM,0BAA0B,sBAAsB,OAAO;AAAA,EAChE,SAASA,IAAAA,EAAE,MAAM,YAAY;AACjC,CAAC;AAKM,MAAM,yBAAyB,cAAc,OAAO;AAAA,EACvD,QAAQA,IAAAA,EAAE,QAAQ,aAAa;AAAA,EAC/B,QAAQ,wBAAwB,OAAO;AAAA;AAAA;AAAA;AAAA,IAInC,MAAMA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA,IAIR,WAAWA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAOA,IAAAA,EAAE,QAAQ,CAAC;AAAA,EAAA,CAC7C;AACL,CAAC;AAKM,MAAM,oBAAoBA,IAAAA,EAC5B,OAAO;AAAA,EACJ,MAAMA,IAAAA,EAAE,QAAQ,MAAM;AAAA;AAAA;AAAA;AAAA,EAItB,MAAMA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMR,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,YAAA,CAAa;AAChD,CAAC,EACA,YAAA;AAKE,MAAM,qBAAqBA,IAAAA,EAC7B,OAAO;AAAA,EACJ,MAAMA,IAAAA,EAAE,QAAQ,OAAO;AAAA;AAAA;AAAA;AAAA,EAIvB,MAAM;AAAA;AAAA;AAAA;AAAA,EAIN,UAAUA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMZ,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,YAAA,CAAa;AAChD,CAAC,EACA,YAAA;AAKE,MAAM,qBAAqBA,IAAAA,EAC7B,OAAO;AAAA,EACJ,MAAMA,IAAAA,EAAE,QAAQ,OAAO;AAAA;AAAA;AAAA;AAAA,EAIvB,MAAM;AAAA;AAAA;AAAA;AAAA,EAIN,UAAUA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMZ,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,YAAA,CAAa;AAChD,CAAC,EACA,YAAA;AAKE,MAAM,yBAAyBA,IAAAA,EACjC,OAAO;AAAA,EACJ,MAAMA,IAAAA,EAAE,QAAQ,UAAU;AAAA,EAC1B,UAAUA,IAAAA,EAAE,MAAM,CAAC,4BAA4B,0BAA0B,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAK1E,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,YAAA,CAAa;AAChD,CAAC,EACA,YAAA;AAOE,MAAM,qBAAqB,eAAe,OAAO;AAAA,EACpD,MAAMA,IAAAA,EAAE,QAAQ,eAAe;AACnC,CAAC;AAKM,MAAM,qBAAqBA,IAAAA,EAAE,MAAM;AAAA,EACtC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,CAAC;AAKM,MAAM,sBAAsBA,IAAAA,EAC9B,OAAO;AAAA,EACJ,MAAMA,IAAAA,EAAE,KAAK,CAAC,QAAQ,WAAW,CAAC;AAAA,EAClC,SAAS;AACb,CAAC,EACA,YAAA;AAKE,MAAM,wBAAwB,aAAa,OAAO;AAAA;AAAA;AAAA;AAAA,EAIrD,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA,EAClC,UAAUA,IAAAA,EAAE,MAAM,mBAAmB;AACzC,CAAC;AAKM,MAAM,sCAAsC,mBAAmB,OAAO;AAAA,EACzE,QAAQA,IAAAA,EAAE,QAAQ,oCAAoC;AAC1D,CAAC;AAaM,MAAM,wBAAwBA,IAAAA,EAChC,OAAO;AAAA;AAAA;AAAA;AAAA,EAIJ,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO5B,cAAcA,IAAAA,EAAE,SAASA,IAAAA,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUpC,iBAAiBA,IAAAA,EAAE,SAASA,IAAAA,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUvC,gBAAgBA,IAAAA,EAAE,SAASA,IAAAA,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUtC,eAAeA,IAAAA,EAAE,SAASA,IAAAA,EAAE,SAAS;AACzC,CAAC,EACA,YAAA;AAKE,MAAM,aAAa,mBAAmB,OAAO;AAAA;AAAA;AAAA;AAAA,EAIhD,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA,EAIlC,aAAaA,IAAAA,EACR,OAAO;AAAA,IACJ,MAAMA,IAAAA,EAAE,QAAQ,QAAQ;AAAA,IACxB,YAAYA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,aAAa;AAAA,IACjD,UAAUA,IAAAA,EAAE,SAASA,IAAAA,EAAE,MAAMA,IAAAA,EAAE,QAAQ,CAAC;AAAA,EAAA,CAC3C,EACA,YAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKL,cAAcA,IAAAA,EAAE;AAAA,IACZA,IAAAA,EACK,OAAO;AAAA,MACJ,MAAMA,IAAAA,EAAE,QAAQ,QAAQ;AAAA,MACxB,YAAYA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,aAAa;AAAA,MACjD,UAAUA,IAAAA,EAAE,SAASA,IAAAA,EAAE,MAAMA,IAAAA,EAAE,QAAQ,CAAC;AAAA,IAAA,CAC3C,EACA,YAAA;AAAA,EAAY;AAAA;AAAA;AAAA;AAAA,EAKrB,aAAaA,IAAAA,EAAE,SAAS,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,EAM7C,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,YAAA,CAAa;AAChD,CAAC,EAAE,MAAM,WAAW;AAKb,MAAM,yBAAyB,uBAAuB,OAAO;AAAA,EAChE,QAAQA,IAAAA,EAAE,QAAQ,YAAY;AAClC,CAAC;AAKM,MAAM,wBAAwB,sBAAsB,OAAO;AAAA,EAC9D,OAAOA,IAAAA,EAAE,MAAM,UAAU;AAC7B,CAAC;AAKM,MAAM,uBAAuB,aAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOpD,SAASA,IAAAA,EAAE,MAAM,kBAAkB,EAAE,QAAQ,CAAA,CAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/C,mBAAmBA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,YAAA,EAAc,SAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgB9C,SAASA,IAAAA,EAAE,SAASA,IAAAA,EAAE,SAAS;AACnC,CAAC;AAKM,MAAM,oCAAoC,qBAAqB;AAAA,EAClE,aAAa,OAAO;AAAA,IAChB,YAAYA,IAAAA,EAAE,QAAA;AAAA,EAAQ,CACzB;AACL;AAKO,MAAM,wBAAwB,cAAc,OAAO;AAAA,EACtD,QAAQA,IAAAA,EAAE,QAAQ,YAAY;AAAA,EAC9B,QAAQ,wBAAwB,OAAO;AAAA,IACnC,MAAMA,IAAAA,EAAE,OAAA;AAAA,IACR,WAAWA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAOA,IAAAA,EAAE,SAAS,CAAC;AAAA,EAAA,CAC9C;AACL,CAAC;AAKM,MAAM,oCAAoC,mBAAmB,OAAO;AAAA,EACvE,QAAQA,IAAAA,EAAE,QAAQ,kCAAkC;AACxD,CAAC;AAMM,MAAM,qBAAqBA,IAAAA,EAAE,KAAK,CAAC,SAAS,QAAQ,UAAU,WAAW,SAAS,YAAY,SAAS,WAAW,CAAC;AAKnH,MAAM,wBAAwB,cAAc,OAAO;AAAA,EACtD,QAAQA,IAAAA,EAAE,QAAQ,kBAAkB;AAAA,EACpC,QAAQ,wBAAwB,OAAO;AAAA;AAAA;AAAA;AAAA,IAInC,OAAO;AAAA,EAAA,CACV;AACL,CAAC;AAKM,MAAM,mCAAmC,mBAAmB,OAAO;AAAA,EACtE,QAAQA,IAAAA,EAAE,QAAQ,uBAAuB;AAAA,EACzC,QAAQ,6BAA6B,OAAO;AAAA;AAAA;AAAA;AAAA,IAIxC,OAAO;AAAA;AAAA;AAAA;AAAA,IAIP,QAAQA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA,IAI7B,MAAMA,IAAAA,EAAE,QAAA;AAAA,EAAQ,CACnB;AACL,CAAC;AAMM,MAAM,kBAAkBA,IAAAA,EAC1B,OAAO;AAAA;AAAA;AAAA;AAAA,EAIJ,MAAMA,IAAAA,EAAE,OAAA,EAAS,SAAA;AACrB,CAAC,EACA,YAAA;AAKE,MAAM,yBAAyBA,IAAAA,EACjC,OAAO;AAAA;AAAA;AAAA;AAAA,EAIJ,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,MAAM,eAAe,CAAC;AAAA;AAAA;AAAA;AAAA,EAI1C,cAAcA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAA,EAAS,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,EAIjD,eAAeA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAA,EAAS,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,EAIlD,sBAAsBA,IAAAA,EAAE,SAASA,MAAE,SAAS,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;AAC7D,CAAC,EACA,YAAA;AAKE,MAAM,wBAAwBA,IAAAA,EAChC,OAAO;AAAA,EACJ,MAAMA,IAAAA,EAAE,KAAK,CAAC,QAAQ,WAAW,CAAC;AAAA,EAClC,SAASA,IAAAA,EAAE,MAAM,CAAC,mBAAmB,oBAAoB,kBAAkB,CAAC;AAChF,CAAC,EACA,YAAA;AAKE,MAAM,6BAA6B,cAAc,OAAO;AAAA,EAC3D,QAAQA,IAAAA,EAAE,QAAQ,wBAAwB;AAAA,EAC1C,QAAQ,wBAAwB,OAAO;AAAA,IACnC,UAAUA,IAAAA,EAAE,MAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA,IAIvC,cAAcA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA,IAInC,gBAAgBA,IAAAA,EAAE,SAASA,MAAE,KAAK,CAAC,QAAQ,cAAc,YAAY,CAAC,CAAC;AAAA,IACvE,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA,IAIlC,WAAWA,IAAAA,EAAE,OAAA,EAAS,IAAA;AAAA,IACtB,eAAeA,IAAAA,EAAE,SAASA,IAAAA,EAAE,MAAMA,IAAAA,EAAE,OAAA,CAAQ,CAAC;AAAA;AAAA;AAAA;AAAA,IAI7C,UAAUA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,aAAa;AAAA;AAAA;AAAA;AAAA,IAI/C,kBAAkBA,IAAAA,EAAE,SAAS,sBAAsB;AAAA,EAAA,CACtD;AACL,CAAC;AAKM,MAAM,4BAA4B,aAAa,OAAO;AAAA;AAAA;AAAA;AAAA,EAIzD,OAAOA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA,EAIT,YAAYA,IAAAA,EAAE,SAASA,IAAAA,EAAE,KAAK,CAAC,WAAW,gBAAgB,WAAW,CAAC,EAAE,GAAGA,IAAAA,EAAE,OAAA,CAAQ,CAAC;AAAA,EACtF,MAAMA,IAAAA,EAAE,KAAK,CAAC,QAAQ,WAAW,CAAC;AAAA,EAClC,SAASA,IAAAA,EAAE,mBAAmB,QAAQ,CAAC,mBAAmB,oBAAoB,kBAAkB,CAAC;AACrG,CAAC;AAMM,MAAM,sBAAsBA,IAAAA,EAC9B,OAAO;AAAA,EACJ,MAAMA,IAAAA,EAAE,QAAQ,SAAS;AAAA,EACzB,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA,EAC5B,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA,EAClC,SAASA,IAAAA,EAAE,SAASA,IAAAA,EAAE,SAAS;AACnC,CAAC,EACA,YAAA;AAKE,MAAM,qBAAqBA,IAAAA,EAC7B,OAAO;AAAA,EACJ,MAAMA,IAAAA,EAAE,QAAQ,QAAQ;AAAA,EACxB,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA,EAC5B,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA,EAClC,WAAWA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA,EAChC,WAAWA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA,EAChC,QAAQA,IAAAA,EAAE,SAASA,MAAE,KAAK,CAAC,SAAS,OAAO,QAAQ,WAAW,CAAC,CAAC;AACpE,CAAC,EACA,YAAA;AAKE,MAAM,qBAAqBA,IAAAA,EAC7B,OAAO;AAAA,EACJ,MAAMA,IAAAA,EAAE,KAAK,CAAC,UAAU,SAAS,CAAC;AAAA,EAClC,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA,EAC5B,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA,EAClC,SAASA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA,EAC9B,SAASA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAClC,CAAC,EACA,YAAA;AAKE,MAAM,mBAAmBA,IAAAA,EAC3B,OAAO;AAAA,EACJ,MAAMA,IAAAA,EAAE,QAAQ,QAAQ;AAAA,EACxB,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA,EAC5B,aAAaA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA,EAClC,MAAMA,IAAAA,EAAE,MAAMA,IAAAA,EAAE,QAAQ;AAAA,EACxB,WAAWA,IAAAA,EAAE,SAASA,IAAAA,EAAE,MAAMA,IAAAA,EAAE,QAAQ,CAAC;AAC7C,CAAC,EACA,YAAA;AAKE,MAAM,kCAAkCA,IAAAA,EAAE,MAAM,CAAC,qBAAqB,oBAAoB,oBAAoB,gBAAgB,CAAC;AAM/H,MAAM,sBAAsB,cAAc,OAAO;AAAA,EACpD,QAAQA,IAAAA,EAAE,QAAQ,oBAAoB;AAAA,EACtC,QAAQ,wBAAwB,OAAO;AAAA;AAAA;AAAA;AAAA,IAInC,SAASA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA,IAIX,iBAAiBA,IAAAA,EACZ,OAAO;AAAA,MACJ,MAAMA,IAAAA,EAAE,QAAQ,QAAQ;AAAA,MACxB,YAAYA,IAAAA,EAAE,OAAOA,IAAAA,EAAE,OAAA,GAAU,+BAA+B;AAAA,MAChE,UAAUA,IAAAA,EAAE,SAASA,IAAAA,EAAE,MAAMA,IAAAA,EAAE,QAAQ,CAAC;AAAA,IAAA,CAC3C,EACA,YAAA;AAAA,EAAY,CACpB;AACL,CAAC;AAKM,MAAM,qBAAqB,aAAa,OAAO;AAAA;AAAA;AAAA;AAAA,EAIlD,QAAQA,IAAAA,EAAE,KAAK,CAAC,UAAU,WAAW,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA,EAI9C,SAASA,IAAAA,EAAE,SAASA,MAAE,OAAOA,IAAAA,EAAE,OAAA,GAAUA,MAAE,SAAS,CAAC;AACzD,CAAC;AAMM,MAAM,kCAAkCA,IAAAA,EAC1C,OAAO;AAAA,EACJ,MAAMA,IAAAA,EAAE,QAAQ,cAAc;AAAA;AAAA;AAAA;AAAA,EAI9B,KAAKA,IAAAA,EAAE,OAAA;AACX,CAAC,EACA,YAAA;AAKE,MAAM,0BAA0B;AAKhC,MAAM,wBAAwBA,IAAAA,EAChC,OAAO;AAAA,EACJ,MAAMA,IAAAA,EAAE,QAAQ,YAAY;AAAA;AAAA;AAAA;AAAA,EAI5B,MAAMA,IAAAA,EAAE,OAAA;AACZ,CAAC,EACA,YAAA;AAKE,MAAM,wBAAwB,cAAc,OAAO;AAAA,EACtD,QAAQA,IAAAA,EAAE,QAAQ,qBAAqB;AAAA,EACvC,QAAQ,wBAAwB,OAAO;AAAA,IACnC,KAAKA,IAAAA,EAAE,MAAM,CAAC,uBAAuB,+BAA+B,CAAC;AAAA;AAAA;AAAA;AAAA,IAIrE,UAAUA,IAAAA,EACL,OAAO;AAAA;AAAA;AAAA;AAAA,MAIJ,MAAMA,IAAAA,EAAE,OAAA;AAAA;AAAA;AAAA;AAAA,MAIR,OAAOA,IAAAA,EAAE,OAAA;AAAA,IAAO,CACnB,EACA,YAAA;AAAA,IACL,SAASA,IAAAA,EAAE;AAAA,MACPA,IAAAA,EAAE,OAAO;AAAA;AAAA;AAAA;AAAA,QAIL,WAAWA,IAAAA,EAAE,SAASA,MAAE,OAAOA,IAAAA,EAAE,OAAA,GAAUA,MAAE,QAAQ,CAAC;AAAA,MAAA,CACzD;AAAA,IAAA;AAAA,EACL,CACH;AACL,CAAC;AAKM,MAAM,uBAAuB,aAAa,OAAO;AAAA,EACpD,YAAYA,IAAAA,EACP,OAAO;AAAA;AAAA;AAAA;AAAA,IAIJ,QAAQA,IAAAA,EAAE,MAAMA,IAAAA,EAAE,QAAQ,EAAE,IAAI,GAAG;AAAA;AAAA;AAAA;AAAA,IAInC,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAA,EAAS,KAAK;AAAA;AAAA;AAAA;AAAA,IAIlC,SAASA,IAAAA,EAAE,SAASA,IAAAA,EAAE,SAAS;AAAA,EAAA,CAClC,EACA,YAAA;AACT,CAAC;AAMM,MAAM,aAAaA,IAAAA,EACrB,OAAO;AAAA;AAAA;AAAA;AAAA,EAIJ,KAAKA,IAAAA,EAAE,SAAS,WAAW,SAAS;AAAA;AAAA;AAAA;AAAA,EAIpC,MAAMA,IAAAA,EAAE,SAASA,IAAAA,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,EAM3B,OAAOA,IAAAA,EAAE,SAASA,IAAAA,EAAE,OAAO,CAAA,CAAE,EAAE,YAAA,CAAa;AAChD,CAAC,EACA,YAAA;AAKE,MAAM,yBAAyB,cAAc,OAAO;AAAA,EACvD,QAAQA,IAAAA,EAAE,QAAQ,YAAY;AAClC,CAAC;AAKM,MAAM,wBAAwB,aAAa,OAAO;AAAA,EACrD,OAAOA,IAAAA,EAAE,MAAM,UAAU;AAC7B,CAAC;AAKM,MAAM,qCAAqC,mBAAmB,OAAO;AAAA,EACxE,QAAQA,IAAAA,EAAE,QAAQ,kCAAkC;AACxD,CAAC;AAGM,MAAM,sBAAsBA,IAAAA,EAAE,MAAM;AAAA,EACvC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,CAAC;AAEM,MAAM,2BAA2BA,IAAAA,EAAE,MAAM;AAAA,EAC5C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,CAAC;AAEM,MAAM,qBAAqBA,IAAAA,EAAE,MAAM,CAAC,mBAAmB,2BAA2B,oBAAoB,qBAAqB,CAAC;AAG5H,MAAM,sBAAsBA,IAAAA,EAAE,MAAM,CAAC,mBAAmB,4BAA4B,qBAAqB,sBAAsB,CAAC;AAEhI,MAAM,2BAA2BA,IAAAA,EAAE,MAAM;AAAA,EAC5C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,CAAC;AAEM,MAAM,qBAAqBA,IAAAA,EAAE,MAAM;AAAA,EACtC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,CAAC;AAEM,MAAM,iBAAiB,MAAM;AAAA,EAChC,YACoB,MAChB,SACgB,MAClB;AACE,UAAM,aAAa,IAAI,KAAK,OAAO,EAAE;AAJrB,SAAA,OAAA;AAEA,SAAA,OAAA;AAGhB,SAAK,OAAO;AAAA,EAChB;AACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}