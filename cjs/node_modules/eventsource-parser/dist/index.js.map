{"version":3,"file":"index.js","sources":["../../../../../node_modules/eventsource-parser/dist/index.js"],"sourcesContent":["var __defProp = Object.defineProperty, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __publicField = (obj, key, value) => __defNormalProp(obj, typeof key != \"symbol\" ? key + \"\" : key, value);\nclass ParseError extends Error {\n  constructor(message, options) {\n    super(message), __publicField(this, \"type\"), __publicField(this, \"field\"), __publicField(this, \"value\"), __publicField(this, \"line\"), this.name = \"ParseError\", this.type = options.type, this.field = options.field, this.value = options.value, this.line = options.line;\n  }\n}\nfunction noop(_arg) {\n}\nfunction createParser(callbacks) {\n  const { onEvent = noop, onError = noop, onRetry = noop, onComment } = callbacks;\n  let incompleteLine = \"\", isFirstChunk = !0, id, data = \"\", eventType = \"\";\n  function feed(newChunk) {\n    const chunk = isFirstChunk ? newChunk.replace(/^\\xEF\\xBB\\xBF/, \"\") : newChunk, [complete, incomplete] = splitLines(`${incompleteLine}${chunk}`);\n    for (const line of complete)\n      parseLine(line);\n    incompleteLine = incomplete, isFirstChunk = !1;\n  }\n  function parseLine(line) {\n    if (line === \"\") {\n      dispatchEvent();\n      return;\n    }\n    if (line.startsWith(\":\")) {\n      onComment && onComment(line.slice(line.startsWith(\": \") ? 2 : 1));\n      return;\n    }\n    const fieldSeparatorIndex = line.indexOf(\":\");\n    if (fieldSeparatorIndex !== -1) {\n      const field = line.slice(0, fieldSeparatorIndex), offset = line[fieldSeparatorIndex + 1] === \" \" ? 2 : 1, value = line.slice(fieldSeparatorIndex + offset);\n      processField(field, value, line);\n      return;\n    }\n    processField(line, \"\", line);\n  }\n  function processField(field, value, line) {\n    switch (field) {\n      case \"event\":\n        eventType = value;\n        break;\n      case \"data\":\n        data = `${data}${value}\n`;\n        break;\n      case \"id\":\n        id = value.includes(\"\\0\") ? void 0 : value;\n        break;\n      case \"retry\":\n        /^\\d+$/.test(value) ? onRetry(parseInt(value, 10)) : onError(\n          new ParseError(`Invalid \\`retry\\` value: \"${value}\"`, {\n            type: \"invalid-retry\",\n            value,\n            line\n          })\n        );\n        break;\n      default:\n        onError(\n          new ParseError(\n            `Unknown field \"${field.length > 20 ? `${field.slice(0, 20)}\\u2026` : field}\"`,\n            { type: \"unknown-field\", field, value, line }\n          )\n        );\n        break;\n    }\n  }\n  function dispatchEvent() {\n    data.length > 0 && onEvent({\n      id,\n      event: eventType || void 0,\n      // If the data buffer's last character is a U+000A LINE FEED (LF) character,\n      // then remove the last character from the data buffer.\n      data: data.endsWith(`\n`) ? data.slice(0, -1) : data\n    }), id = void 0, data = \"\", eventType = \"\";\n  }\n  function reset(options = {}) {\n    incompleteLine && options.consume && parseLine(incompleteLine), id = void 0, data = \"\", eventType = \"\", incompleteLine = \"\";\n  }\n  return { feed, reset };\n}\nfunction splitLines(chunk) {\n  const lines = [];\n  let incompleteLine = \"\";\n  const totalLength = chunk.length;\n  for (let i = 0; i < totalLength; i++) {\n    const char = chunk[i];\n    char === \"\\r\" && chunk[i + 1] === `\n` ? (lines.push(incompleteLine), incompleteLine = \"\", i++) : char === \"\\r\" || char === `\n` ? (lines.push(incompleteLine), incompleteLine = \"\") : incompleteLine += char;\n  }\n  return [lines, incompleteLine];\n}\nexport {\n  ParseError,\n  createParser\n};\n//# sourceMappingURL=index.js.map\n"],"names":[],"mappings":";;AAAA,IAAI,YAAY,OAAO,gBAAgB,kBAAkB,CAAC,KAAK,KAAK,UAAU,OAAO,MAAM,UAAU,KAAK,KAAK,EAAE,YAAY,MAAI,cAAc,MAAI,UAAU,MAAI,MAAK,CAAE,IAAI,IAAI,GAAG,IAAI,OAAO,gBAAgB,CAAC,KAAK,KAAK,UAAU,gBAAgB,KAAK,OAAO,OAAO,WAAW,MAAM,KAAK,KAAK,KAAK;AACtS,MAAM,mBAAmB,MAAM;AAAA,EAC7B,YAAY,SAAS,SAAS;AAC5B,UAAM,OAAO,GAAG,cAAc,MAAM,MAAM,GAAG,cAAc,MAAM,OAAO,GAAG,cAAc,MAAM,OAAO,GAAG,cAAc,MAAM,MAAM,GAAG,KAAK,OAAO,cAAc,KAAK,OAAO,QAAQ,MAAM,KAAK,QAAQ,QAAQ,OAAO,KAAK,QAAQ,QAAQ,OAAO,KAAK,OAAO,QAAQ;AAAA,EACxQ;AACF;AACA,SAAS,KAAK,MAAM;AACpB;AACA,SAAS,aAAa,WAAW;AAC/B,QAAM,EAAE,UAAU,MAAM,UAAU,MAAM,UAAU,MAAM,UAAS,IAAK;AACtE,MAAI,iBAAiB,IAAI,eAAe,MAAI,IAAI,OAAO,IAAI,YAAY;AACvE,WAAS,KAAK,UAAU;AACtB,UAAM,QAAQ,eAAe,SAAS,QAAQ,iBAAiB,EAAE,IAAI,UAAU,CAAC,UAAU,UAAU,IAAI,WAAW,GAAG,cAAc,GAAG,KAAK,EAAE;AAC9I,eAAW,QAAQ;AACjB,gBAAU,IAAI;AAChB,qBAAiB,YAAY,eAAe;AAAA,EAC9C;AACA,WAAS,UAAU,MAAM;AACvB,QAAI,SAAS,IAAI;AACf,oBAAa;AACb;AAAA,IACF;AACA,QAAI,KAAK,WAAW,GAAG,GAAG;AACxB,mBAAa,UAAU,KAAK,MAAM,KAAK,WAAW,IAAI,IAAI,IAAI,CAAC,CAAC;AAChE;AAAA,IACF;AACA,UAAM,sBAAsB,KAAK,QAAQ,GAAG;AAC5C,QAAI,wBAAwB,IAAI;AAC9B,YAAM,QAAQ,KAAK,MAAM,GAAG,mBAAmB,GAAG,SAAS,KAAK,sBAAsB,CAAC,MAAM,MAAM,IAAI,GAAG,QAAQ,KAAK,MAAM,sBAAsB,MAAM;AACzJ,mBAAa,OAAO,OAAO,IAAI;AAC/B;AAAA,IACF;AACA,iBAAa,MAAM,IAAI,IAAI;AAAA,EAC7B;AACA,WAAS,aAAa,OAAO,OAAO,MAAM;AACxC,YAAQ,OAAK;AAAA,MACX,KAAK;AACH,oBAAY;AACZ;AAAA,MACF,KAAK;AACH,eAAO,GAAG,IAAI,GAAG,KAAK;AAAA;AAEtB;AAAA,MACF,KAAK;AACH,aAAK,MAAM,SAAS,IAAI,IAAI,SAAS;AACrC;AAAA,MACF,KAAK;AACH,gBAAQ,KAAK,KAAK,IAAI,QAAQ,SAAS,OAAO,EAAE,CAAC,IAAI;AAAA,UACnD,IAAI,WAAW,6BAA6B,KAAK,KAAK;AAAA,YACpD,MAAM;AAAA,YACN;AAAA,YACA;AAAA,UACZ,CAAW;AAAA,QACX;AACQ;AAAA,MACF;AACE;AAAA,UACE,IAAI;AAAA,YACF,kBAAkB,MAAM,SAAS,KAAK,GAAG,MAAM,MAAM,GAAG,EAAE,CAAC,MAAW,KAAK;AAAA,YAC3E,EAAE,MAAM,iBAAiB,OAAO,OAAO,KAAI;AAAA,UACvD;AAAA,QACA;AACQ;AAAA,IACR;AAAA,EACE;AACA,WAAS,gBAAgB;AACvB,SAAK,SAAS,KAAK,QAAQ;AAAA,MACzB;AAAA,MACA,OAAO,aAAa;AAAA;AAAA;AAAA,MAGpB,MAAM,KAAK,SAAS;AAAA,CACzB,IAAI,KAAK,MAAM,GAAG,EAAE,IAAI;AAAA,IACzB,CAAK,GAAG,KAAK,QAAQ,OAAO,IAAI,YAAY;AAAA,EAC1C;AACA,WAAS,MAAM,UAAU,IAAI;AAC3B,sBAAkB,QAAQ,WAAW,UAAU,cAAc,GAAG,KAAK,QAAQ,OAAO,IAAI,YAAY,IAAI,iBAAiB;AAAA,EAC3H;AACA,SAAO,EAAE,MAAM,MAAK;AACtB;AACA,SAAS,WAAW,OAAO;AACzB,QAAM,QAAQ,CAAA;AACd,MAAI,iBAAiB;AACrB,QAAM,cAAc,MAAM;AAC1B,WAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AACpC,UAAM,OAAO,MAAM,CAAC;AACpB,aAAS,QAAQ,MAAM,IAAI,CAAC,MAAM;AAAA,KACjC,MAAM,KAAK,cAAc,GAAG,iBAAiB,IAAI,OAAO,SAAS,QAAQ,SAAS;AAAA,KAClF,MAAM,KAAK,cAAc,GAAG,iBAAiB,MAAM,kBAAkB;AAAA,EACxE;AACA,SAAO,CAAC,OAAO,cAAc;AAC/B;;;","x_google_ignoreList":[0]}