{"version":3,"file":"completable.js","sources":["../../../src/server/completable.ts"],"sourcesContent":["import { ZodTypeAny, ZodTypeDef, ZodType, ParseInput, ParseReturnType, RawCreateParams, ZodErrorMap, ProcessedCreateParams } from 'zod';\n\nexport enum McpZodTypeKind {\n    Completable = 'McpCompletable'\n}\n\nexport type CompleteCallback<T extends ZodTypeAny = ZodTypeAny> = (\n    value: T['_input'],\n    context?: {\n        arguments?: Record<string, string>;\n    }\n) => T['_input'][] | Promise<T['_input'][]>;\n\nexport interface CompletableDef<T extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {\n    type: T;\n    complete: CompleteCallback<T>;\n    typeName: McpZodTypeKind.Completable;\n}\n\nexport class Completable<T extends ZodTypeAny> extends ZodType<T['_output'], CompletableDef<T>, T['_input']> {\n    _parse(input: ParseInput): ParseReturnType<this['_output']> {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n    }\n\n    unwrap() {\n        return this._def.type;\n    }\n\n    static create = <T extends ZodTypeAny>(\n        type: T,\n        params: RawCreateParams & {\n            complete: CompleteCallback<T>;\n        }\n    ): Completable<T> => {\n        return new Completable({\n            type,\n            typeName: McpZodTypeKind.Completable,\n            complete: params.complete,\n            ...processCreateParams(params)\n        });\n    };\n}\n\n/**\n * Wraps a Zod type to provide autocompletion capabilities. Useful for, e.g., prompt arguments in MCP.\n */\nexport function completable<T extends ZodTypeAny>(schema: T, complete: CompleteCallback<T>): Completable<T> {\n    return Completable.create(schema, { ...schema._def, complete });\n}\n\n// Not sure why this isn't exported from Zod:\n// https://github.com/colinhacks/zod/blob/f7ad26147ba291cb3fb257545972a8e00e767470/src/types.ts#L130\nfunction processCreateParams(params: RawCreateParams): ProcessedCreateParams {\n    if (!params) return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap) return { errorMap: errorMap, description };\n    const customMap: ZodErrorMap = (iss, ctx) => {\n        const { message } = params;\n\n        if (iss.code === 'invalid_enum_value') {\n            return { message: message ?? ctx.defaultError };\n        }\n        if (typeof ctx.data === 'undefined') {\n            return { message: message ?? required_error ?? ctx.defaultError };\n        }\n        if (iss.code !== 'invalid_type') return { message: ctx.defaultError };\n        return { message: message ?? invalid_type_error ?? ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\n"],"names":["McpZodTypeKind","ZodType"],"mappings":";;;AAEO,IAAK,mCAAAA,oBAAL;AACHA,kBAAA,aAAA,IAAc;AADN,SAAAA;AAAA,GAAA,kBAAA,CAAA,CAAA;AAiBL,MAAM,oBAA0CC,IAAAA,QAAsD;AAAA,EACzG,OAAO,OAAqD;AACxD,UAAM,EAAE,IAAA,IAAQ,KAAK,oBAAoB,KAAK;AAC9C,UAAM,OAAO,IAAI;AACjB,WAAO,KAAK,KAAK,KAAK,OAAO;AAAA,MACzB;AAAA,MACA,MAAM,IAAI;AAAA,MACV,QAAQ;AAAA,IAAA,CACX;AAAA,EACL;AAAA,EAEA,SAAS;AACL,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAEA,OAAA;AAAA,SAAO,SAAS,CACZ,MACA,WAGiB;AACjB,aAAO,IAAI,YAAY;AAAA,QACnB;AAAA,QACA,UAAU;AAAA,QACV,UAAU,OAAO;AAAA,QACjB,GAAG,oBAAoB,MAAM;AAAA,MAAA,CAChC;AAAA,IACL;AAAA,EAAA;AACJ;AAKO,SAAS,YAAkC,QAAW,UAA+C;AACxG,SAAO,YAAY,OAAO,QAAQ,EAAE,GAAG,OAAO,MAAM,UAAU;AAClE;AAIA,SAAS,oBAAoB,QAAgD;AACzE,MAAI,CAAC,OAAQ,QAAO,CAAA;AACpB,QAAM,EAAE,UAAU,oBAAoB,gBAAgB,gBAAgB;AACtE,MAAI,aAAa,sBAAsB,iBAAiB;AACpD,UAAM,IAAI,MAAM,0FAA0F;AAAA,EAC9G;AACA,MAAI,SAAU,QAAO,EAAE,UAAoB,YAAA;AAC3C,QAAM,YAAyB,CAAC,KAAK,QAAQ;AACzC,UAAM,EAAE,YAAY;AAEpB,QAAI,IAAI,SAAS,sBAAsB;AACnC,aAAO,EAAE,SAAS,WAAW,IAAI,aAAA;AAAA,IACrC;AACA,QAAI,OAAO,IAAI,SAAS,aAAa;AACjC,aAAO,EAAE,SAAS,WAAW,kBAAkB,IAAI,aAAA;AAAA,IACvD;AACA,QAAI,IAAI,SAAS,uBAAuB,EAAE,SAAS,IAAI,aAAA;AACvD,WAAO,EAAE,SAAS,WAAW,sBAAsB,IAAI,aAAA;AAAA,EAC3D;AACA,SAAO,EAAE,UAAU,WAAW,YAAA;AAClC;;;;"}