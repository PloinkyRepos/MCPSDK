{"version":3,"file":"bearerAuth.js","sources":["../../../../../src/server/auth/middleware/bearerAuth.ts"],"sourcesContent":["import { RequestHandler } from 'express';\nimport { InsufficientScopeError, InvalidTokenError, OAuthError, ServerError } from '../errors.js';\nimport { OAuthTokenVerifier } from '../provider.js';\nimport { AuthInfo } from '../types.js';\n\nexport type BearerAuthMiddlewareOptions = {\n    /**\n     * A provider used to verify tokens.\n     */\n    verifier: OAuthTokenVerifier;\n\n    /**\n     * Optional scopes that the token must have.\n     */\n    requiredScopes?: string[];\n\n    /**\n     * Optional resource metadata URL to include in WWW-Authenticate header.\n     */\n    resourceMetadataUrl?: string;\n};\n\ndeclare module 'express-serve-static-core' {\n    interface Request {\n        /**\n         * Information about the validated access token, if the `requireBearerAuth` middleware was used.\n         */\n        auth?: AuthInfo;\n    }\n}\n\n/**\n * Middleware that requires a valid Bearer token in the Authorization header.\n *\n * This will validate the token with the auth provider and add the resulting auth info to the request object.\n *\n * If resourceMetadataUrl is provided, it will be included in the WWW-Authenticate header\n * for 401 responses as per the OAuth 2.0 Protected Resource Metadata spec.\n */\nexport function requireBearerAuth({ verifier, requiredScopes = [], resourceMetadataUrl }: BearerAuthMiddlewareOptions): RequestHandler {\n    return async (req, res, next) => {\n        try {\n            const authHeader = req.headers.authorization;\n            if (!authHeader) {\n                throw new InvalidTokenError('Missing Authorization header');\n            }\n\n            const [type, token] = authHeader.split(' ');\n            if (type.toLowerCase() !== 'bearer' || !token) {\n                throw new InvalidTokenError(\"Invalid Authorization header format, expected 'Bearer TOKEN'\");\n            }\n\n            const authInfo = await verifier.verifyAccessToken(token);\n\n            // Check if token has the required scopes (if any)\n            if (requiredScopes.length > 0) {\n                const hasAllScopes = requiredScopes.every(scope => authInfo.scopes.includes(scope));\n\n                if (!hasAllScopes) {\n                    throw new InsufficientScopeError('Insufficient scope');\n                }\n            }\n\n            // Check if the token is set to expire or if it is expired\n            if (typeof authInfo.expiresAt !== 'number' || isNaN(authInfo.expiresAt)) {\n                throw new InvalidTokenError('Token has no expiration time');\n            } else if (authInfo.expiresAt < Date.now() / 1000) {\n                throw new InvalidTokenError('Token has expired');\n            }\n\n            req.auth = authInfo;\n            next();\n        } catch (error) {\n            if (error instanceof InvalidTokenError) {\n                const wwwAuthValue = resourceMetadataUrl\n                    ? `Bearer error=\"${error.errorCode}\", error_description=\"${error.message}\", resource_metadata=\"${resourceMetadataUrl}\"`\n                    : `Bearer error=\"${error.errorCode}\", error_description=\"${error.message}\"`;\n                res.set('WWW-Authenticate', wwwAuthValue);\n                res.status(401).json(error.toResponseObject());\n            } else if (error instanceof InsufficientScopeError) {\n                const wwwAuthValue = resourceMetadataUrl\n                    ? `Bearer error=\"${error.errorCode}\", error_description=\"${error.message}\", resource_metadata=\"${resourceMetadataUrl}\"`\n                    : `Bearer error=\"${error.errorCode}\", error_description=\"${error.message}\"`;\n                res.set('WWW-Authenticate', wwwAuthValue);\n                res.status(403).json(error.toResponseObject());\n            } else if (error instanceof ServerError) {\n                res.status(500).json(error.toResponseObject());\n            } else if (error instanceof OAuthError) {\n                res.status(400).json(error.toResponseObject());\n            } else {\n                const serverError = new ServerError('Internal Server Error');\n                res.status(500).json(serverError.toResponseObject());\n            }\n        }\n    };\n}\n"],"names":["InvalidTokenError","InsufficientScopeError","ServerError","OAuthError"],"mappings":";;;AAuCO,SAAS,kBAAkB,EAAE,UAAU,iBAAiB,CAAA,GAAI,uBAAoE;AACnI,SAAO,OAAO,KAAK,KAAK,SAAS;AAC7B,QAAI;AACA,YAAM,aAAa,IAAI,QAAQ;AAC/B,UAAI,CAAC,YAAY;AACb,cAAM,IAAIA,OAAAA,kBAAkB,8BAA8B;AAAA,MAC9D;AAEA,YAAM,CAAC,MAAM,KAAK,IAAI,WAAW,MAAM,GAAG;AAC1C,UAAI,KAAK,YAAA,MAAkB,YAAY,CAAC,OAAO;AAC3C,cAAM,IAAIA,OAAAA,kBAAkB,8DAA8D;AAAA,MAC9F;AAEA,YAAM,WAAW,MAAM,SAAS,kBAAkB,KAAK;AAGvD,UAAI,eAAe,SAAS,GAAG;AAC3B,cAAM,eAAe,eAAe,MAAM,CAAA,UAAS,SAAS,OAAO,SAAS,KAAK,CAAC;AAElF,YAAI,CAAC,cAAc;AACf,gBAAM,IAAIC,OAAAA,uBAAuB,oBAAoB;AAAA,QACzD;AAAA,MACJ;AAGA,UAAI,OAAO,SAAS,cAAc,YAAY,MAAM,SAAS,SAAS,GAAG;AACrE,cAAM,IAAID,OAAAA,kBAAkB,8BAA8B;AAAA,MAC9D,WAAW,SAAS,YAAY,KAAK,IAAA,IAAQ,KAAM;AAC/C,cAAM,IAAIA,OAAAA,kBAAkB,mBAAmB;AAAA,MACnD;AAEA,UAAI,OAAO;AACX,WAAA;AAAA,IACJ,SAAS,OAAO;AACZ,UAAI,iBAAiBA,OAAAA,mBAAmB;AACpC,cAAM,eAAe,sBACf,iBAAiB,MAAM,SAAS,yBAAyB,MAAM,OAAO,yBAAyB,mBAAmB,MAClH,iBAAiB,MAAM,SAAS,yBAAyB,MAAM,OAAO;AAC5E,YAAI,IAAI,oBAAoB,YAAY;AACxC,YAAI,OAAO,GAAG,EAAE,KAAK,MAAM,kBAAkB;AAAA,MACjD,WAAW,iBAAiBC,+BAAwB;AAChD,cAAM,eAAe,sBACf,iBAAiB,MAAM,SAAS,yBAAyB,MAAM,OAAO,yBAAyB,mBAAmB,MAClH,iBAAiB,MAAM,SAAS,yBAAyB,MAAM,OAAO;AAC5E,YAAI,IAAI,oBAAoB,YAAY;AACxC,YAAI,OAAO,GAAG,EAAE,KAAK,MAAM,kBAAkB;AAAA,MACjD,WAAW,iBAAiBC,oBAAa;AACrC,YAAI,OAAO,GAAG,EAAE,KAAK,MAAM,kBAAkB;AAAA,MACjD,WAAW,iBAAiBC,mBAAY;AACpC,YAAI,OAAO,GAAG,EAAE,KAAK,MAAM,kBAAkB;AAAA,MACjD,OAAO;AACH,cAAM,cAAc,IAAID,OAAAA,YAAY,uBAAuB;AAC3D,YAAI,OAAO,GAAG,EAAE,KAAK,YAAY,kBAAkB;AAAA,MACvD;AAAA,IACJ;AAAA,EACJ;AACJ;;"}