{"version":3,"file":"authorize.js","sources":["../../../../../src/server/auth/handlers/authorize.ts"],"sourcesContent":["import { RequestHandler } from 'express';\nimport { z } from 'zod';\nimport express from 'express';\nimport { OAuthServerProvider } from '../provider.js';\nimport { rateLimit, Options as RateLimitOptions } from 'express-rate-limit';\nimport { allowedMethods } from '../middleware/allowedMethods.js';\nimport { InvalidRequestError, InvalidClientError, InvalidScopeError, ServerError, TooManyRequestsError, OAuthError } from '../errors.js';\n\nexport type AuthorizationHandlerOptions = {\n    provider: OAuthServerProvider;\n    /**\n     * Rate limiting configuration for the authorization endpoint.\n     * Set to false to disable rate limiting for this endpoint.\n     */\n    rateLimit?: Partial<RateLimitOptions> | false;\n};\n\n// Parameters that must be validated in order to issue redirects.\nconst ClientAuthorizationParamsSchema = z.object({\n    client_id: z.string(),\n    redirect_uri: z\n        .string()\n        .optional()\n        .refine(value => value === undefined || URL.canParse(value), { message: 'redirect_uri must be a valid URL' })\n});\n\n// Parameters that must be validated for a successful authorization request. Failure can be reported to the redirect URI.\nconst RequestAuthorizationParamsSchema = z.object({\n    response_type: z.literal('code'),\n    code_challenge: z.string(),\n    code_challenge_method: z.literal('S256'),\n    scope: z.string().optional(),\n    state: z.string().optional(),\n    resource: z.string().url().optional()\n});\n\nexport function authorizationHandler({ provider, rateLimit: rateLimitConfig }: AuthorizationHandlerOptions): RequestHandler {\n    // Create a router to apply middleware\n    const router = express.Router();\n    router.use(allowedMethods(['GET', 'POST']));\n    router.use(express.urlencoded({ extended: false }));\n\n    // Apply rate limiting unless explicitly disabled\n    if (rateLimitConfig !== false) {\n        router.use(\n            rateLimit({\n                windowMs: 15 * 60 * 1000, // 15 minutes\n                max: 100, // 100 requests per windowMs\n                standardHeaders: true,\n                legacyHeaders: false,\n                message: new TooManyRequestsError('You have exceeded the rate limit for authorization requests').toResponseObject(),\n                ...rateLimitConfig\n            })\n        );\n    }\n\n    router.all('/', async (req, res) => {\n        res.setHeader('Cache-Control', 'no-store');\n\n        // In the authorization flow, errors are split into two categories:\n        // 1. Pre-redirect errors (direct response with 400)\n        // 2. Post-redirect errors (redirect with error parameters)\n\n        // Phase 1: Validate client_id and redirect_uri. Any errors here must be direct responses.\n        let client_id, redirect_uri, client;\n        try {\n            const result = ClientAuthorizationParamsSchema.safeParse(req.method === 'POST' ? req.body : req.query);\n            if (!result.success) {\n                throw new InvalidRequestError(result.error.message);\n            }\n\n            client_id = result.data.client_id;\n            redirect_uri = result.data.redirect_uri;\n\n            client = await provider.clientsStore.getClient(client_id);\n            if (!client) {\n                throw new InvalidClientError('Invalid client_id');\n            }\n\n            if (redirect_uri !== undefined) {\n                if (!client.redirect_uris.includes(redirect_uri)) {\n                    throw new InvalidRequestError('Unregistered redirect_uri');\n                }\n            } else if (client.redirect_uris.length === 1) {\n                redirect_uri = client.redirect_uris[0];\n            } else {\n                throw new InvalidRequestError('redirect_uri must be specified when client has multiple registered URIs');\n            }\n        } catch (error) {\n            // Pre-redirect errors - return direct response\n            //\n            // These don't need to be JSON encoded, as they'll be displayed in a user\n            // agent, but OTOH they all represent exceptional situations (arguably,\n            // \"programmer error\"), so presenting a nice HTML page doesn't help the\n            // user anyway.\n            if (error instanceof OAuthError) {\n                const status = error instanceof ServerError ? 500 : 400;\n                res.status(status).json(error.toResponseObject());\n            } else {\n                const serverError = new ServerError('Internal Server Error');\n                res.status(500).json(serverError.toResponseObject());\n            }\n\n            return;\n        }\n\n        // Phase 2: Validate other parameters. Any errors here should go into redirect responses.\n        let state;\n        try {\n            // Parse and validate authorization parameters\n            const parseResult = RequestAuthorizationParamsSchema.safeParse(req.method === 'POST' ? req.body : req.query);\n            if (!parseResult.success) {\n                throw new InvalidRequestError(parseResult.error.message);\n            }\n\n            const { scope, code_challenge, resource } = parseResult.data;\n            state = parseResult.data.state;\n\n            // Validate scopes\n            let requestedScopes: string[] = [];\n            if (scope !== undefined) {\n                requestedScopes = scope.split(' ');\n                const allowedScopes = new Set(client.scope?.split(' '));\n\n                // Check each requested scope against allowed scopes\n                for (const scope of requestedScopes) {\n                    if (!allowedScopes.has(scope)) {\n                        throw new InvalidScopeError(`Client was not registered with scope ${scope}`);\n                    }\n                }\n            }\n\n            // All validation passed, proceed with authorization\n            await provider.authorize(\n                client,\n                {\n                    state,\n                    scopes: requestedScopes,\n                    redirectUri: redirect_uri,\n                    codeChallenge: code_challenge,\n                    resource: resource ? new URL(resource) : undefined\n                },\n                res\n            );\n        } catch (error) {\n            // Post-redirect errors - redirect with error parameters\n            if (error instanceof OAuthError) {\n                res.redirect(302, createErrorRedirect(redirect_uri, error, state));\n            } else {\n                const serverError = new ServerError('Internal Server Error');\n                res.redirect(302, createErrorRedirect(redirect_uri, serverError, state));\n            }\n        }\n    });\n\n    return router;\n}\n\n/**\n * Helper function to create redirect URL with error parameters\n */\nfunction createErrorRedirect(redirectUri: string, error: OAuthError, state?: string): string {\n    const errorUrl = new URL(redirectUri);\n    errorUrl.searchParams.set('error', error.errorCode);\n    errorUrl.searchParams.set('error_description', error.message);\n    if (error.errorUri) {\n        errorUrl.searchParams.set('error_uri', error.errorUri);\n    }\n    if (state) {\n        errorUrl.searchParams.set('state', state);\n    }\n    return errorUrl.href;\n}\n"],"names":["z","allowedMethods","rateLimit","TooManyRequestsError","InvalidRequestError","InvalidClientError","OAuthError","ServerError","scope","InvalidScopeError"],"mappings":"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"}