{"version":3,"file":"index.mjs","sources":["../src/types.ts","../src/shared/protocol.ts","../src/client/index.ts","../src/shared/auth.ts","../src/shared/auth-utils.ts","../src/server/auth/errors.ts","../src/client/auth.ts","../node_modules/eventsource-parser/dist/index.js","../node_modules/eventsource-parser/dist/stream.js","../src/client/streamableHttp.ts","../src/inMemory.ts","../src/server/index.ts","../src/server/completable.ts","../src/shared/uriTemplate.ts","../src/server/mcp.ts","../src/server/streamableHttp.ts"],"sourcesContent":["import { z, ZodTypeAny } from 'zod';\nimport { AuthInfo } from './server/auth/types.js';\n\nexport const LATEST_PROTOCOL_VERSION = '2025-06-18';\nexport const DEFAULT_NEGOTIATED_PROTOCOL_VERSION = '2025-03-26';\nexport const SUPPORTED_PROTOCOL_VERSIONS = [LATEST_PROTOCOL_VERSION, '2025-03-26', '2024-11-05', '2024-10-07'];\n\n/* JSON-RPC types */\nexport const JSONRPC_VERSION = '2.0';\n\n/**\n * A progress token, used to associate progress notifications with the original request.\n */\nexport const ProgressTokenSchema = z.union([z.string(), z.number().int()]);\n\n/**\n * An opaque token used to represent a cursor for pagination.\n */\nexport const CursorSchema = z.string();\n\nconst RequestMetaSchema = z\n    .object({\n        /**\n         * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.\n         */\n        progressToken: z.optional(ProgressTokenSchema)\n    })\n    .passthrough();\n\nconst BaseRequestParamsSchema = z\n    .object({\n        _meta: z.optional(RequestMetaSchema)\n    })\n    .passthrough();\n\nexport const RequestSchema = z.object({\n    method: z.string(),\n    params: z.optional(BaseRequestParamsSchema)\n});\n\nconst BaseNotificationParamsSchema = z\n    .object({\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\nexport const NotificationSchema = z.object({\n    method: z.string(),\n    params: z.optional(BaseNotificationParamsSchema)\n});\n\nexport const ResultSchema = z\n    .object({\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\n/**\n * A uniquely identifying ID for a request in JSON-RPC.\n */\nexport const RequestIdSchema = z.union([z.string(), z.number().int()]);\n\n/**\n * A request that expects a response.\n */\nexport const JSONRPCRequestSchema = z\n    .object({\n        jsonrpc: z.literal(JSONRPC_VERSION),\n        id: RequestIdSchema\n    })\n    .merge(RequestSchema)\n    .strict();\n\nexport const isJSONRPCRequest = (value: unknown): value is JSONRPCRequest => JSONRPCRequestSchema.safeParse(value).success;\n\n/**\n * A notification which does not expect a response.\n */\nexport const JSONRPCNotificationSchema = z\n    .object({\n        jsonrpc: z.literal(JSONRPC_VERSION)\n    })\n    .merge(NotificationSchema)\n    .strict();\n\nexport const isJSONRPCNotification = (value: unknown): value is JSONRPCNotification => JSONRPCNotificationSchema.safeParse(value).success;\n\n/**\n * A successful (non-error) response to a request.\n */\nexport const JSONRPCResponseSchema = z\n    .object({\n        jsonrpc: z.literal(JSONRPC_VERSION),\n        id: RequestIdSchema,\n        result: ResultSchema\n    })\n    .strict();\n\nexport const isJSONRPCResponse = (value: unknown): value is JSONRPCResponse => JSONRPCResponseSchema.safeParse(value).success;\n\n/**\n * Error codes defined by the JSON-RPC specification.\n */\nexport enum ErrorCode {\n    // SDK error codes\n    ConnectionClosed = -32000,\n    RequestTimeout = -32001,\n\n    // Standard JSON-RPC error codes\n    ParseError = -32700,\n    InvalidRequest = -32600,\n    MethodNotFound = -32601,\n    InvalidParams = -32602,\n    InternalError = -32603\n}\n\n/**\n * A response to a request that indicates an error occurred.\n */\nexport const JSONRPCErrorSchema = z\n    .object({\n        jsonrpc: z.literal(JSONRPC_VERSION),\n        id: RequestIdSchema,\n        error: z.object({\n            /**\n             * The error type that occurred.\n             */\n            code: z.number().int(),\n            /**\n             * A short description of the error. The message SHOULD be limited to a concise single sentence.\n             */\n            message: z.string(),\n            /**\n             * Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.).\n             */\n            data: z.optional(z.unknown())\n        })\n    })\n    .strict();\n\nexport const isJSONRPCError = (value: unknown): value is JSONRPCError => JSONRPCErrorSchema.safeParse(value).success;\n\nexport const JSONRPCMessageSchema = z.union([JSONRPCRequestSchema, JSONRPCNotificationSchema, JSONRPCResponseSchema, JSONRPCErrorSchema]);\n\n/* Empty result */\n/**\n * A response that indicates success but carries no data.\n */\nexport const EmptyResultSchema = ResultSchema.strict();\n\n/* Cancellation */\n/**\n * This notification can be sent by either side to indicate that it is cancelling a previously-issued request.\n *\n * The request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.\n *\n * This notification indicates that the result will be unused, so any associated processing SHOULD cease.\n *\n * A client MUST NOT attempt to cancel its `initialize` request.\n */\nexport const CancelledNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/cancelled'),\n    params: BaseNotificationParamsSchema.extend({\n        /**\n         * The ID of the request to cancel.\n         *\n         * This MUST correspond to the ID of a request previously issued in the same direction.\n         */\n        requestId: RequestIdSchema,\n\n        /**\n         * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.\n         */\n        reason: z.string().optional()\n    })\n});\n\n/* Base Metadata */\n/**\n * Icon schema for use in tools, prompts, resources, and implementations.\n */\nexport const IconSchema = z\n    .object({\n        /**\n         * URL or data URI for the icon.\n         */\n        src: z.string(),\n        /**\n         * Optional MIME type for the icon.\n         */\n        mimeType: z.optional(z.string()),\n        /**\n         * Optional array of strings that specify sizes at which the icon can be used.\n         * Each string should be in WxH format (e.g., `\"48x48\"`, `\"96x96\"`) or `\"any\"` for scalable formats like SVG.\n         *\n         * If not provided, the client should assume that the icon can be used at any size.\n         */\n        sizes: z.optional(z.array(z.string()))\n    })\n    .passthrough();\n\n/**\n * Base schema to add `icons` property.\n *\n */\nexport const IconsSchema = z\n    .object({\n        /**\n         * Optional set of sized icons that the client can display in a user interface.\n         *\n         * Clients that support rendering icons MUST support at least the following MIME types:\n         * - `image/png` - PNG images (safe, universal compatibility)\n         * - `image/jpeg` (and `image/jpg`) - JPEG images (safe, universal compatibility)\n         *\n         * Clients that support rendering icons SHOULD also support:\n         * - `image/svg+xml` - SVG images (scalable but requires security precautions)\n         * - `image/webp` - WebP images (modern, efficient format)\n         */\n        icons: z.array(IconSchema).optional()\n    })\n    .passthrough();\n\n/**\n * Base metadata interface for common properties across resources, tools, prompts, and implementations.\n */\nexport const BaseMetadataSchema = z\n    .object({\n        /** Intended for programmatic or logical use, but used as a display name in past specs or fallback */\n        name: z.string(),\n        /**\n         * Intended for UI and end-user contexts â€” optimized to be human-readable and easily understood,\n         * even by those unfamiliar with domain-specific terminology.\n         *\n         * If not provided, the name should be used for display (except for Tool,\n         * where `annotations.title` should be given precedence over using `name`,\n         * if present).\n         */\n        title: z.optional(z.string())\n    })\n    .passthrough();\n\n/* Initialization */\n/**\n * Describes the name and version of an MCP implementation.\n */\nexport const ImplementationSchema = BaseMetadataSchema.extend({\n    version: z.string(),\n    /**\n     * An optional URL of the website for this implementation.\n     */\n    websiteUrl: z.optional(z.string())\n}).merge(IconsSchema);\n\n/**\n * Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.\n */\nexport const ClientCapabilitiesSchema = z\n    .object({\n        /**\n         * Experimental, non-standard capabilities that the client supports.\n         */\n        experimental: z.optional(z.object({}).passthrough()),\n        /**\n         * Present if the client supports sampling from an LLM.\n         */\n        sampling: z.optional(z.object({}).passthrough()),\n        /**\n         * Present if the client supports eliciting user input.\n         */\n        elicitation: z.optional(z.object({}).passthrough()),\n        /**\n         * Present if the client supports listing roots.\n         */\n        roots: z.optional(\n            z\n                .object({\n                    /**\n                     * Whether the client supports issuing notifications for changes to the roots list.\n                     */\n                    listChanged: z.optional(z.boolean())\n                })\n                .passthrough()\n        )\n    })\n    .passthrough();\n\n/**\n * This request is sent from the client to the server when it first connects, asking it to begin initialization.\n */\nexport const InitializeRequestSchema = RequestSchema.extend({\n    method: z.literal('initialize'),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.\n         */\n        protocolVersion: z.string(),\n        capabilities: ClientCapabilitiesSchema,\n        clientInfo: ImplementationSchema\n    })\n});\n\nexport const isInitializeRequest = (value: unknown): value is InitializeRequest => InitializeRequestSchema.safeParse(value).success;\n\n/**\n * Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.\n */\nexport const ServerCapabilitiesSchema = z\n    .object({\n        /**\n         * Experimental, non-standard capabilities that the server supports.\n         */\n        experimental: z.optional(z.object({}).passthrough()),\n        /**\n         * Present if the server supports sending log messages to the client.\n         */\n        logging: z.optional(z.object({}).passthrough()),\n        /**\n         * Present if the server supports sending completions to the client.\n         */\n        completions: z.optional(z.object({}).passthrough()),\n        /**\n         * Present if the server offers any prompt templates.\n         */\n        prompts: z.optional(\n            z\n                .object({\n                    /**\n                     * Whether this server supports issuing notifications for changes to the prompt list.\n                     */\n                    listChanged: z.optional(z.boolean())\n                })\n                .passthrough()\n        ),\n        /**\n         * Present if the server offers any resources to read.\n         */\n        resources: z.optional(\n            z\n                .object({\n                    /**\n                     * Whether this server supports clients subscribing to resource updates.\n                     */\n                    subscribe: z.optional(z.boolean()),\n\n                    /**\n                     * Whether this server supports issuing notifications for changes to the resource list.\n                     */\n                    listChanged: z.optional(z.boolean())\n                })\n                .passthrough()\n        ),\n        /**\n         * Present if the server offers any tools to call.\n         */\n        tools: z.optional(\n            z\n                .object({\n                    /**\n                     * Whether this server supports issuing notifications for changes to the tool list.\n                     */\n                    listChanged: z.optional(z.boolean())\n                })\n                .passthrough()\n        )\n    })\n    .passthrough();\n\n/**\n * After receiving an initialize request from the client, the server sends this response.\n */\nexport const InitializeResultSchema = ResultSchema.extend({\n    /**\n     * The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.\n     */\n    protocolVersion: z.string(),\n    capabilities: ServerCapabilitiesSchema,\n    serverInfo: ImplementationSchema,\n    /**\n     * Instructions describing how to use the server and its features.\n     *\n     * This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a \"hint\" to the model. For example, this information MAY be added to the system prompt.\n     */\n    instructions: z.optional(z.string())\n});\n\n/**\n * This notification is sent from the client to the server after initialization has finished.\n */\nexport const InitializedNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/initialized')\n});\n\nexport const isInitializedNotification = (value: unknown): value is InitializedNotification =>\n    InitializedNotificationSchema.safeParse(value).success;\n\n/* Ping */\n/**\n * A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.\n */\nexport const PingRequestSchema = RequestSchema.extend({\n    method: z.literal('ping')\n});\n\n/* Progress notifications */\nexport const ProgressSchema = z\n    .object({\n        /**\n         * The progress thus far. This should increase every time progress is made, even if the total is unknown.\n         */\n        progress: z.number(),\n        /**\n         * Total number of items to process (or total progress required), if known.\n         */\n        total: z.optional(z.number()),\n        /**\n         * An optional message describing the current progress.\n         */\n        message: z.optional(z.string())\n    })\n    .passthrough();\n\n/**\n * An out-of-band notification used to inform the receiver of a progress update for a long-running request.\n */\nexport const ProgressNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/progress'),\n    params: BaseNotificationParamsSchema.merge(ProgressSchema).extend({\n        /**\n         * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.\n         */\n        progressToken: ProgressTokenSchema\n    })\n});\n\n/* Pagination */\nexport const PaginatedRequestSchema = RequestSchema.extend({\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * An opaque token representing the current pagination position.\n         * If provided, the server should return results starting after this cursor.\n         */\n        cursor: z.optional(CursorSchema)\n    }).optional()\n});\n\nexport const PaginatedResultSchema = ResultSchema.extend({\n    /**\n     * An opaque token representing the pagination position after the last returned result.\n     * If present, there may be more results available.\n     */\n    nextCursor: z.optional(CursorSchema)\n});\n\n/* Resources */\n/**\n * The contents of a specific resource or sub-resource.\n */\nexport const ResourceContentsSchema = z\n    .object({\n        /**\n         * The URI of this resource.\n         */\n        uri: z.string(),\n        /**\n         * The MIME type of this resource, if known.\n         */\n        mimeType: z.optional(z.string()),\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\nexport const TextResourceContentsSchema = ResourceContentsSchema.extend({\n    /**\n     * The text of the item. This must only be set if the item can actually be represented as text (not binary data).\n     */\n    text: z.string()\n});\n\n/**\n * A Zod schema for validating Base64 strings that is more performant and\n * robust for very large inputs than the default regex-based check. It avoids\n * stack overflows by using the native `atob` function for validation.\n */\nconst Base64Schema = z.string().refine(\n    val => {\n        try {\n            // atob throws a DOMException if the string contains characters\n            // that are not part of the Base64 character set.\n            atob(val);\n            return true;\n        } catch {\n            return false;\n        }\n    },\n    { message: 'Invalid Base64 string' }\n);\n\nexport const BlobResourceContentsSchema = ResourceContentsSchema.extend({\n    /**\n     * A base64-encoded string representing the binary data of the item.\n     */\n    blob: Base64Schema\n});\n\n/**\n * A known resource that the server is capable of reading.\n */\nexport const ResourceSchema = BaseMetadataSchema.extend({\n    /**\n     * The URI of this resource.\n     */\n    uri: z.string(),\n\n    /**\n     * A description of what this resource represents.\n     *\n     * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.\n     */\n    description: z.optional(z.string()),\n\n    /**\n     * The MIME type of this resource, if known.\n     */\n    mimeType: z.optional(z.string()),\n\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough())\n}).merge(IconsSchema);\n\n/**\n * A template description for resources available on the server.\n */\nexport const ResourceTemplateSchema = BaseMetadataSchema.extend({\n    /**\n     * A URI template (according to RFC 6570) that can be used to construct resource URIs.\n     */\n    uriTemplate: z.string(),\n\n    /**\n     * A description of what this template is for.\n     *\n     * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.\n     */\n    description: z.optional(z.string()),\n\n    /**\n     * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.\n     */\n    mimeType: z.optional(z.string()),\n\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough())\n}).merge(IconsSchema);\n\n/**\n * Sent from the client to request a list of resources the server has.\n */\nexport const ListResourcesRequestSchema = PaginatedRequestSchema.extend({\n    method: z.literal('resources/list')\n});\n\n/**\n * The server's response to a resources/list request from the client.\n */\nexport const ListResourcesResultSchema = PaginatedResultSchema.extend({\n    resources: z.array(ResourceSchema)\n});\n\n/**\n * Sent from the client to request a list of resource templates the server has.\n */\nexport const ListResourceTemplatesRequestSchema = PaginatedRequestSchema.extend({\n    method: z.literal('resources/templates/list')\n});\n\n/**\n * The server's response to a resources/templates/list request from the client.\n */\nexport const ListResourceTemplatesResultSchema = PaginatedResultSchema.extend({\n    resourceTemplates: z.array(ResourceTemplateSchema)\n});\n\n/**\n * Sent from the client to the server, to read a specific resource URI.\n */\nexport const ReadResourceRequestSchema = RequestSchema.extend({\n    method: z.literal('resources/read'),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.\n         */\n        uri: z.string()\n    })\n});\n\n/**\n * The server's response to a resources/read request from the client.\n */\nexport const ReadResourceResultSchema = ResultSchema.extend({\n    contents: z.array(z.union([TextResourceContentsSchema, BlobResourceContentsSchema]))\n});\n\n/**\n * An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.\n */\nexport const ResourceListChangedNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/resources/list_changed')\n});\n\n/**\n * Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.\n */\nexport const SubscribeRequestSchema = RequestSchema.extend({\n    method: z.literal('resources/subscribe'),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.\n         */\n        uri: z.string()\n    })\n});\n\n/**\n * Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.\n */\nexport const UnsubscribeRequestSchema = RequestSchema.extend({\n    method: z.literal('resources/unsubscribe'),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The URI of the resource to unsubscribe from.\n         */\n        uri: z.string()\n    })\n});\n\n/**\n * A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.\n */\nexport const ResourceUpdatedNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/resources/updated'),\n    params: BaseNotificationParamsSchema.extend({\n        /**\n         * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.\n         */\n        uri: z.string()\n    })\n});\n\n/* Prompts */\n/**\n * Describes an argument that a prompt can accept.\n */\nexport const PromptArgumentSchema = z\n    .object({\n        /**\n         * The name of the argument.\n         */\n        name: z.string(),\n        /**\n         * A human-readable description of the argument.\n         */\n        description: z.optional(z.string()),\n        /**\n         * Whether this argument must be provided.\n         */\n        required: z.optional(z.boolean())\n    })\n    .passthrough();\n\n/**\n * A prompt or prompt template that the server offers.\n */\nexport const PromptSchema = BaseMetadataSchema.extend({\n    /**\n     * An optional description of what this prompt provides\n     */\n    description: z.optional(z.string()),\n    /**\n     * A list of arguments to use for templating the prompt.\n     */\n    arguments: z.optional(z.array(PromptArgumentSchema)),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough())\n}).merge(IconsSchema);\n\n/**\n * Sent from the client to request a list of prompts and prompt templates the server has.\n */\nexport const ListPromptsRequestSchema = PaginatedRequestSchema.extend({\n    method: z.literal('prompts/list')\n});\n\n/**\n * The server's response to a prompts/list request from the client.\n */\nexport const ListPromptsResultSchema = PaginatedResultSchema.extend({\n    prompts: z.array(PromptSchema)\n});\n\n/**\n * Used by the client to get a prompt provided by the server.\n */\nexport const GetPromptRequestSchema = RequestSchema.extend({\n    method: z.literal('prompts/get'),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The name of the prompt or prompt template.\n         */\n        name: z.string(),\n        /**\n         * Arguments to use for templating the prompt.\n         */\n        arguments: z.optional(z.record(z.string()))\n    })\n});\n\n/**\n * Text provided to or from an LLM.\n */\nexport const TextContentSchema = z\n    .object({\n        type: z.literal('text'),\n        /**\n         * The text content of the message.\n         */\n        text: z.string(),\n\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\n/**\n * An image provided to or from an LLM.\n */\nexport const ImageContentSchema = z\n    .object({\n        type: z.literal('image'),\n        /**\n         * The base64-encoded image data.\n         */\n        data: Base64Schema,\n        /**\n         * The MIME type of the image. Different providers may support different image types.\n         */\n        mimeType: z.string(),\n\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\n/**\n * An Audio provided to or from an LLM.\n */\nexport const AudioContentSchema = z\n    .object({\n        type: z.literal('audio'),\n        /**\n         * The base64-encoded audio data.\n         */\n        data: Base64Schema,\n        /**\n         * The MIME type of the audio. Different providers may support different audio types.\n         */\n        mimeType: z.string(),\n\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\n/**\n * The contents of a resource, embedded into a prompt or tool call result.\n */\nexport const EmbeddedResourceSchema = z\n    .object({\n        type: z.literal('resource'),\n        resource: z.union([TextResourceContentsSchema, BlobResourceContentsSchema]),\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\n/**\n * A resource that the server is capable of reading, included in a prompt or tool call result.\n *\n * Note: resource links returned by tools are not guaranteed to appear in the results of `resources/list` requests.\n */\nexport const ResourceLinkSchema = ResourceSchema.extend({\n    type: z.literal('resource_link')\n});\n\n/**\n * A content block that can be used in prompts and tool results.\n */\nexport const ContentBlockSchema = z.union([\n    TextContentSchema,\n    ImageContentSchema,\n    AudioContentSchema,\n    ResourceLinkSchema,\n    EmbeddedResourceSchema\n]);\n\n/**\n * Describes a message returned as part of a prompt.\n */\nexport const PromptMessageSchema = z\n    .object({\n        role: z.enum(['user', 'assistant']),\n        content: ContentBlockSchema\n    })\n    .passthrough();\n\n/**\n * The server's response to a prompts/get request from the client.\n */\nexport const GetPromptResultSchema = ResultSchema.extend({\n    /**\n     * An optional description for the prompt.\n     */\n    description: z.optional(z.string()),\n    messages: z.array(PromptMessageSchema)\n});\n\n/**\n * An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.\n */\nexport const PromptListChangedNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/prompts/list_changed')\n});\n\n/* Tools */\n/**\n * Additional properties describing a Tool to clients.\n *\n * NOTE: all properties in ToolAnnotations are **hints**.\n * They are not guaranteed to provide a faithful description of\n * tool behavior (including descriptive properties like `title`).\n *\n * Clients should never make tool use decisions based on ToolAnnotations\n * received from untrusted servers.\n */\nexport const ToolAnnotationsSchema = z\n    .object({\n        /**\n         * A human-readable title for the tool.\n         */\n        title: z.optional(z.string()),\n\n        /**\n         * If true, the tool does not modify its environment.\n         *\n         * Default: false\n         */\n        readOnlyHint: z.optional(z.boolean()),\n\n        /**\n         * If true, the tool may perform destructive updates to its environment.\n         * If false, the tool performs only additive updates.\n         *\n         * (This property is meaningful only when `readOnlyHint == false`)\n         *\n         * Default: true\n         */\n        destructiveHint: z.optional(z.boolean()),\n\n        /**\n         * If true, calling the tool repeatedly with the same arguments\n         * will have no additional effect on the its environment.\n         *\n         * (This property is meaningful only when `readOnlyHint == false`)\n         *\n         * Default: false\n         */\n        idempotentHint: z.optional(z.boolean()),\n\n        /**\n         * If true, this tool may interact with an \"open world\" of external\n         * entities. If false, the tool's domain of interaction is closed.\n         * For example, the world of a web search tool is open, whereas that\n         * of a memory tool is not.\n         *\n         * Default: true\n         */\n        openWorldHint: z.optional(z.boolean())\n    })\n    .passthrough();\n\n/**\n * Definition for a tool the client can call.\n */\nexport const ToolSchema = BaseMetadataSchema.extend({\n    /**\n     * A human-readable description of the tool.\n     */\n    description: z.optional(z.string()),\n    /**\n     * A JSON Schema object defining the expected parameters for the tool.\n     */\n    inputSchema: z\n        .object({\n            type: z.literal('object'),\n            properties: z.optional(z.object({}).passthrough()),\n            required: z.optional(z.array(z.string()))\n        })\n        .passthrough(),\n    /**\n     * An optional JSON Schema object defining the structure of the tool's output returned in\n     * the structuredContent field of a CallToolResult.\n     */\n    outputSchema: z.optional(\n        z\n            .object({\n                type: z.literal('object'),\n                properties: z.optional(z.object({}).passthrough()),\n                required: z.optional(z.array(z.string()))\n            })\n            .passthrough()\n    ),\n    /**\n     * Optional additional tool information.\n     */\n    annotations: z.optional(ToolAnnotationsSchema),\n\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough())\n}).merge(IconsSchema);\n\n/**\n * Sent from the client to request a list of tools the server has.\n */\nexport const ListToolsRequestSchema = PaginatedRequestSchema.extend({\n    method: z.literal('tools/list')\n});\n\n/**\n * The server's response to a tools/list request from the client.\n */\nexport const ListToolsResultSchema = PaginatedResultSchema.extend({\n    tools: z.array(ToolSchema)\n});\n\n/**\n * The server's response to a tool call.\n */\nexport const CallToolResultSchema = ResultSchema.extend({\n    /**\n     * A list of content objects that represent the result of the tool call.\n     *\n     * If the Tool does not define an outputSchema, this field MUST be present in the result.\n     * For backwards compatibility, this field is always present, but it may be empty.\n     */\n    content: z.array(ContentBlockSchema).default([]),\n\n    /**\n     * An object containing structured tool output.\n     *\n     * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.\n     */\n    structuredContent: z.object({}).passthrough().optional(),\n\n    /**\n     * Whether the tool call ended in an error.\n     *\n     * If not set, this is assumed to be false (the call was successful).\n     *\n     * Any errors that originate from the tool SHOULD be reported inside the result\n     * object, with `isError` set to true, _not_ as an MCP protocol-level error\n     * response. Otherwise, the LLM would not be able to see that an error occurred\n     * and self-correct.\n     *\n     * However, any errors in _finding_ the tool, an error indicating that the\n     * server does not support tool calls, or any other exceptional conditions,\n     * should be reported as an MCP error response.\n     */\n    isError: z.optional(z.boolean())\n});\n\n/**\n * CallToolResultSchema extended with backwards compatibility to protocol version 2024-10-07.\n */\nexport const CompatibilityCallToolResultSchema = CallToolResultSchema.or(\n    ResultSchema.extend({\n        toolResult: z.unknown()\n    })\n);\n\n/**\n * Used by the client to invoke a tool provided by the server.\n */\nexport const CallToolRequestSchema = RequestSchema.extend({\n    method: z.literal('tools/call'),\n    params: BaseRequestParamsSchema.extend({\n        name: z.string(),\n        arguments: z.optional(z.record(z.unknown()))\n    })\n});\n\n/**\n * An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.\n */\nexport const ToolListChangedNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/tools/list_changed')\n});\n\n/* Logging */\n/**\n * The severity of a log message.\n */\nexport const LoggingLevelSchema = z.enum(['debug', 'info', 'notice', 'warning', 'error', 'critical', 'alert', 'emergency']);\n\n/**\n * A request from the client to the server, to enable or adjust logging.\n */\nexport const SetLevelRequestSchema = RequestSchema.extend({\n    method: z.literal('logging/setLevel'),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/logging/message.\n         */\n        level: LoggingLevelSchema\n    })\n});\n\n/**\n * Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.\n */\nexport const LoggingMessageNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/message'),\n    params: BaseNotificationParamsSchema.extend({\n        /**\n         * The severity of this log message.\n         */\n        level: LoggingLevelSchema,\n        /**\n         * An optional name of the logger issuing this message.\n         */\n        logger: z.optional(z.string()),\n        /**\n         * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.\n         */\n        data: z.unknown()\n    })\n});\n\n/* Sampling */\n/**\n * Hints to use for model selection.\n */\nexport const ModelHintSchema = z\n    .object({\n        /**\n         * A hint for a model name.\n         */\n        name: z.string().optional()\n    })\n    .passthrough();\n\n/**\n * The server's preferences for model selection, requested of the client during sampling.\n */\nexport const ModelPreferencesSchema = z\n    .object({\n        /**\n         * Optional hints to use for model selection.\n         */\n        hints: z.optional(z.array(ModelHintSchema)),\n        /**\n         * How much to prioritize cost when selecting a model.\n         */\n        costPriority: z.optional(z.number().min(0).max(1)),\n        /**\n         * How much to prioritize sampling speed (latency) when selecting a model.\n         */\n        speedPriority: z.optional(z.number().min(0).max(1)),\n        /**\n         * How much to prioritize intelligence and capabilities when selecting a model.\n         */\n        intelligencePriority: z.optional(z.number().min(0).max(1))\n    })\n    .passthrough();\n\n/**\n * Describes a message issued to or received from an LLM API.\n */\nexport const SamplingMessageSchema = z\n    .object({\n        role: z.enum(['user', 'assistant']),\n        content: z.union([TextContentSchema, ImageContentSchema, AudioContentSchema])\n    })\n    .passthrough();\n\n/**\n * A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.\n */\nexport const CreateMessageRequestSchema = RequestSchema.extend({\n    method: z.literal('sampling/createMessage'),\n    params: BaseRequestParamsSchema.extend({\n        messages: z.array(SamplingMessageSchema),\n        /**\n         * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.\n         */\n        systemPrompt: z.optional(z.string()),\n        /**\n         * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.\n         */\n        includeContext: z.optional(z.enum(['none', 'thisServer', 'allServers'])),\n        temperature: z.optional(z.number()),\n        /**\n         * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.\n         */\n        maxTokens: z.number().int(),\n        stopSequences: z.optional(z.array(z.string())),\n        /**\n         * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.\n         */\n        metadata: z.optional(z.object({}).passthrough()),\n        /**\n         * The server's preferences for which model to select.\n         */\n        modelPreferences: z.optional(ModelPreferencesSchema)\n    })\n});\n\n/**\n * The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.\n */\nexport const CreateMessageResultSchema = ResultSchema.extend({\n    /**\n     * The name of the model that generated the message.\n     */\n    model: z.string(),\n    /**\n     * The reason why sampling stopped.\n     */\n    stopReason: z.optional(z.enum(['endTurn', 'stopSequence', 'maxTokens']).or(z.string())),\n    role: z.enum(['user', 'assistant']),\n    content: z.discriminatedUnion('type', [TextContentSchema, ImageContentSchema, AudioContentSchema])\n});\n\n/* Elicitation */\n/**\n * Primitive schema definition for boolean fields.\n */\nexport const BooleanSchemaSchema = z\n    .object({\n        type: z.literal('boolean'),\n        title: z.optional(z.string()),\n        description: z.optional(z.string()),\n        default: z.optional(z.boolean())\n    })\n    .passthrough();\n\n/**\n * Primitive schema definition for string fields.\n */\nexport const StringSchemaSchema = z\n    .object({\n        type: z.literal('string'),\n        title: z.optional(z.string()),\n        description: z.optional(z.string()),\n        minLength: z.optional(z.number()),\n        maxLength: z.optional(z.number()),\n        format: z.optional(z.enum(['email', 'uri', 'date', 'date-time']))\n    })\n    .passthrough();\n\n/**\n * Primitive schema definition for number fields.\n */\nexport const NumberSchemaSchema = z\n    .object({\n        type: z.enum(['number', 'integer']),\n        title: z.optional(z.string()),\n        description: z.optional(z.string()),\n        minimum: z.optional(z.number()),\n        maximum: z.optional(z.number())\n    })\n    .passthrough();\n\n/**\n * Primitive schema definition for enum fields.\n */\nexport const EnumSchemaSchema = z\n    .object({\n        type: z.literal('string'),\n        title: z.optional(z.string()),\n        description: z.optional(z.string()),\n        enum: z.array(z.string()),\n        enumNames: z.optional(z.array(z.string()))\n    })\n    .passthrough();\n\n/**\n * Union of all primitive schema definitions.\n */\nexport const PrimitiveSchemaDefinitionSchema = z.union([BooleanSchemaSchema, StringSchemaSchema, NumberSchemaSchema, EnumSchemaSchema]);\n\n/**\n * A request from the server to elicit user input via the client.\n * The client should present the message and form fields to the user.\n */\nexport const ElicitRequestSchema = RequestSchema.extend({\n    method: z.literal('elicitation/create'),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The message to present to the user.\n         */\n        message: z.string(),\n        /**\n         * The schema for the requested user input.\n         */\n        requestedSchema: z\n            .object({\n                type: z.literal('object'),\n                properties: z.record(z.string(), PrimitiveSchemaDefinitionSchema),\n                required: z.optional(z.array(z.string()))\n            })\n            .passthrough()\n    })\n});\n\n/**\n * The client's response to an elicitation/create request from the server.\n */\nexport const ElicitResultSchema = ResultSchema.extend({\n    /**\n     * The user's response action.\n     */\n    action: z.enum(['accept', 'decline', 'cancel']),\n    /**\n     * The collected user input content (only present if action is \"accept\").\n     */\n    content: z.optional(z.record(z.string(), z.unknown()))\n});\n\n/* Autocomplete */\n/**\n * A reference to a resource or resource template definition.\n */\nexport const ResourceTemplateReferenceSchema = z\n    .object({\n        type: z.literal('ref/resource'),\n        /**\n         * The URI or URI template of the resource.\n         */\n        uri: z.string()\n    })\n    .passthrough();\n\n/**\n * @deprecated Use ResourceTemplateReferenceSchema instead\n */\nexport const ResourceReferenceSchema = ResourceTemplateReferenceSchema;\n\n/**\n * Identifies a prompt.\n */\nexport const PromptReferenceSchema = z\n    .object({\n        type: z.literal('ref/prompt'),\n        /**\n         * The name of the prompt or prompt template\n         */\n        name: z.string()\n    })\n    .passthrough();\n\n/**\n * A request from the client to the server, to ask for completion options.\n */\nexport const CompleteRequestSchema = RequestSchema.extend({\n    method: z.literal('completion/complete'),\n    params: BaseRequestParamsSchema.extend({\n        ref: z.union([PromptReferenceSchema, ResourceTemplateReferenceSchema]),\n        /**\n         * The argument's information\n         */\n        argument: z\n            .object({\n                /**\n                 * The name of the argument\n                 */\n                name: z.string(),\n                /**\n                 * The value of the argument to use for completion matching.\n                 */\n                value: z.string()\n            })\n            .passthrough(),\n        context: z.optional(\n            z.object({\n                /**\n                 * Previously-resolved variables in a URI template or prompt.\n                 */\n                arguments: z.optional(z.record(z.string(), z.string()))\n            })\n        )\n    })\n});\n\n/**\n * The server's response to a completion/complete request\n */\nexport const CompleteResultSchema = ResultSchema.extend({\n    completion: z\n        .object({\n            /**\n             * An array of completion values. Must not exceed 100 items.\n             */\n            values: z.array(z.string()).max(100),\n            /**\n             * The total number of completion options available. This can exceed the number of values actually sent in the response.\n             */\n            total: z.optional(z.number().int()),\n            /**\n             * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.\n             */\n            hasMore: z.optional(z.boolean())\n        })\n        .passthrough()\n});\n\n/* Roots */\n/**\n * Represents a root directory or file that the server can operate on.\n */\nexport const RootSchema = z\n    .object({\n        /**\n         * The URI identifying the root. This *must* start with file:// for now.\n         */\n        uri: z.string().startsWith('file://'),\n        /**\n         * An optional name for the root.\n         */\n        name: z.optional(z.string()),\n\n        /**\n         * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n         * for notes on _meta usage.\n         */\n        _meta: z.optional(z.object({}).passthrough())\n    })\n    .passthrough();\n\n/**\n * Sent from the server to request a list of root URIs from the client.\n */\nexport const ListRootsRequestSchema = RequestSchema.extend({\n    method: z.literal('roots/list')\n});\n\n/**\n * The client's response to a roots/list request from the server.\n */\nexport const ListRootsResultSchema = ResultSchema.extend({\n    roots: z.array(RootSchema)\n});\n\n/**\n * A notification from the client to the server, informing it that the list of roots has changed.\n */\nexport const RootsListChangedNotificationSchema = NotificationSchema.extend({\n    method: z.literal('notifications/roots/list_changed')\n});\n\n/* Client messages */\nexport const ClientRequestSchema = z.union([\n    PingRequestSchema,\n    InitializeRequestSchema,\n    CompleteRequestSchema,\n    SetLevelRequestSchema,\n    GetPromptRequestSchema,\n    ListPromptsRequestSchema,\n    ListResourcesRequestSchema,\n    ListResourceTemplatesRequestSchema,\n    ReadResourceRequestSchema,\n    SubscribeRequestSchema,\n    UnsubscribeRequestSchema,\n    CallToolRequestSchema,\n    ListToolsRequestSchema\n]);\n\nexport const ClientNotificationSchema = z.union([\n    CancelledNotificationSchema,\n    ProgressNotificationSchema,\n    InitializedNotificationSchema,\n    RootsListChangedNotificationSchema\n]);\n\nexport const ClientResultSchema = z.union([EmptyResultSchema, CreateMessageResultSchema, ElicitResultSchema, ListRootsResultSchema]);\n\n/* Server messages */\nexport const ServerRequestSchema = z.union([PingRequestSchema, CreateMessageRequestSchema, ElicitRequestSchema, ListRootsRequestSchema]);\n\nexport const ServerNotificationSchema = z.union([\n    CancelledNotificationSchema,\n    ProgressNotificationSchema,\n    LoggingMessageNotificationSchema,\n    ResourceUpdatedNotificationSchema,\n    ResourceListChangedNotificationSchema,\n    ToolListChangedNotificationSchema,\n    PromptListChangedNotificationSchema\n]);\n\nexport const ServerResultSchema = z.union([\n    EmptyResultSchema,\n    InitializeResultSchema,\n    CompleteResultSchema,\n    GetPromptResultSchema,\n    ListPromptsResultSchema,\n    ListResourcesResultSchema,\n    ListResourceTemplatesResultSchema,\n    ReadResourceResultSchema,\n    CallToolResultSchema,\n    ListToolsResultSchema\n]);\n\nexport class McpError extends Error {\n    constructor(\n        public readonly code: number,\n        message: string,\n        public readonly data?: unknown\n    ) {\n        super(`MCP error ${code}: ${message}`);\n        this.name = 'McpError';\n    }\n}\n\ntype Primitive = string | number | boolean | bigint | null | undefined;\ntype Flatten<T> = T extends Primitive\n    ? T\n    : T extends Array<infer U>\n      ? Array<Flatten<U>>\n      : T extends Set<infer U>\n        ? Set<Flatten<U>>\n        : T extends Map<infer K, infer V>\n          ? Map<Flatten<K>, Flatten<V>>\n          : T extends object\n            ? { [K in keyof T]: Flatten<T[K]> }\n            : T;\n\ntype Infer<Schema extends ZodTypeAny> = Flatten<z.infer<Schema>>;\n\n/**\n * Headers that are compatible with both Node.js and the browser.\n */\nexport type IsomorphicHeaders = Record<string, string | string[] | undefined>;\n\n/**\n * Information about the incoming request.\n */\nexport interface RequestInfo {\n    /**\n     * The headers of the request.\n     */\n    headers: IsomorphicHeaders;\n}\n\n/**\n * Extra information about a message.\n */\nexport interface MessageExtraInfo {\n    /**\n     * The request information.\n     */\n    requestInfo?: RequestInfo;\n\n    /**\n     * The authentication information.\n     */\n    authInfo?: AuthInfo;\n}\n\n/* JSON-RPC types */\nexport type ProgressToken = Infer<typeof ProgressTokenSchema>;\nexport type Cursor = Infer<typeof CursorSchema>;\nexport type Request = Infer<typeof RequestSchema>;\nexport type RequestMeta = Infer<typeof RequestMetaSchema>;\nexport type Notification = Infer<typeof NotificationSchema>;\nexport type Result = Infer<typeof ResultSchema>;\nexport type RequestId = Infer<typeof RequestIdSchema>;\nexport type JSONRPCRequest = Infer<typeof JSONRPCRequestSchema>;\nexport type JSONRPCNotification = Infer<typeof JSONRPCNotificationSchema>;\nexport type JSONRPCResponse = Infer<typeof JSONRPCResponseSchema>;\nexport type JSONRPCError = Infer<typeof JSONRPCErrorSchema>;\nexport type JSONRPCMessage = Infer<typeof JSONRPCMessageSchema>;\n\n/* Empty result */\nexport type EmptyResult = Infer<typeof EmptyResultSchema>;\n\n/* Cancellation */\nexport type CancelledNotification = Infer<typeof CancelledNotificationSchema>;\n\n/* Base Metadata */\nexport type Icon = Infer<typeof IconSchema>;\nexport type Icons = Infer<typeof IconsSchema>;\nexport type BaseMetadata = Infer<typeof BaseMetadataSchema>;\n\n/* Initialization */\nexport type Implementation = Infer<typeof ImplementationSchema>;\nexport type ClientCapabilities = Infer<typeof ClientCapabilitiesSchema>;\nexport type InitializeRequest = Infer<typeof InitializeRequestSchema>;\nexport type ServerCapabilities = Infer<typeof ServerCapabilitiesSchema>;\nexport type InitializeResult = Infer<typeof InitializeResultSchema>;\nexport type InitializedNotification = Infer<typeof InitializedNotificationSchema>;\n\n/* Ping */\nexport type PingRequest = Infer<typeof PingRequestSchema>;\n\n/* Progress notifications */\nexport type Progress = Infer<typeof ProgressSchema>;\nexport type ProgressNotification = Infer<typeof ProgressNotificationSchema>;\n\n/* Pagination */\nexport type PaginatedRequest = Infer<typeof PaginatedRequestSchema>;\nexport type PaginatedResult = Infer<typeof PaginatedResultSchema>;\n\n/* Resources */\nexport type ResourceContents = Infer<typeof ResourceContentsSchema>;\nexport type TextResourceContents = Infer<typeof TextResourceContentsSchema>;\nexport type BlobResourceContents = Infer<typeof BlobResourceContentsSchema>;\nexport type Resource = Infer<typeof ResourceSchema>;\nexport type ResourceTemplate = Infer<typeof ResourceTemplateSchema>;\nexport type ListResourcesRequest = Infer<typeof ListResourcesRequestSchema>;\nexport type ListResourcesResult = Infer<typeof ListResourcesResultSchema>;\nexport type ListResourceTemplatesRequest = Infer<typeof ListResourceTemplatesRequestSchema>;\nexport type ListResourceTemplatesResult = Infer<typeof ListResourceTemplatesResultSchema>;\nexport type ReadResourceRequest = Infer<typeof ReadResourceRequestSchema>;\nexport type ReadResourceResult = Infer<typeof ReadResourceResultSchema>;\nexport type ResourceListChangedNotification = Infer<typeof ResourceListChangedNotificationSchema>;\nexport type SubscribeRequest = Infer<typeof SubscribeRequestSchema>;\nexport type UnsubscribeRequest = Infer<typeof UnsubscribeRequestSchema>;\nexport type ResourceUpdatedNotification = Infer<typeof ResourceUpdatedNotificationSchema>;\n\n/* Prompts */\nexport type PromptArgument = Infer<typeof PromptArgumentSchema>;\nexport type Prompt = Infer<typeof PromptSchema>;\nexport type ListPromptsRequest = Infer<typeof ListPromptsRequestSchema>;\nexport type ListPromptsResult = Infer<typeof ListPromptsResultSchema>;\nexport type GetPromptRequest = Infer<typeof GetPromptRequestSchema>;\nexport type TextContent = Infer<typeof TextContentSchema>;\nexport type ImageContent = Infer<typeof ImageContentSchema>;\nexport type AudioContent = Infer<typeof AudioContentSchema>;\nexport type EmbeddedResource = Infer<typeof EmbeddedResourceSchema>;\nexport type ResourceLink = Infer<typeof ResourceLinkSchema>;\nexport type ContentBlock = Infer<typeof ContentBlockSchema>;\nexport type PromptMessage = Infer<typeof PromptMessageSchema>;\nexport type GetPromptResult = Infer<typeof GetPromptResultSchema>;\nexport type PromptListChangedNotification = Infer<typeof PromptListChangedNotificationSchema>;\n\n/* Tools */\nexport type ToolAnnotations = Infer<typeof ToolAnnotationsSchema>;\nexport type Tool = Infer<typeof ToolSchema>;\nexport type ListToolsRequest = Infer<typeof ListToolsRequestSchema>;\nexport type ListToolsResult = Infer<typeof ListToolsResultSchema>;\nexport type CallToolResult = Infer<typeof CallToolResultSchema>;\nexport type CompatibilityCallToolResult = Infer<typeof CompatibilityCallToolResultSchema>;\nexport type CallToolRequest = Infer<typeof CallToolRequestSchema>;\nexport type ToolListChangedNotification = Infer<typeof ToolListChangedNotificationSchema>;\n\n/* Logging */\nexport type LoggingLevel = Infer<typeof LoggingLevelSchema>;\nexport type SetLevelRequest = Infer<typeof SetLevelRequestSchema>;\nexport type LoggingMessageNotification = Infer<typeof LoggingMessageNotificationSchema>;\n\n/* Sampling */\nexport type SamplingMessage = Infer<typeof SamplingMessageSchema>;\nexport type CreateMessageRequest = Infer<typeof CreateMessageRequestSchema>;\nexport type CreateMessageResult = Infer<typeof CreateMessageResultSchema>;\n\n/* Elicitation */\nexport type BooleanSchema = Infer<typeof BooleanSchemaSchema>;\nexport type StringSchema = Infer<typeof StringSchemaSchema>;\nexport type NumberSchema = Infer<typeof NumberSchemaSchema>;\nexport type EnumSchema = Infer<typeof EnumSchemaSchema>;\nexport type PrimitiveSchemaDefinition = Infer<typeof PrimitiveSchemaDefinitionSchema>;\nexport type ElicitRequest = Infer<typeof ElicitRequestSchema>;\nexport type ElicitResult = Infer<typeof ElicitResultSchema>;\n\n/* Autocomplete */\nexport type ResourceTemplateReference = Infer<typeof ResourceTemplateReferenceSchema>;\n/**\n * @deprecated Use ResourceTemplateReference instead\n */\nexport type ResourceReference = ResourceTemplateReference;\nexport type PromptReference = Infer<typeof PromptReferenceSchema>;\nexport type CompleteRequest = Infer<typeof CompleteRequestSchema>;\nexport type CompleteResult = Infer<typeof CompleteResultSchema>;\n\n/* Roots */\nexport type Root = Infer<typeof RootSchema>;\nexport type ListRootsRequest = Infer<typeof ListRootsRequestSchema>;\nexport type ListRootsResult = Infer<typeof ListRootsResultSchema>;\nexport type RootsListChangedNotification = Infer<typeof RootsListChangedNotificationSchema>;\n\n/* Client messages */\nexport type ClientRequest = Infer<typeof ClientRequestSchema>;\nexport type ClientNotification = Infer<typeof ClientNotificationSchema>;\nexport type ClientResult = Infer<typeof ClientResultSchema>;\n\n/* Server messages */\nexport type ServerRequest = Infer<typeof ServerRequestSchema>;\nexport type ServerNotification = Infer<typeof ServerNotificationSchema>;\nexport type ServerResult = Infer<typeof ServerResultSchema>;\n","import { ZodLiteral, ZodObject, ZodType, z } from 'zod';\nimport {\n    CancelledNotificationSchema,\n    ClientCapabilities,\n    ErrorCode,\n    isJSONRPCError,\n    isJSONRPCRequest,\n    isJSONRPCResponse,\n    isJSONRPCNotification,\n    JSONRPCError,\n    JSONRPCNotification,\n    JSONRPCRequest,\n    JSONRPCResponse,\n    McpError,\n    Notification,\n    PingRequestSchema,\n    Progress,\n    ProgressNotification,\n    ProgressNotificationSchema,\n    Request,\n    RequestId,\n    Result,\n    ServerCapabilities,\n    RequestMeta,\n    MessageExtraInfo,\n    RequestInfo\n} from '../types.js';\nimport { Transport, TransportSendOptions } from './transport.js';\nimport { AuthInfo } from '../server/auth/types.js';\n\n/**\n * Callback for progress notifications.\n */\nexport type ProgressCallback = (progress: Progress) => void;\n\n/**\n * Additional initialization options.\n */\nexport type ProtocolOptions = {\n    /**\n     * Whether to restrict emitted requests to only those that the remote side has indicated that they can handle, through their advertised capabilities.\n     *\n     * Note that this DOES NOT affect checking of _local_ side capabilities, as it is considered a logic error to mis-specify those.\n     *\n     * Currently this defaults to false, for backwards compatibility with SDK versions that did not advertise capabilities correctly. In future, this will default to true.\n     */\n    enforceStrictCapabilities?: boolean;\n    /**\n     * An array of notification method names that should be automatically debounced.\n     * Any notifications with a method in this list will be coalesced if they\n     * occur in the same tick of the event loop.\n     * e.g., ['notifications/tools/list_changed']\n     */\n    debouncedNotificationMethods?: string[];\n};\n\n/**\n * The default request timeout, in miliseconds.\n */\nexport const DEFAULT_REQUEST_TIMEOUT_MSEC = 60000;\n\n/**\n * Options that can be given per request.\n */\nexport type RequestOptions = {\n    /**\n     * If set, requests progress notifications from the remote end (if supported). When progress notifications are received, this callback will be invoked.\n     */\n    onprogress?: ProgressCallback;\n\n    /**\n     * Can be used to cancel an in-flight request. This will cause an AbortError to be raised from request().\n     */\n    signal?: AbortSignal;\n\n    /**\n     * A timeout (in milliseconds) for this request. If exceeded, an McpError with code `RequestTimeout` will be raised from request().\n     *\n     * If not specified, `DEFAULT_REQUEST_TIMEOUT_MSEC` will be used as the timeout.\n     */\n    timeout?: number;\n\n    /**\n     * If true, receiving a progress notification will reset the request timeout.\n     * This is useful for long-running operations that send periodic progress updates.\n     * Default: false\n     */\n    resetTimeoutOnProgress?: boolean;\n\n    /**\n     * Maximum total time (in milliseconds) to wait for a response.\n     * If exceeded, an McpError with code `RequestTimeout` will be raised, regardless of progress notifications.\n     * If not specified, there is no maximum total timeout.\n     */\n    maxTotalTimeout?: number;\n} & TransportSendOptions;\n\n/**\n * Options that can be given per notification.\n */\nexport type NotificationOptions = {\n    /**\n     * May be used to indicate to the transport which incoming request to associate this outgoing notification with.\n     */\n    relatedRequestId?: RequestId;\n};\n\n/**\n * Extra data given to request handlers.\n */\nexport type RequestHandlerExtra<SendRequestT extends Request, SendNotificationT extends Notification> = {\n    /**\n     * An abort signal used to communicate if the request was cancelled from the sender's side.\n     */\n    signal: AbortSignal;\n\n    /**\n     * Information about a validated access token, provided to request handlers.\n     */\n    authInfo?: AuthInfo;\n\n    /**\n     * The session ID from the transport, if available.\n     */\n    sessionId?: string;\n\n    /**\n     * Metadata from the original request.\n     */\n    _meta?: RequestMeta;\n\n    /**\n     * The JSON-RPC ID of the request being handled.\n     * This can be useful for tracking or logging purposes.\n     */\n    requestId: RequestId;\n\n    /**\n     * The original HTTP request.\n     */\n    requestInfo?: RequestInfo;\n\n    /**\n     * Sends a notification that relates to the current request being handled.\n     *\n     * This is used by certain transports to correctly associate related messages.\n     */\n    sendNotification: (notification: SendNotificationT) => Promise<void>;\n\n    /**\n     * Sends a request that relates to the current request being handled.\n     *\n     * This is used by certain transports to correctly associate related messages.\n     */\n    sendRequest: <U extends ZodType<object>>(request: SendRequestT, resultSchema: U, options?: RequestOptions) => Promise<z.infer<U>>;\n};\n\n/**\n * Information about a request's timeout state\n */\ntype TimeoutInfo = {\n    timeoutId: ReturnType<typeof setTimeout>;\n    startTime: number;\n    timeout: number;\n    maxTotalTimeout?: number;\n    resetTimeoutOnProgress: boolean;\n    onTimeout: () => void;\n};\n\n/**\n * Implements MCP protocol framing on top of a pluggable transport, including\n * features like request/response linking, notifications, and progress.\n */\nexport abstract class Protocol<SendRequestT extends Request, SendNotificationT extends Notification, SendResultT extends Result> {\n    private _transport?: Transport;\n    private _requestMessageId = 0;\n    private _requestHandlers: Map<\n        string,\n        (request: JSONRPCRequest, extra: RequestHandlerExtra<SendRequestT, SendNotificationT>) => Promise<SendResultT>\n    > = new Map();\n    private _requestHandlerAbortControllers: Map<RequestId, AbortController> = new Map();\n    private _notificationHandlers: Map<string, (notification: JSONRPCNotification) => Promise<void>> = new Map();\n    private _responseHandlers: Map<number, (response: JSONRPCResponse | Error) => void> = new Map();\n    private _progressHandlers: Map<number, ProgressCallback> = new Map();\n    private _timeoutInfo: Map<number, TimeoutInfo> = new Map();\n    private _pendingDebouncedNotifications = new Set<string>();\n\n    /**\n     * Callback for when the connection is closed for any reason.\n     *\n     * This is invoked when close() is called as well.\n     */\n    onclose?: () => void;\n\n    /**\n     * Callback for when an error occurs.\n     *\n     * Note that errors are not necessarily fatal; they are used for reporting any kind of exceptional condition out of band.\n     */\n    onerror?: (error: Error) => void;\n\n    /**\n     * A handler to invoke for any request types that do not have their own handler installed.\n     */\n    fallbackRequestHandler?: (request: JSONRPCRequest, extra: RequestHandlerExtra<SendRequestT, SendNotificationT>) => Promise<SendResultT>;\n\n    /**\n     * A handler to invoke for any notification types that do not have their own handler installed.\n     */\n    fallbackNotificationHandler?: (notification: Notification) => Promise<void>;\n\n    constructor(private _options?: ProtocolOptions) {\n        this.setNotificationHandler(CancelledNotificationSchema, notification => {\n            const controller = this._requestHandlerAbortControllers.get(notification.params.requestId);\n            controller?.abort(notification.params.reason);\n        });\n\n        this.setNotificationHandler(ProgressNotificationSchema, notification => {\n            this._onprogress(notification as unknown as ProgressNotification);\n        });\n\n        this.setRequestHandler(\n            PingRequestSchema,\n            // Automatic pong by default.\n            _request => ({}) as SendResultT\n        );\n    }\n\n    private _setupTimeout(\n        messageId: number,\n        timeout: number,\n        maxTotalTimeout: number | undefined,\n        onTimeout: () => void,\n        resetTimeoutOnProgress: boolean = false\n    ) {\n        this._timeoutInfo.set(messageId, {\n            timeoutId: setTimeout(onTimeout, timeout),\n            startTime: Date.now(),\n            timeout,\n            maxTotalTimeout,\n            resetTimeoutOnProgress,\n            onTimeout\n        });\n    }\n\n    private _resetTimeout(messageId: number): boolean {\n        const info = this._timeoutInfo.get(messageId);\n        if (!info) return false;\n\n        const totalElapsed = Date.now() - info.startTime;\n        if (info.maxTotalTimeout && totalElapsed >= info.maxTotalTimeout) {\n            this._timeoutInfo.delete(messageId);\n            throw new McpError(ErrorCode.RequestTimeout, 'Maximum total timeout exceeded', {\n                maxTotalTimeout: info.maxTotalTimeout,\n                totalElapsed\n            });\n        }\n\n        clearTimeout(info.timeoutId);\n        info.timeoutId = setTimeout(info.onTimeout, info.timeout);\n        return true;\n    }\n\n    private _cleanupTimeout(messageId: number) {\n        const info = this._timeoutInfo.get(messageId);\n        if (info) {\n            clearTimeout(info.timeoutId);\n            this._timeoutInfo.delete(messageId);\n        }\n    }\n\n    /**\n     * Attaches to the given transport, starts it, and starts listening for messages.\n     *\n     * The Protocol object assumes ownership of the Transport, replacing any callbacks that have already been set, and expects that it is the only user of the Transport instance going forward.\n     */\n    async connect(transport: Transport): Promise<void> {\n        this._transport = transport;\n        const _onclose = this.transport?.onclose;\n        this._transport.onclose = () => {\n            _onclose?.();\n            this._onclose();\n        };\n\n        const _onerror = this.transport?.onerror;\n        this._transport.onerror = (error: Error) => {\n            _onerror?.(error);\n            this._onerror(error);\n        };\n\n        const _onmessage = this._transport?.onmessage;\n        this._transport.onmessage = (message, extra) => {\n            _onmessage?.(message, extra);\n            if (isJSONRPCResponse(message) || isJSONRPCError(message)) {\n                this._onresponse(message);\n            } else if (isJSONRPCRequest(message)) {\n                this._onrequest(message, extra);\n            } else if (isJSONRPCNotification(message)) {\n                this._onnotification(message);\n            } else {\n                this._onerror(new Error(`Unknown message type: ${JSON.stringify(message)}`));\n            }\n        };\n\n        await this._transport.start();\n    }\n\n    private _onclose(): void {\n        const responseHandlers = this._responseHandlers;\n        this._responseHandlers = new Map();\n        this._progressHandlers.clear();\n        this._pendingDebouncedNotifications.clear();\n        this._transport = undefined;\n        this.onclose?.();\n\n        const error = new McpError(ErrorCode.ConnectionClosed, 'Connection closed');\n        for (const handler of responseHandlers.values()) {\n            handler(error);\n        }\n    }\n\n    private _onerror(error: Error): void {\n        this.onerror?.(error);\n    }\n\n    private _onnotification(notification: JSONRPCNotification): void {\n        const handler = this._notificationHandlers.get(notification.method) ?? this.fallbackNotificationHandler;\n\n        // Ignore notifications not being subscribed to.\n        if (handler === undefined) {\n            return;\n        }\n\n        // Starting with Promise.resolve() puts any synchronous errors into the monad as well.\n        Promise.resolve()\n            .then(() => handler(notification))\n            .catch(error => this._onerror(new Error(`Uncaught error in notification handler: ${error}`)));\n    }\n\n    private _onrequest(request: JSONRPCRequest, extra?: MessageExtraInfo): void {\n        const handler = this._requestHandlers.get(request.method) ?? this.fallbackRequestHandler;\n\n        // Capture the current transport at request time to ensure responses go to the correct client\n        const capturedTransport = this._transport;\n\n        if (handler === undefined) {\n            capturedTransport\n                ?.send({\n                    jsonrpc: '2.0',\n                    id: request.id,\n                    error: {\n                        code: ErrorCode.MethodNotFound,\n                        message: 'Method not found'\n                    }\n                })\n                .catch(error => this._onerror(new Error(`Failed to send an error response: ${error}`)));\n            return;\n        }\n\n        const abortController = new AbortController();\n        this._requestHandlerAbortControllers.set(request.id, abortController);\n\n        const fullExtra: RequestHandlerExtra<SendRequestT, SendNotificationT> = {\n            signal: abortController.signal,\n            sessionId: capturedTransport?.sessionId,\n            _meta: request.params?._meta,\n            sendNotification: notification => this.notification(notification, { relatedRequestId: request.id }),\n            sendRequest: (r, resultSchema, options?) => this.request(r, resultSchema, { ...options, relatedRequestId: request.id }),\n            authInfo: extra?.authInfo,\n            requestId: request.id,\n            requestInfo: extra?.requestInfo\n        };\n\n        // Starting with Promise.resolve() puts any synchronous errors into the monad as well.\n        Promise.resolve()\n            .then(() => handler(request, fullExtra))\n            .then(\n                result => {\n                    if (abortController.signal.aborted) {\n                        return;\n                    }\n\n                    return capturedTransport?.send({\n                        result,\n                        jsonrpc: '2.0',\n                        id: request.id\n                    });\n                },\n                error => {\n                    if (abortController.signal.aborted) {\n                        return;\n                    }\n\n                    return capturedTransport?.send({\n                        jsonrpc: '2.0',\n                        id: request.id,\n                        error: {\n                            code: Number.isSafeInteger(error['code']) ? error['code'] : ErrorCode.InternalError,\n                            message: error.message ?? 'Internal error'\n                        }\n                    });\n                }\n            )\n            .catch(error => this._onerror(new Error(`Failed to send response: ${error}`)))\n            .finally(() => {\n                this._requestHandlerAbortControllers.delete(request.id);\n            });\n    }\n\n    private _onprogress(notification: ProgressNotification): void {\n        const { progressToken, ...params } = notification.params;\n        const messageId = Number(progressToken);\n\n        const handler = this._progressHandlers.get(messageId);\n        if (!handler) {\n            this._onerror(new Error(`Received a progress notification for an unknown token: ${JSON.stringify(notification)}`));\n            return;\n        }\n\n        const responseHandler = this._responseHandlers.get(messageId);\n        const timeoutInfo = this._timeoutInfo.get(messageId);\n\n        if (timeoutInfo && responseHandler && timeoutInfo.resetTimeoutOnProgress) {\n            try {\n                this._resetTimeout(messageId);\n            } catch (error) {\n                responseHandler(error as Error);\n                return;\n            }\n        }\n\n        handler(params);\n    }\n\n    private _onresponse(response: JSONRPCResponse | JSONRPCError): void {\n        const messageId = Number(response.id);\n        const handler = this._responseHandlers.get(messageId);\n        if (handler === undefined) {\n            this._onerror(new Error(`Received a response for an unknown message ID: ${JSON.stringify(response)}`));\n            return;\n        }\n\n        this._responseHandlers.delete(messageId);\n        this._progressHandlers.delete(messageId);\n        this._cleanupTimeout(messageId);\n\n        if (isJSONRPCResponse(response)) {\n            handler(response);\n        } else {\n            const error = new McpError(response.error.code, response.error.message, response.error.data);\n            handler(error);\n        }\n    }\n\n    get transport(): Transport | undefined {\n        return this._transport;\n    }\n\n    /**\n     * Closes the connection.\n     */\n    async close(): Promise<void> {\n        await this._transport?.close();\n    }\n\n    /**\n     * A method to check if a capability is supported by the remote side, for the given method to be called.\n     *\n     * This should be implemented by subclasses.\n     */\n    protected abstract assertCapabilityForMethod(method: SendRequestT['method']): void;\n\n    /**\n     * A method to check if a notification is supported by the local side, for the given method to be sent.\n     *\n     * This should be implemented by subclasses.\n     */\n    protected abstract assertNotificationCapability(method: SendNotificationT['method']): void;\n\n    /**\n     * A method to check if a request handler is supported by the local side, for the given method to be handled.\n     *\n     * This should be implemented by subclasses.\n     */\n    protected abstract assertRequestHandlerCapability(method: string): void;\n\n    /**\n     * Sends a request and wait for a response.\n     *\n     * Do not use this method to emit notifications! Use notification() instead.\n     */\n    request<T extends ZodType<object>>(request: SendRequestT, resultSchema: T, options?: RequestOptions): Promise<z.infer<T>> {\n        const { relatedRequestId, resumptionToken, onresumptiontoken } = options ?? {};\n\n        return new Promise((resolve, reject) => {\n            if (!this._transport) {\n                reject(new Error('Not connected'));\n                return;\n            }\n\n            if (this._options?.enforceStrictCapabilities === true) {\n                this.assertCapabilityForMethod(request.method);\n            }\n\n            options?.signal?.throwIfAborted();\n\n            const messageId = this._requestMessageId++;\n            const jsonrpcRequest: JSONRPCRequest = {\n                ...request,\n                jsonrpc: '2.0',\n                id: messageId\n            };\n\n            if (options?.onprogress) {\n                this._progressHandlers.set(messageId, options.onprogress);\n                jsonrpcRequest.params = {\n                    ...request.params,\n                    _meta: {\n                        ...(request.params?._meta || {}),\n                        progressToken: messageId\n                    }\n                };\n            }\n\n            const cancel = (reason: unknown) => {\n                this._responseHandlers.delete(messageId);\n                this._progressHandlers.delete(messageId);\n                this._cleanupTimeout(messageId);\n\n                this._transport\n                    ?.send(\n                        {\n                            jsonrpc: '2.0',\n                            method: 'notifications/cancelled',\n                            params: {\n                                requestId: messageId,\n                                reason: String(reason)\n                            }\n                        },\n                        { relatedRequestId, resumptionToken, onresumptiontoken }\n                    )\n                    .catch(error => this._onerror(new Error(`Failed to send cancellation: ${error}`)));\n\n                reject(reason);\n            };\n\n            this._responseHandlers.set(messageId, response => {\n                if (options?.signal?.aborted) {\n                    return;\n                }\n\n                if (response instanceof Error) {\n                    return reject(response);\n                }\n\n                try {\n                    const result = resultSchema.parse(response.result);\n                    resolve(result);\n                } catch (error) {\n                    reject(error);\n                }\n            });\n\n            options?.signal?.addEventListener('abort', () => {\n                cancel(options?.signal?.reason);\n            });\n\n            const timeout = options?.timeout ?? DEFAULT_REQUEST_TIMEOUT_MSEC;\n            const timeoutHandler = () => cancel(new McpError(ErrorCode.RequestTimeout, 'Request timed out', { timeout }));\n\n            this._setupTimeout(messageId, timeout, options?.maxTotalTimeout, timeoutHandler, options?.resetTimeoutOnProgress ?? false);\n\n            this._transport.send(jsonrpcRequest, { relatedRequestId, resumptionToken, onresumptiontoken }).catch(error => {\n                this._cleanupTimeout(messageId);\n                reject(error);\n            });\n        });\n    }\n\n    /**\n     * Emits a notification, which is a one-way message that does not expect a response.\n     */\n    async notification(notification: SendNotificationT, options?: NotificationOptions): Promise<void> {\n        if (!this._transport) {\n            throw new Error('Not connected');\n        }\n\n        this.assertNotificationCapability(notification.method);\n\n        const debouncedMethods = this._options?.debouncedNotificationMethods ?? [];\n        // A notification can only be debounced if it's in the list AND it's \"simple\"\n        // (i.e., has no parameters and no related request ID that could be lost).\n        const canDebounce = debouncedMethods.includes(notification.method) && !notification.params && !options?.relatedRequestId;\n\n        if (canDebounce) {\n            // If a notification of this type is already scheduled, do nothing.\n            if (this._pendingDebouncedNotifications.has(notification.method)) {\n                return;\n            }\n\n            // Mark this notification type as pending.\n            this._pendingDebouncedNotifications.add(notification.method);\n\n            // Schedule the actual send to happen in the next microtask.\n            // This allows all synchronous calls in the current event loop tick to be coalesced.\n            Promise.resolve().then(() => {\n                // Un-mark the notification so the next one can be scheduled.\n                this._pendingDebouncedNotifications.delete(notification.method);\n\n                // SAFETY CHECK: If the connection was closed while this was pending, abort.\n                if (!this._transport) {\n                    return;\n                }\n\n                const jsonrpcNotification: JSONRPCNotification = {\n                    ...notification,\n                    jsonrpc: '2.0'\n                };\n                // Send the notification, but don't await it here to avoid blocking.\n                // Handle potential errors with a .catch().\n                this._transport?.send(jsonrpcNotification, options).catch(error => this._onerror(error));\n            });\n\n            // Return immediately.\n            return;\n        }\n\n        const jsonrpcNotification: JSONRPCNotification = {\n            ...notification,\n            jsonrpc: '2.0'\n        };\n\n        await this._transport.send(jsonrpcNotification, options);\n    }\n\n    /**\n     * Registers a handler to invoke when this protocol object receives a request with the given method.\n     *\n     * Note that this will replace any previous request handler for the same method.\n     */\n    setRequestHandler<\n        T extends ZodObject<{\n            method: ZodLiteral<string>;\n        }>\n    >(\n        requestSchema: T,\n        handler: (request: z.infer<T>, extra: RequestHandlerExtra<SendRequestT, SendNotificationT>) => SendResultT | Promise<SendResultT>\n    ): void {\n        const method = requestSchema.shape.method.value;\n        this.assertRequestHandlerCapability(method);\n\n        this._requestHandlers.set(method, (request, extra) => {\n            return Promise.resolve(handler(requestSchema.parse(request), extra));\n        });\n    }\n\n    /**\n     * Removes the request handler for the given method.\n     */\n    removeRequestHandler(method: string): void {\n        this._requestHandlers.delete(method);\n    }\n\n    /**\n     * Asserts that a request handler has not already been set for the given method, in preparation for a new one being automatically installed.\n     */\n    assertCanSetRequestHandler(method: string): void {\n        if (this._requestHandlers.has(method)) {\n            throw new Error(`A request handler for ${method} already exists, which would be overridden`);\n        }\n    }\n\n    /**\n     * Registers a handler to invoke when this protocol object receives a notification with the given method.\n     *\n     * Note that this will replace any previous notification handler for the same method.\n     */\n    setNotificationHandler<\n        T extends ZodObject<{\n            method: ZodLiteral<string>;\n        }>\n    >(notificationSchema: T, handler: (notification: z.infer<T>) => void | Promise<void>): void {\n        this._notificationHandlers.set(notificationSchema.shape.method.value, notification =>\n            Promise.resolve(handler(notificationSchema.parse(notification)))\n        );\n    }\n\n    /**\n     * Removes the notification handler for the given method.\n     */\n    removeNotificationHandler(method: string): void {\n        this._notificationHandlers.delete(method);\n    }\n}\n\nexport function mergeCapabilities<T extends ServerCapabilities | ClientCapabilities>(base: T, additional: T): T {\n    return Object.entries(additional).reduce(\n        (acc, [key, value]) => {\n            if (value && typeof value === 'object') {\n                acc[key] = acc[key] ? { ...acc[key], ...value } : value;\n            } else {\n                acc[key] = value;\n            }\n            return acc;\n        },\n        { ...base }\n    );\n}\n","import { mergeCapabilities, Protocol, ProtocolOptions, RequestOptions } from '../shared/protocol.js';\nimport { Transport } from '../shared/transport.js';\nimport {\n    CallToolRequest,\n    CallToolResultSchema,\n    ClientCapabilities,\n    ClientNotification,\n    ClientRequest,\n    ClientResult,\n    CompatibilityCallToolResultSchema,\n    CompleteRequest,\n    CompleteResultSchema,\n    EmptyResultSchema,\n    GetPromptRequest,\n    GetPromptResultSchema,\n    Implementation,\n    InitializeResultSchema,\n    LATEST_PROTOCOL_VERSION,\n    ListPromptsRequest,\n    ListPromptsResultSchema,\n    ListResourcesRequest,\n    ListResourcesResultSchema,\n    ListResourceTemplatesRequest,\n    ListResourceTemplatesResultSchema,\n    ListToolsRequest,\n    ListToolsResultSchema,\n    LoggingLevel,\n    Notification,\n    ReadResourceRequest,\n    ReadResourceResultSchema,\n    Request,\n    Result,\n    ServerCapabilities,\n    SubscribeRequest,\n    SUPPORTED_PROTOCOL_VERSIONS,\n    UnsubscribeRequest,\n    Tool,\n    ErrorCode,\n    McpError\n} from '../types.js';\nimport Ajv from 'ajv';\nimport type { ValidateFunction } from 'ajv';\n\nexport type ClientOptions = ProtocolOptions & {\n    /**\n     * Capabilities to advertise as being supported by this client.\n     */\n    capabilities?: ClientCapabilities;\n};\n\n/**\n * An MCP client on top of a pluggable transport.\n *\n * The client will automatically begin the initialization flow with the server when connect() is called.\n *\n * To use with custom types, extend the base Request/Notification/Result types and pass them as type parameters:\n *\n * ```typescript\n * // Custom schemas\n * const CustomRequestSchema = RequestSchema.extend({...})\n * const CustomNotificationSchema = NotificationSchema.extend({...})\n * const CustomResultSchema = ResultSchema.extend({...})\n *\n * // Type aliases\n * type CustomRequest = z.infer<typeof CustomRequestSchema>\n * type CustomNotification = z.infer<typeof CustomNotificationSchema>\n * type CustomResult = z.infer<typeof CustomResultSchema>\n *\n * // Create typed client\n * const client = new Client<CustomRequest, CustomNotification, CustomResult>({\n *   name: \"CustomClient\",\n *   version: \"1.0.0\"\n * })\n * ```\n */\nexport class Client<\n    RequestT extends Request = Request,\n    NotificationT extends Notification = Notification,\n    ResultT extends Result = Result\n> extends Protocol<ClientRequest | RequestT, ClientNotification | NotificationT, ClientResult | ResultT> {\n    private _serverCapabilities?: ServerCapabilities;\n    private _serverVersion?: Implementation;\n    private _capabilities: ClientCapabilities;\n    private _instructions?: string;\n    private _cachedToolOutputValidators: Map<string, ValidateFunction> = new Map();\n    private _ajv: InstanceType<typeof Ajv>;\n\n    /**\n     * Initializes this client with the given name and version information.\n     */\n    constructor(\n        private _clientInfo: Implementation,\n        options?: ClientOptions\n    ) {\n        super(options);\n        this._capabilities = options?.capabilities ?? {};\n        this._ajv = new Ajv();\n    }\n\n    /**\n     * Registers new capabilities. This can only be called before connecting to a transport.\n     *\n     * The new capabilities will be merged with any existing capabilities previously given (e.g., at initialization).\n     */\n    public registerCapabilities(capabilities: ClientCapabilities): void {\n        if (this.transport) {\n            throw new Error('Cannot register capabilities after connecting to transport');\n        }\n\n        this._capabilities = mergeCapabilities(this._capabilities, capabilities);\n    }\n\n    protected assertCapability(capability: keyof ServerCapabilities, method: string): void {\n        if (!this._serverCapabilities?.[capability]) {\n            throw new Error(`Server does not support ${capability} (required for ${method})`);\n        }\n    }\n\n    override async connect(transport: Transport, options?: RequestOptions): Promise<void> {\n        await super.connect(transport);\n        // When transport sessionId is already set this means we are trying to reconnect.\n        // In this case we don't need to initialize again.\n        if (transport.sessionId !== undefined) {\n            return;\n        }\n        try {\n            const result = await this.request(\n                {\n                    method: 'initialize',\n                    params: {\n                        protocolVersion: LATEST_PROTOCOL_VERSION,\n                        capabilities: this._capabilities,\n                        clientInfo: this._clientInfo\n                    }\n                },\n                InitializeResultSchema,\n                options\n            );\n\n            if (result === undefined) {\n                throw new Error(`Server sent invalid initialize result: ${result}`);\n            }\n\n            if (!SUPPORTED_PROTOCOL_VERSIONS.includes(result.protocolVersion)) {\n                throw new Error(`Server's protocol version is not supported: ${result.protocolVersion}`);\n            }\n\n            this._serverCapabilities = result.capabilities;\n            this._serverVersion = result.serverInfo;\n            // HTTP transports must set the protocol version in each header after initialization.\n            if (transport.setProtocolVersion) {\n                transport.setProtocolVersion(result.protocolVersion);\n            }\n\n            this._instructions = result.instructions;\n\n            await this.notification({\n                method: 'notifications/initialized'\n            });\n        } catch (error) {\n            // Disconnect if initialization fails.\n            void this.close();\n            throw error;\n        }\n    }\n\n    /**\n     * After initialization has completed, this will be populated with the server's reported capabilities.\n     */\n    getServerCapabilities(): ServerCapabilities | undefined {\n        return this._serverCapabilities;\n    }\n\n    /**\n     * After initialization has completed, this will be populated with information about the server's name and version.\n     */\n    getServerVersion(): Implementation | undefined {\n        return this._serverVersion;\n    }\n\n    /**\n     * After initialization has completed, this may be populated with information about the server's instructions.\n     */\n    getInstructions(): string | undefined {\n        return this._instructions;\n    }\n\n    protected assertCapabilityForMethod(method: RequestT['method']): void {\n        switch (method as ClientRequest['method']) {\n            case 'logging/setLevel':\n                if (!this._serverCapabilities?.logging) {\n                    throw new Error(`Server does not support logging (required for ${method})`);\n                }\n                break;\n\n            case 'prompts/get':\n            case 'prompts/list':\n                if (!this._serverCapabilities?.prompts) {\n                    throw new Error(`Server does not support prompts (required for ${method})`);\n                }\n                break;\n\n            case 'resources/list':\n            case 'resources/templates/list':\n            case 'resources/read':\n            case 'resources/subscribe':\n            case 'resources/unsubscribe':\n                if (!this._serverCapabilities?.resources) {\n                    throw new Error(`Server does not support resources (required for ${method})`);\n                }\n\n                if (method === 'resources/subscribe' && !this._serverCapabilities.resources.subscribe) {\n                    throw new Error(`Server does not support resource subscriptions (required for ${method})`);\n                }\n\n                break;\n\n            case 'tools/call':\n            case 'tools/list':\n                if (!this._serverCapabilities?.tools) {\n                    throw new Error(`Server does not support tools (required for ${method})`);\n                }\n                break;\n\n            case 'completion/complete':\n                if (!this._serverCapabilities?.completions) {\n                    throw new Error(`Server does not support completions (required for ${method})`);\n                }\n                break;\n\n            case 'initialize':\n                // No specific capability required for initialize\n                break;\n\n            case 'ping':\n                // No specific capability required for ping\n                break;\n        }\n    }\n\n    protected assertNotificationCapability(method: NotificationT['method']): void {\n        switch (method as ClientNotification['method']) {\n            case 'notifications/roots/list_changed':\n                if (!this._capabilities.roots?.listChanged) {\n                    throw new Error(`Client does not support roots list changed notifications (required for ${method})`);\n                }\n                break;\n\n            case 'notifications/initialized':\n                // No specific capability required for initialized\n                break;\n\n            case 'notifications/cancelled':\n                // Cancellation notifications are always allowed\n                break;\n\n            case 'notifications/progress':\n                // Progress notifications are always allowed\n                break;\n        }\n    }\n\n    protected assertRequestHandlerCapability(method: string): void {\n        switch (method) {\n            case 'sampling/createMessage':\n                if (!this._capabilities.sampling) {\n                    throw new Error(`Client does not support sampling capability (required for ${method})`);\n                }\n                break;\n\n            case 'elicitation/create':\n                if (!this._capabilities.elicitation) {\n                    throw new Error(`Client does not support elicitation capability (required for ${method})`);\n                }\n                break;\n\n            case 'roots/list':\n                if (!this._capabilities.roots) {\n                    throw new Error(`Client does not support roots capability (required for ${method})`);\n                }\n                break;\n\n            case 'ping':\n                // No specific capability required for ping\n                break;\n        }\n    }\n\n    async ping(options?: RequestOptions) {\n        return this.request({ method: 'ping' }, EmptyResultSchema, options);\n    }\n\n    async complete(params: CompleteRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'completion/complete', params }, CompleteResultSchema, options);\n    }\n\n    async setLoggingLevel(level: LoggingLevel, options?: RequestOptions) {\n        return this.request({ method: 'logging/setLevel', params: { level } }, EmptyResultSchema, options);\n    }\n\n    async getPrompt(params: GetPromptRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'prompts/get', params }, GetPromptResultSchema, options);\n    }\n\n    async listPrompts(params?: ListPromptsRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'prompts/list', params }, ListPromptsResultSchema, options);\n    }\n\n    async listResources(params?: ListResourcesRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'resources/list', params }, ListResourcesResultSchema, options);\n    }\n\n    async listResourceTemplates(params?: ListResourceTemplatesRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'resources/templates/list', params }, ListResourceTemplatesResultSchema, options);\n    }\n\n    async readResource(params: ReadResourceRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'resources/read', params }, ReadResourceResultSchema, options);\n    }\n\n    async subscribeResource(params: SubscribeRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'resources/subscribe', params }, EmptyResultSchema, options);\n    }\n\n    async unsubscribeResource(params: UnsubscribeRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'resources/unsubscribe', params }, EmptyResultSchema, options);\n    }\n\n    async callTool(\n        params: CallToolRequest['params'],\n        resultSchema: typeof CallToolResultSchema | typeof CompatibilityCallToolResultSchema = CallToolResultSchema,\n        options?: RequestOptions\n    ) {\n        const result = await this.request({ method: 'tools/call', params }, resultSchema, options);\n\n        // Check if the tool has an outputSchema\n        const validator = this.getToolOutputValidator(params.name);\n        if (validator) {\n            // If tool has outputSchema, it MUST return structuredContent (unless it's an error)\n            if (!result.structuredContent && !result.isError) {\n                throw new McpError(\n                    ErrorCode.InvalidRequest,\n                    `Tool ${params.name} has an output schema but did not return structured content`\n                );\n            }\n\n            // Only validate structured content if present (not when there's an error)\n            if (result.structuredContent) {\n                try {\n                    // Validate the structured content (which is already an object) against the schema\n                    const isValid = validator(result.structuredContent);\n\n                    if (!isValid) {\n                        throw new McpError(\n                            ErrorCode.InvalidParams,\n                            `Structured content does not match the tool's output schema: ${this._ajv.errorsText(validator.errors)}`\n                        );\n                    }\n                } catch (error) {\n                    if (error instanceof McpError) {\n                        throw error;\n                    }\n                    throw new McpError(\n                        ErrorCode.InvalidParams,\n                        `Failed to validate structured content: ${error instanceof Error ? error.message : String(error)}`\n                    );\n                }\n            }\n        }\n\n        return result;\n    }\n\n    private cacheToolOutputSchemas(tools: Tool[]) {\n        this._cachedToolOutputValidators.clear();\n\n        for (const tool of tools) {\n            // If the tool has an outputSchema, create and cache the Ajv validator\n            if (tool.outputSchema) {\n                try {\n                    const validator = this._ajv.compile(tool.outputSchema);\n                    this._cachedToolOutputValidators.set(tool.name, validator);\n                } catch {\n                    // Ignore schema compilation errors\n                }\n            }\n        }\n    }\n\n    private getToolOutputValidator(toolName: string): ValidateFunction | undefined {\n        return this._cachedToolOutputValidators.get(toolName);\n    }\n\n    async listTools(params?: ListToolsRequest['params'], options?: RequestOptions) {\n        const result = await this.request({ method: 'tools/list', params }, ListToolsResultSchema, options);\n\n        // Cache the tools and their output schemas for future validation\n        this.cacheToolOutputSchemas(result.tools);\n\n        return result;\n    }\n\n    async sendRootsListChanged() {\n        return this.notification({ method: 'notifications/roots/list_changed' });\n    }\n}\n","import { z } from 'zod';\n\n/**\n * Reusable URL validation that disallows javascript: scheme\n */\nexport const SafeUrlSchema = z\n    .string()\n    .url()\n    .superRefine((val, ctx) => {\n        if (!URL.canParse(val)) {\n            ctx.addIssue({\n                code: z.ZodIssueCode.custom,\n                message: 'URL must be parseable',\n                fatal: true\n            });\n\n            return z.NEVER;\n        }\n    })\n    .refine(\n        url => {\n            const u = new URL(url);\n            return u.protocol !== 'javascript:' && u.protocol !== 'data:' && u.protocol !== 'vbscript:';\n        },\n        { message: 'URL cannot use javascript:, data:, or vbscript: scheme' }\n    );\n\n/**\n * RFC 9728 OAuth Protected Resource Metadata\n */\nexport const OAuthProtectedResourceMetadataSchema = z\n    .object({\n        resource: z.string().url(),\n        authorization_servers: z.array(SafeUrlSchema).optional(),\n        jwks_uri: z.string().url().optional(),\n        scopes_supported: z.array(z.string()).optional(),\n        bearer_methods_supported: z.array(z.string()).optional(),\n        resource_signing_alg_values_supported: z.array(z.string()).optional(),\n        resource_name: z.string().optional(),\n        resource_documentation: z.string().optional(),\n        resource_policy_uri: z.string().url().optional(),\n        resource_tos_uri: z.string().url().optional(),\n        tls_client_certificate_bound_access_tokens: z.boolean().optional(),\n        authorization_details_types_supported: z.array(z.string()).optional(),\n        dpop_signing_alg_values_supported: z.array(z.string()).optional(),\n        dpop_bound_access_tokens_required: z.boolean().optional()\n    })\n    .passthrough();\n\n/**\n * RFC 8414 OAuth 2.0 Authorization Server Metadata\n */\nexport const OAuthMetadataSchema = z\n    .object({\n        issuer: z.string(),\n        authorization_endpoint: SafeUrlSchema,\n        token_endpoint: SafeUrlSchema,\n        registration_endpoint: SafeUrlSchema.optional(),\n        scopes_supported: z.array(z.string()).optional(),\n        response_types_supported: z.array(z.string()),\n        response_modes_supported: z.array(z.string()).optional(),\n        grant_types_supported: z.array(z.string()).optional(),\n        token_endpoint_auth_methods_supported: z.array(z.string()).optional(),\n        token_endpoint_auth_signing_alg_values_supported: z.array(z.string()).optional(),\n        service_documentation: SafeUrlSchema.optional(),\n        revocation_endpoint: SafeUrlSchema.optional(),\n        revocation_endpoint_auth_methods_supported: z.array(z.string()).optional(),\n        revocation_endpoint_auth_signing_alg_values_supported: z.array(z.string()).optional(),\n        introspection_endpoint: z.string().optional(),\n        introspection_endpoint_auth_methods_supported: z.array(z.string()).optional(),\n        introspection_endpoint_auth_signing_alg_values_supported: z.array(z.string()).optional(),\n        code_challenge_methods_supported: z.array(z.string()).optional()\n    })\n    .passthrough();\n\n/**\n * OpenID Connect Discovery 1.0 Provider Metadata\n * see: https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\n */\nexport const OpenIdProviderMetadataSchema = z\n    .object({\n        issuer: z.string(),\n        authorization_endpoint: SafeUrlSchema,\n        token_endpoint: SafeUrlSchema,\n        userinfo_endpoint: SafeUrlSchema.optional(),\n        jwks_uri: SafeUrlSchema,\n        registration_endpoint: SafeUrlSchema.optional(),\n        scopes_supported: z.array(z.string()).optional(),\n        response_types_supported: z.array(z.string()),\n        response_modes_supported: z.array(z.string()).optional(),\n        grant_types_supported: z.array(z.string()).optional(),\n        acr_values_supported: z.array(z.string()).optional(),\n        subject_types_supported: z.array(z.string()),\n        id_token_signing_alg_values_supported: z.array(z.string()),\n        id_token_encryption_alg_values_supported: z.array(z.string()).optional(),\n        id_token_encryption_enc_values_supported: z.array(z.string()).optional(),\n        userinfo_signing_alg_values_supported: z.array(z.string()).optional(),\n        userinfo_encryption_alg_values_supported: z.array(z.string()).optional(),\n        userinfo_encryption_enc_values_supported: z.array(z.string()).optional(),\n        request_object_signing_alg_values_supported: z.array(z.string()).optional(),\n        request_object_encryption_alg_values_supported: z.array(z.string()).optional(),\n        request_object_encryption_enc_values_supported: z.array(z.string()).optional(),\n        token_endpoint_auth_methods_supported: z.array(z.string()).optional(),\n        token_endpoint_auth_signing_alg_values_supported: z.array(z.string()).optional(),\n        display_values_supported: z.array(z.string()).optional(),\n        claim_types_supported: z.array(z.string()).optional(),\n        claims_supported: z.array(z.string()).optional(),\n        service_documentation: z.string().optional(),\n        claims_locales_supported: z.array(z.string()).optional(),\n        ui_locales_supported: z.array(z.string()).optional(),\n        claims_parameter_supported: z.boolean().optional(),\n        request_parameter_supported: z.boolean().optional(),\n        request_uri_parameter_supported: z.boolean().optional(),\n        require_request_uri_registration: z.boolean().optional(),\n        op_policy_uri: SafeUrlSchema.optional(),\n        op_tos_uri: SafeUrlSchema.optional()\n    })\n    .passthrough();\n\n/**\n * OpenID Connect Discovery metadata that may include OAuth 2.0 fields\n * This schema represents the real-world scenario where OIDC providers\n * return a mix of OpenID Connect and OAuth 2.0 metadata fields\n */\nexport const OpenIdProviderDiscoveryMetadataSchema = OpenIdProviderMetadataSchema.merge(\n    OAuthMetadataSchema.pick({\n        code_challenge_methods_supported: true\n    })\n);\n\n/**\n * OAuth 2.1 token response\n */\nexport const OAuthTokensSchema = z\n    .object({\n        access_token: z.string(),\n        id_token: z.string().optional(), // Optional for OAuth 2.1, but necessary in OpenID Connect\n        token_type: z.string(),\n        expires_in: z.number().optional(),\n        scope: z.string().optional(),\n        refresh_token: z.string().optional()\n    })\n    .strip();\n\n/**\n * OAuth 2.1 error response\n */\nexport const OAuthErrorResponseSchema = z.object({\n    error: z.string(),\n    error_description: z.string().optional(),\n    error_uri: z.string().optional()\n});\n\n/**\n * RFC 7591 OAuth 2.0 Dynamic Client Registration metadata\n */\nexport const OAuthClientMetadataSchema = z\n    .object({\n        redirect_uris: z.array(SafeUrlSchema),\n        token_endpoint_auth_method: z.string().optional(),\n        grant_types: z.array(z.string()).optional(),\n        response_types: z.array(z.string()).optional(),\n        client_name: z.string().optional(),\n        client_uri: SafeUrlSchema.optional(),\n        logo_uri: SafeUrlSchema.optional(),\n        scope: z.string().optional(),\n        contacts: z.array(z.string()).optional(),\n        tos_uri: SafeUrlSchema.optional(),\n        policy_uri: z.string().optional(),\n        jwks_uri: SafeUrlSchema.optional(),\n        jwks: z.any().optional(),\n        software_id: z.string().optional(),\n        software_version: z.string().optional(),\n        software_statement: z.string().optional()\n    })\n    .strip();\n\n/**\n * RFC 7591 OAuth 2.0 Dynamic Client Registration client information\n */\nexport const OAuthClientInformationSchema = z\n    .object({\n        client_id: z.string(),\n        client_secret: z.string().optional(),\n        client_id_issued_at: z.number().optional(),\n        client_secret_expires_at: z.number().optional()\n    })\n    .strip();\n\n/**\n * RFC 7591 OAuth 2.0 Dynamic Client Registration full response (client information plus metadata)\n */\nexport const OAuthClientInformationFullSchema = OAuthClientMetadataSchema.merge(OAuthClientInformationSchema);\n\n/**\n * RFC 7591 OAuth 2.0 Dynamic Client Registration error response\n */\nexport const OAuthClientRegistrationErrorSchema = z\n    .object({\n        error: z.string(),\n        error_description: z.string().optional()\n    })\n    .strip();\n\n/**\n * RFC 7009 OAuth 2.0 Token Revocation request\n */\nexport const OAuthTokenRevocationRequestSchema = z\n    .object({\n        token: z.string(),\n        token_type_hint: z.string().optional()\n    })\n    .strip();\n\nexport type OAuthMetadata = z.infer<typeof OAuthMetadataSchema>;\nexport type OpenIdProviderMetadata = z.infer<typeof OpenIdProviderMetadataSchema>;\nexport type OpenIdProviderDiscoveryMetadata = z.infer<typeof OpenIdProviderDiscoveryMetadataSchema>;\n\nexport type OAuthTokens = z.infer<typeof OAuthTokensSchema>;\nexport type OAuthErrorResponse = z.infer<typeof OAuthErrorResponseSchema>;\nexport type OAuthClientMetadata = z.infer<typeof OAuthClientMetadataSchema>;\nexport type OAuthClientInformation = z.infer<typeof OAuthClientInformationSchema>;\nexport type OAuthClientInformationFull = z.infer<typeof OAuthClientInformationFullSchema>;\nexport type OAuthClientRegistrationError = z.infer<typeof OAuthClientRegistrationErrorSchema>;\nexport type OAuthTokenRevocationRequest = z.infer<typeof OAuthTokenRevocationRequestSchema>;\nexport type OAuthProtectedResourceMetadata = z.infer<typeof OAuthProtectedResourceMetadataSchema>;\n\n// Unified type for authorization server metadata\nexport type AuthorizationServerMetadata = OAuthMetadata | OpenIdProviderDiscoveryMetadata;\n","/**\n * Utilities for handling OAuth resource URIs.\n */\n\n/**\n * Converts a server URL to a resource URL by removing the fragment.\n * RFC 8707 section 2 states that resource URIs \"MUST NOT include a fragment component\".\n * Keeps everything else unchanged (scheme, domain, port, path, query).\n */\nexport function resourceUrlFromServerUrl(url: URL | string): URL {\n    const resourceURL = typeof url === 'string' ? new URL(url) : new URL(url.href);\n    resourceURL.hash = ''; // Remove fragment\n    return resourceURL;\n}\n\n/**\n * Checks if a requested resource URL matches a configured resource URL.\n * A requested resource matches if it has the same scheme, domain, port,\n * and its path starts with the configured resource's path.\n *\n * @param requestedResource The resource URL being requested\n * @param configuredResource The resource URL that has been configured\n * @returns true if the requested resource matches the configured resource, false otherwise\n */\nexport function checkResourceAllowed({\n    requestedResource,\n    configuredResource\n}: {\n    requestedResource: URL | string;\n    configuredResource: URL | string;\n}): boolean {\n    const requested = typeof requestedResource === 'string' ? new URL(requestedResource) : new URL(requestedResource.href);\n    const configured = typeof configuredResource === 'string' ? new URL(configuredResource) : new URL(configuredResource.href);\n\n    // Compare the origin (scheme, domain, and port)\n    if (requested.origin !== configured.origin) {\n        return false;\n    }\n\n    // Handle cases like requested=/foo and configured=/foo/\n    if (requested.pathname.length < configured.pathname.length) {\n        return false;\n    }\n\n    // Check if the requested path starts with the configured path\n    // Ensure both paths end with / for proper comparison\n    // This ensures that if we have paths like \"/api\" and \"/api/users\",\n    // we properly detect that \"/api/users\" is a subpath of \"/api\"\n    // By adding a trailing slash if missing, we avoid false positives\n    // where paths like \"/api123\" would incorrectly match \"/api\"\n    const requestedPath = requested.pathname.endsWith('/') ? requested.pathname : requested.pathname + '/';\n    const configuredPath = configured.pathname.endsWith('/') ? configured.pathname : configured.pathname + '/';\n\n    return requestedPath.startsWith(configuredPath);\n}\n","import { OAuthErrorResponse } from '../../shared/auth.js';\n\n/**\n * Base class for all OAuth errors\n */\nexport class OAuthError extends Error {\n    static errorCode: string;\n\n    constructor(\n        message: string,\n        public readonly errorUri?: string\n    ) {\n        super(message);\n        this.name = this.constructor.name;\n    }\n\n    /**\n     * Converts the error to a standard OAuth error response object\n     */\n    toResponseObject(): OAuthErrorResponse {\n        const response: OAuthErrorResponse = {\n            error: this.errorCode,\n            error_description: this.message\n        };\n\n        if (this.errorUri) {\n            response.error_uri = this.errorUri;\n        }\n\n        return response;\n    }\n\n    get errorCode(): string {\n        return (this.constructor as typeof OAuthError).errorCode;\n    }\n}\n\n/**\n * Invalid request error - The request is missing a required parameter,\n * includes an invalid parameter value, includes a parameter more than once,\n * or is otherwise malformed.\n */\nexport class InvalidRequestError extends OAuthError {\n    static errorCode = 'invalid_request';\n}\n\n/**\n * Invalid client error - Client authentication failed (e.g., unknown client, no client\n * authentication included, or unsupported authentication method).\n */\nexport class InvalidClientError extends OAuthError {\n    static errorCode = 'invalid_client';\n}\n\n/**\n * Invalid grant error - The provided authorization grant or refresh token is\n * invalid, expired, revoked, does not match the redirection URI used in the\n * authorization request, or was issued to another client.\n */\nexport class InvalidGrantError extends OAuthError {\n    static errorCode = 'invalid_grant';\n}\n\n/**\n * Unauthorized client error - The authenticated client is not authorized to use\n * this authorization grant type.\n */\nexport class UnauthorizedClientError extends OAuthError {\n    static errorCode = 'unauthorized_client';\n}\n\n/**\n * Unsupported grant type error - The authorization grant type is not supported\n * by the authorization server.\n */\nexport class UnsupportedGrantTypeError extends OAuthError {\n    static errorCode = 'unsupported_grant_type';\n}\n\n/**\n * Invalid scope error - The requested scope is invalid, unknown, malformed, or\n * exceeds the scope granted by the resource owner.\n */\nexport class InvalidScopeError extends OAuthError {\n    static errorCode = 'invalid_scope';\n}\n\n/**\n * Access denied error - The resource owner or authorization server denied the request.\n */\nexport class AccessDeniedError extends OAuthError {\n    static errorCode = 'access_denied';\n}\n\n/**\n * Server error - The authorization server encountered an unexpected condition\n * that prevented it from fulfilling the request.\n */\nexport class ServerError extends OAuthError {\n    static errorCode = 'server_error';\n}\n\n/**\n * Temporarily unavailable error - The authorization server is currently unable to\n * handle the request due to a temporary overloading or maintenance of the server.\n */\nexport class TemporarilyUnavailableError extends OAuthError {\n    static errorCode = 'temporarily_unavailable';\n}\n\n/**\n * Unsupported response type error - The authorization server does not support\n * obtaining an authorization code using this method.\n */\nexport class UnsupportedResponseTypeError extends OAuthError {\n    static errorCode = 'unsupported_response_type';\n}\n\n/**\n * Unsupported token type error - The authorization server does not support\n * the requested token type.\n */\nexport class UnsupportedTokenTypeError extends OAuthError {\n    static errorCode = 'unsupported_token_type';\n}\n\n/**\n * Invalid token error - The access token provided is expired, revoked, malformed,\n * or invalid for other reasons.\n */\nexport class InvalidTokenError extends OAuthError {\n    static errorCode = 'invalid_token';\n}\n\n/**\n * Method not allowed error - The HTTP method used is not allowed for this endpoint.\n * (Custom, non-standard error)\n */\nexport class MethodNotAllowedError extends OAuthError {\n    static errorCode = 'method_not_allowed';\n}\n\n/**\n * Too many requests error - Rate limit exceeded.\n * (Custom, non-standard error based on RFC 6585)\n */\nexport class TooManyRequestsError extends OAuthError {\n    static errorCode = 'too_many_requests';\n}\n\n/**\n * Invalid client metadata error - The client metadata is invalid.\n * (Custom error for dynamic client registration - RFC 7591)\n */\nexport class InvalidClientMetadataError extends OAuthError {\n    static errorCode = 'invalid_client_metadata';\n}\n\n/**\n * Insufficient scope error - The request requires higher privileges than provided by the access token.\n */\nexport class InsufficientScopeError extends OAuthError {\n    static errorCode = 'insufficient_scope';\n}\n\n/**\n * A utility class for defining one-off error codes\n */\nexport class CustomOAuthError extends OAuthError {\n    constructor(\n        private readonly customErrorCode: string,\n        message: string,\n        errorUri?: string\n    ) {\n        super(message, errorUri);\n    }\n\n    get errorCode(): string {\n        return this.customErrorCode;\n    }\n}\n\n/**\n * A full list of all OAuthErrors, enabling parsing from error responses\n */\nexport const OAUTH_ERRORS = {\n    [InvalidRequestError.errorCode]: InvalidRequestError,\n    [InvalidClientError.errorCode]: InvalidClientError,\n    [InvalidGrantError.errorCode]: InvalidGrantError,\n    [UnauthorizedClientError.errorCode]: UnauthorizedClientError,\n    [UnsupportedGrantTypeError.errorCode]: UnsupportedGrantTypeError,\n    [InvalidScopeError.errorCode]: InvalidScopeError,\n    [AccessDeniedError.errorCode]: AccessDeniedError,\n    [ServerError.errorCode]: ServerError,\n    [TemporarilyUnavailableError.errorCode]: TemporarilyUnavailableError,\n    [UnsupportedResponseTypeError.errorCode]: UnsupportedResponseTypeError,\n    [UnsupportedTokenTypeError.errorCode]: UnsupportedTokenTypeError,\n    [InvalidTokenError.errorCode]: InvalidTokenError,\n    [MethodNotAllowedError.errorCode]: MethodNotAllowedError,\n    [TooManyRequestsError.errorCode]: TooManyRequestsError,\n    [InvalidClientMetadataError.errorCode]: InvalidClientMetadataError,\n    [InsufficientScopeError.errorCode]: InsufficientScopeError\n} as const;\n","import pkceChallenge from 'pkce-challenge';\nimport { LATEST_PROTOCOL_VERSION } from '../types.js';\nimport {\n    OAuthClientMetadata,\n    OAuthClientInformation,\n    OAuthTokens,\n    OAuthMetadata,\n    OAuthClientInformationFull,\n    OAuthProtectedResourceMetadata,\n    OAuthErrorResponseSchema,\n    AuthorizationServerMetadata,\n    OpenIdProviderDiscoveryMetadataSchema\n} from '../shared/auth.js';\nimport {\n    OAuthClientInformationFullSchema,\n    OAuthMetadataSchema,\n    OAuthProtectedResourceMetadataSchema,\n    OAuthTokensSchema\n} from '../shared/auth.js';\nimport { checkResourceAllowed, resourceUrlFromServerUrl } from '../shared/auth-utils.js';\nimport {\n    InvalidClientError,\n    InvalidGrantError,\n    OAUTH_ERRORS,\n    OAuthError,\n    ServerError,\n    UnauthorizedClientError\n} from '../server/auth/errors.js';\nimport { FetchLike } from '../shared/transport.js';\n\n/**\n * Implements an end-to-end OAuth client to be used with one MCP server.\n *\n * This client relies upon a concept of an authorized \"session,\" the exact\n * meaning of which is application-defined. Tokens, authorization codes, and\n * code verifiers should not cross different sessions.\n */\nexport interface OAuthClientProvider {\n    /**\n     * The URL to redirect the user agent to after authorization.\n     */\n    get redirectUrl(): string | URL;\n\n    /**\n     * Metadata about this OAuth client.\n     */\n    get clientMetadata(): OAuthClientMetadata;\n\n    /**\n     * Returns a OAuth2 state parameter.\n     */\n    state?(): string | Promise<string>;\n\n    /**\n     * Loads information about this OAuth client, as registered already with the\n     * server, or returns `undefined` if the client is not registered with the\n     * server.\n     */\n    clientInformation(): OAuthClientInformation | undefined | Promise<OAuthClientInformation | undefined>;\n\n    /**\n     * If implemented, this permits the OAuth client to dynamically register with\n     * the server. Client information saved this way should later be read via\n     * `clientInformation()`.\n     *\n     * This method is not required to be implemented if client information is\n     * statically known (e.g., pre-registered).\n     */\n    saveClientInformation?(clientInformation: OAuthClientInformationFull): void | Promise<void>;\n\n    /**\n     * Loads any existing OAuth tokens for the current session, or returns\n     * `undefined` if there are no saved tokens.\n     */\n    tokens(): OAuthTokens | undefined | Promise<OAuthTokens | undefined>;\n\n    /**\n     * Stores new OAuth tokens for the current session, after a successful\n     * authorization.\n     */\n    saveTokens(tokens: OAuthTokens): void | Promise<void>;\n\n    /**\n     * Invoked to redirect the user agent to the given URL to begin the authorization flow.\n     */\n    redirectToAuthorization(authorizationUrl: URL): void | Promise<void>;\n\n    /**\n     * Saves a PKCE code verifier for the current session, before redirecting to\n     * the authorization flow.\n     */\n    saveCodeVerifier(codeVerifier: string): void | Promise<void>;\n\n    /**\n     * Loads the PKCE code verifier for the current session, necessary to validate\n     * the authorization result.\n     */\n    codeVerifier(): string | Promise<string>;\n\n    /**\n     * Adds custom client authentication to OAuth token requests.\n     *\n     * This optional method allows implementations to customize how client credentials\n     * are included in token exchange and refresh requests. When provided, this method\n     * is called instead of the default authentication logic, giving full control over\n     * the authentication mechanism.\n     *\n     * Common use cases include:\n     * - Supporting authentication methods beyond the standard OAuth 2.0 methods\n     * - Adding custom headers for proprietary authentication schemes\n     * - Implementing client assertion-based authentication (e.g., JWT bearer tokens)\n     *\n     * @param headers - The request headers (can be modified to add authentication)\n     * @param params - The request body parameters (can be modified to add credentials)\n     * @param url - The token endpoint URL being called\n     * @param metadata - Optional OAuth metadata for the server, which may include supported authentication methods\n     */\n    addClientAuthentication?(\n        headers: Headers,\n        params: URLSearchParams,\n        url: string | URL,\n        metadata?: AuthorizationServerMetadata\n    ): void | Promise<void>;\n\n    /**\n     * If defined, overrides the selection and validation of the\n     * RFC 8707 Resource Indicator. If left undefined, default\n     * validation behavior will be used.\n     *\n     * Implementations must verify the returned resource matches the MCP server.\n     */\n    validateResourceURL?(serverUrl: string | URL, resource?: string): Promise<URL | undefined>;\n\n    /**\n     * If implemented, provides a way for the client to invalidate (e.g. delete) the specified\n     * credentials, in the case where the server has indicated that they are no longer valid.\n     * This avoids requiring the user to intervene manually.\n     */\n    invalidateCredentials?(scope: 'all' | 'client' | 'tokens' | 'verifier'): void | Promise<void>;\n}\n\nexport type AuthResult = 'AUTHORIZED' | 'REDIRECT';\n\nexport class UnauthorizedError extends Error {\n    constructor(message?: string) {\n        super(message ?? 'Unauthorized');\n    }\n}\n\ntype ClientAuthMethod = 'client_secret_basic' | 'client_secret_post' | 'none';\n\n/**\n * Determines the best client authentication method to use based on server support and client configuration.\n *\n * Priority order (highest to lowest):\n * 1. client_secret_basic (if client secret is available)\n * 2. client_secret_post (if client secret is available)\n * 3. none (for public clients)\n *\n * @param clientInformation - OAuth client information containing credentials\n * @param supportedMethods - Authentication methods supported by the authorization server\n * @returns The selected authentication method\n */\nfunction selectClientAuthMethod(clientInformation: OAuthClientInformation, supportedMethods: string[]): ClientAuthMethod {\n    const hasClientSecret = clientInformation.client_secret !== undefined;\n\n    // If server doesn't specify supported methods, use RFC 6749 defaults\n    if (supportedMethods.length === 0) {\n        return hasClientSecret ? 'client_secret_post' : 'none';\n    }\n\n    // Try methods in priority order (most secure first)\n    if (hasClientSecret && supportedMethods.includes('client_secret_basic')) {\n        return 'client_secret_basic';\n    }\n\n    if (hasClientSecret && supportedMethods.includes('client_secret_post')) {\n        return 'client_secret_post';\n    }\n\n    if (supportedMethods.includes('none')) {\n        return 'none';\n    }\n\n    // Fallback: use what we have\n    return hasClientSecret ? 'client_secret_post' : 'none';\n}\n\n/**\n * Applies client authentication to the request based on the specified method.\n *\n * Implements OAuth 2.1 client authentication methods:\n * - client_secret_basic: HTTP Basic authentication (RFC 6749 Section 2.3.1)\n * - client_secret_post: Credentials in request body (RFC 6749 Section 2.3.1)\n * - none: Public client authentication (RFC 6749 Section 2.1)\n *\n * @param method - The authentication method to use\n * @param clientInformation - OAuth client information containing credentials\n * @param headers - HTTP headers object to modify\n * @param params - URL search parameters to modify\n * @throws {Error} When required credentials are missing\n */\nfunction applyClientAuthentication(\n    method: ClientAuthMethod,\n    clientInformation: OAuthClientInformation,\n    headers: Headers,\n    params: URLSearchParams\n): void {\n    const { client_id, client_secret } = clientInformation;\n\n    switch (method) {\n        case 'client_secret_basic':\n            applyBasicAuth(client_id, client_secret, headers);\n            return;\n        case 'client_secret_post':\n            applyPostAuth(client_id, client_secret, params);\n            return;\n        case 'none':\n            applyPublicAuth(client_id, params);\n            return;\n        default:\n            throw new Error(`Unsupported client authentication method: ${method}`);\n    }\n}\n\n/**\n * Applies HTTP Basic authentication (RFC 6749 Section 2.3.1)\n */\nfunction applyBasicAuth(clientId: string, clientSecret: string | undefined, headers: Headers): void {\n    if (!clientSecret) {\n        throw new Error('client_secret_basic authentication requires a client_secret');\n    }\n\n    const credentials = btoa(`${clientId}:${clientSecret}`);\n    headers.set('Authorization', `Basic ${credentials}`);\n}\n\n/**\n * Applies POST body authentication (RFC 6749 Section 2.3.1)\n */\nfunction applyPostAuth(clientId: string, clientSecret: string | undefined, params: URLSearchParams): void {\n    params.set('client_id', clientId);\n    if (clientSecret) {\n        params.set('client_secret', clientSecret);\n    }\n}\n\n/**\n * Applies public client authentication (RFC 6749 Section 2.1)\n */\nfunction applyPublicAuth(clientId: string, params: URLSearchParams): void {\n    params.set('client_id', clientId);\n}\n\n/**\n * Parses an OAuth error response from a string or Response object.\n *\n * If the input is a standard OAuth2.0 error response, it will be parsed according to the spec\n * and an instance of the appropriate OAuthError subclass will be returned.\n * If parsing fails, it falls back to a generic ServerError that includes\n * the response status (if available) and original content.\n *\n * @param input - A Response object or string containing the error response\n * @returns A Promise that resolves to an OAuthError instance\n */\nexport async function parseErrorResponse(input: Response | string): Promise<OAuthError> {\n    const statusCode = input instanceof Response ? input.status : undefined;\n    const body = input instanceof Response ? await input.text() : input;\n\n    try {\n        const result = OAuthErrorResponseSchema.parse(JSON.parse(body));\n        const { error, error_description, error_uri } = result;\n        const errorClass = OAUTH_ERRORS[error] || ServerError;\n        return new errorClass(error_description || '', error_uri);\n    } catch (error) {\n        // Not a valid OAuth error response, but try to inform the user of the raw data anyway\n        const errorMessage = `${statusCode ? `HTTP ${statusCode}: ` : ''}Invalid OAuth error response: ${error}. Raw body: ${body}`;\n        return new ServerError(errorMessage);\n    }\n}\n\n/**\n * Orchestrates the full auth flow with a server.\n *\n * This can be used as a single entry point for all authorization functionality,\n * instead of linking together the other lower-level functions in this module.\n */\nexport async function auth(\n    provider: OAuthClientProvider,\n    options: {\n        serverUrl: string | URL;\n        authorizationCode?: string;\n        scope?: string;\n        resourceMetadataUrl?: URL;\n        fetchFn?: FetchLike;\n    }\n): Promise<AuthResult> {\n    try {\n        return await authInternal(provider, options);\n    } catch (error) {\n        // Handle recoverable error types by invalidating credentials and retrying\n        if (error instanceof InvalidClientError || error instanceof UnauthorizedClientError) {\n            await provider.invalidateCredentials?.('all');\n            return await authInternal(provider, options);\n        } else if (error instanceof InvalidGrantError) {\n            await provider.invalidateCredentials?.('tokens');\n            return await authInternal(provider, options);\n        }\n\n        // Throw otherwise\n        throw error;\n    }\n}\n\nasync function authInternal(\n    provider: OAuthClientProvider,\n    {\n        serverUrl,\n        authorizationCode,\n        scope,\n        resourceMetadataUrl,\n        fetchFn\n    }: {\n        serverUrl: string | URL;\n        authorizationCode?: string;\n        scope?: string;\n        resourceMetadataUrl?: URL;\n        fetchFn?: FetchLike;\n    }\n): Promise<AuthResult> {\n    let resourceMetadata: OAuthProtectedResourceMetadata | undefined;\n    let authorizationServerUrl: string | URL | undefined;\n    try {\n        resourceMetadata = await discoverOAuthProtectedResourceMetadata(serverUrl, { resourceMetadataUrl }, fetchFn);\n        if (resourceMetadata.authorization_servers && resourceMetadata.authorization_servers.length > 0) {\n            authorizationServerUrl = resourceMetadata.authorization_servers[0];\n        }\n    } catch {\n        // Ignore errors and fall back to /.well-known/oauth-authorization-server\n    }\n\n    /**\n     * If we don't get a valid authorization server metadata from protected resource metadata,\n     * fallback to the legacy MCP spec's implementation (version 2025-03-26): MCP server acts as the Authorization server.\n     */\n    if (!authorizationServerUrl) {\n        authorizationServerUrl = serverUrl;\n    }\n\n    const resource: URL | undefined = await selectResourceURL(serverUrl, provider, resourceMetadata);\n\n    const metadata = await discoverAuthorizationServerMetadata(authorizationServerUrl, {\n        fetchFn\n    });\n\n    // Handle client registration if needed\n    let clientInformation = await Promise.resolve(provider.clientInformation());\n    if (!clientInformation) {\n        if (authorizationCode !== undefined) {\n            throw new Error('Existing OAuth client information is required when exchanging an authorization code');\n        }\n\n        if (!provider.saveClientInformation) {\n            throw new Error('OAuth client information must be saveable for dynamic registration');\n        }\n\n        const fullInformation = await registerClient(authorizationServerUrl, {\n            metadata,\n            clientMetadata: provider.clientMetadata,\n            fetchFn\n        });\n\n        await provider.saveClientInformation(fullInformation);\n        clientInformation = fullInformation;\n    }\n\n    // Exchange authorization code for tokens\n    if (authorizationCode !== undefined) {\n        const codeVerifier = await provider.codeVerifier();\n        const tokens = await exchangeAuthorization(authorizationServerUrl, {\n            metadata,\n            clientInformation,\n            authorizationCode,\n            codeVerifier,\n            redirectUri: provider.redirectUrl,\n            resource,\n            addClientAuthentication: provider.addClientAuthentication,\n            fetchFn: fetchFn\n        });\n\n        await provider.saveTokens(tokens);\n        return 'AUTHORIZED';\n    }\n\n    const tokens = await provider.tokens();\n\n    // Handle token refresh or new authorization\n    if (tokens?.refresh_token) {\n        try {\n            // Attempt to refresh the token\n            const newTokens = await refreshAuthorization(authorizationServerUrl, {\n                metadata,\n                clientInformation,\n                refreshToken: tokens.refresh_token,\n                resource,\n                addClientAuthentication: provider.addClientAuthentication,\n                fetchFn\n            });\n\n            await provider.saveTokens(newTokens);\n            return 'AUTHORIZED';\n        } catch (error) {\n            // If this is a ServerError, or an unknown type, log it out and try to continue. Otherwise, escalate so we can fix things and retry.\n            if (!(error instanceof OAuthError) || error instanceof ServerError) {\n                // Could not refresh OAuth tokens\n            } else {\n                // Refresh failed for another reason, re-throw\n                throw error;\n            }\n        }\n    }\n\n    const state = provider.state ? await provider.state() : undefined;\n\n    // Start new authorization flow\n    const { authorizationUrl, codeVerifier } = await startAuthorization(authorizationServerUrl, {\n        metadata,\n        clientInformation,\n        state,\n        redirectUrl: provider.redirectUrl,\n        scope: scope || provider.clientMetadata.scope,\n        resource\n    });\n\n    await provider.saveCodeVerifier(codeVerifier);\n    await provider.redirectToAuthorization(authorizationUrl);\n    return 'REDIRECT';\n}\n\nexport async function selectResourceURL(\n    serverUrl: string | URL,\n    provider: OAuthClientProvider,\n    resourceMetadata?: OAuthProtectedResourceMetadata\n): Promise<URL | undefined> {\n    const defaultResource = resourceUrlFromServerUrl(serverUrl);\n\n    // If provider has custom validation, delegate to it\n    if (provider.validateResourceURL) {\n        return await provider.validateResourceURL(defaultResource, resourceMetadata?.resource);\n    }\n\n    // Only include resource parameter when Protected Resource Metadata is present\n    if (!resourceMetadata) {\n        return undefined;\n    }\n\n    // Validate that the metadata's resource is compatible with our request\n    if (!checkResourceAllowed({ requestedResource: defaultResource, configuredResource: resourceMetadata.resource })) {\n        throw new Error(`Protected resource ${resourceMetadata.resource} does not match expected ${defaultResource} (or origin)`);\n    }\n    // Prefer the resource from metadata since it's what the server is telling us to request\n    return new URL(resourceMetadata.resource);\n}\n\n/**\n * Extract resource_metadata from response header.\n */\nexport function extractResourceMetadataUrl(res: Response): URL | undefined {\n    const authenticateHeader = res.headers.get('WWW-Authenticate');\n    if (!authenticateHeader) {\n        return undefined;\n    }\n\n    const [type, scheme] = authenticateHeader.split(' ');\n    if (type.toLowerCase() !== 'bearer' || !scheme) {\n        return undefined;\n    }\n    const regex = /resource_metadata=\"([^\"]*)\"/;\n    const match = regex.exec(authenticateHeader);\n\n    if (!match) {\n        return undefined;\n    }\n\n    try {\n        return new URL(match[1]);\n    } catch {\n        return undefined;\n    }\n}\n\n/**\n * Looks up RFC 9728 OAuth 2.0 Protected Resource Metadata.\n *\n * If the server returns a 404 for the well-known endpoint, this function will\n * return `undefined`. Any other errors will be thrown as exceptions.\n */\nexport async function discoverOAuthProtectedResourceMetadata(\n    serverUrl: string | URL,\n    opts?: { protocolVersion?: string; resourceMetadataUrl?: string | URL },\n    fetchFn: FetchLike = fetch\n): Promise<OAuthProtectedResourceMetadata> {\n    const response = await discoverMetadataWithFallback(serverUrl, 'oauth-protected-resource', fetchFn, {\n        protocolVersion: opts?.protocolVersion,\n        metadataUrl: opts?.resourceMetadataUrl\n    });\n\n    if (!response || response.status === 404) {\n        throw new Error(`Resource server does not implement OAuth 2.0 Protected Resource Metadata.`);\n    }\n\n    if (!response.ok) {\n        throw new Error(`HTTP ${response.status} trying to load well-known OAuth protected resource metadata.`);\n    }\n    return OAuthProtectedResourceMetadataSchema.parse(await response.json());\n}\n\n/**\n * Helper function to handle fetch with CORS retry logic\n */\nasync function fetchWithCorsRetry(url: URL, headers?: Record<string, string>, fetchFn: FetchLike = fetch): Promise<Response | undefined> {\n    try {\n        return await fetchFn(url, { headers });\n    } catch (error) {\n        if (error instanceof TypeError) {\n            if (headers) {\n                // CORS errors come back as TypeError, retry without headers\n                return fetchWithCorsRetry(url, undefined, fetchFn);\n            } else {\n                // We're getting CORS errors on retry too, return undefined\n                return undefined;\n            }\n        }\n        throw error;\n    }\n}\n\n/**\n * Constructs the well-known path for auth-related metadata discovery\n */\nfunction buildWellKnownPath(\n    wellKnownPrefix: 'oauth-authorization-server' | 'oauth-protected-resource' | 'openid-configuration',\n    pathname: string = '',\n    options: { prependPathname?: boolean } = {}\n): string {\n    // Strip trailing slash from pathname to avoid double slashes\n    if (pathname.endsWith('/')) {\n        pathname = pathname.slice(0, -1);\n    }\n\n    return options.prependPathname ? `${pathname}/.well-known/${wellKnownPrefix}` : `/.well-known/${wellKnownPrefix}${pathname}`;\n}\n\n/**\n * Tries to discover OAuth metadata at a specific URL\n */\nasync function tryMetadataDiscovery(url: URL, protocolVersion: string, fetchFn: FetchLike = fetch): Promise<Response | undefined> {\n    const headers = {\n        'MCP-Protocol-Version': protocolVersion\n    };\n    return await fetchWithCorsRetry(url, headers, fetchFn);\n}\n\n/**\n * Determines if fallback to root discovery should be attempted\n */\nfunction shouldAttemptFallback(response: Response | undefined, pathname: string): boolean {\n    return !response || (response.status >= 400 && response.status < 500 && pathname !== '/');\n}\n\n/**\n * Generic function for discovering OAuth metadata with fallback support\n */\nasync function discoverMetadataWithFallback(\n    serverUrl: string | URL,\n    wellKnownType: 'oauth-authorization-server' | 'oauth-protected-resource',\n    fetchFn: FetchLike,\n    opts?: { protocolVersion?: string; metadataUrl?: string | URL; metadataServerUrl?: string | URL }\n): Promise<Response | undefined> {\n    const issuer = new URL(serverUrl);\n    const protocolVersion = opts?.protocolVersion ?? LATEST_PROTOCOL_VERSION;\n\n    let url: URL;\n    if (opts?.metadataUrl) {\n        url = new URL(opts.metadataUrl);\n    } else {\n        // Try path-aware discovery first\n        const wellKnownPath = buildWellKnownPath(wellKnownType, issuer.pathname);\n        url = new URL(wellKnownPath, opts?.metadataServerUrl ?? issuer);\n        url.search = issuer.search;\n    }\n\n    let response = await tryMetadataDiscovery(url, protocolVersion, fetchFn);\n\n    // If path-aware discovery fails with 404 and we're not already at root, try fallback to root discovery\n    if (!opts?.metadataUrl && shouldAttemptFallback(response, issuer.pathname)) {\n        const rootUrl = new URL(`/.well-known/${wellKnownType}`, issuer);\n        response = await tryMetadataDiscovery(rootUrl, protocolVersion, fetchFn);\n    }\n\n    return response;\n}\n\n/**\n * Looks up RFC 8414 OAuth 2.0 Authorization Server Metadata.\n *\n * If the server returns a 404 for the well-known endpoint, this function will\n * return `undefined`. Any other errors will be thrown as exceptions.\n *\n * @deprecated This function is deprecated in favor of `discoverAuthorizationServerMetadata`.\n */\nexport async function discoverOAuthMetadata(\n    issuer: string | URL,\n    {\n        authorizationServerUrl,\n        protocolVersion\n    }: {\n        authorizationServerUrl?: string | URL;\n        protocolVersion?: string;\n    } = {},\n    fetchFn: FetchLike = fetch\n): Promise<OAuthMetadata | undefined> {\n    if (typeof issuer === 'string') {\n        issuer = new URL(issuer);\n    }\n    if (!authorizationServerUrl) {\n        authorizationServerUrl = issuer;\n    }\n    if (typeof authorizationServerUrl === 'string') {\n        authorizationServerUrl = new URL(authorizationServerUrl);\n    }\n    protocolVersion ??= LATEST_PROTOCOL_VERSION;\n\n    const response = await discoverMetadataWithFallback(authorizationServerUrl, 'oauth-authorization-server', fetchFn, {\n        protocolVersion,\n        metadataServerUrl: authorizationServerUrl\n    });\n\n    if (!response || response.status === 404) {\n        return undefined;\n    }\n\n    if (!response.ok) {\n        throw new Error(`HTTP ${response.status} trying to load well-known OAuth metadata`);\n    }\n\n    return OAuthMetadataSchema.parse(await response.json());\n}\n\n/**\n * Builds a list of discovery URLs to try for authorization server metadata.\n * URLs are returned in priority order:\n * 1. OAuth metadata at the given URL\n * 2. OAuth metadata at root (if URL has path)\n * 3. OIDC metadata endpoints\n */\nexport function buildDiscoveryUrls(authorizationServerUrl: string | URL): { url: URL; type: 'oauth' | 'oidc' }[] {\n    const url = typeof authorizationServerUrl === 'string' ? new URL(authorizationServerUrl) : authorizationServerUrl;\n    const hasPath = url.pathname !== '/';\n    const urlsToTry: { url: URL; type: 'oauth' | 'oidc' }[] = [];\n\n    if (!hasPath) {\n        // Root path: https://example.com/.well-known/oauth-authorization-server\n        urlsToTry.push({\n            url: new URL('/.well-known/oauth-authorization-server', url.origin),\n            type: 'oauth'\n        });\n\n        // OIDC: https://example.com/.well-known/openid-configuration\n        urlsToTry.push({\n            url: new URL(`/.well-known/openid-configuration`, url.origin),\n            type: 'oidc'\n        });\n\n        return urlsToTry;\n    }\n\n    // Strip trailing slash from pathname to avoid double slashes\n    let pathname = url.pathname;\n    if (pathname.endsWith('/')) {\n        pathname = pathname.slice(0, -1);\n    }\n\n    // 1. OAuth metadata at the given URL\n    // Insert well-known before the path: https://example.com/.well-known/oauth-authorization-server/tenant1\n    urlsToTry.push({\n        url: new URL(`/.well-known/oauth-authorization-server${pathname}`, url.origin),\n        type: 'oauth'\n    });\n\n    // Root path: https://example.com/.well-known/oauth-authorization-server\n    urlsToTry.push({\n        url: new URL('/.well-known/oauth-authorization-server', url.origin),\n        type: 'oauth'\n    });\n\n    // 3. OIDC metadata endpoints\n    // RFC 8414 style: Insert /.well-known/openid-configuration before the path\n    urlsToTry.push({\n        url: new URL(`/.well-known/openid-configuration${pathname}`, url.origin),\n        type: 'oidc'\n    });\n    // OIDC Discovery 1.0 style: Append /.well-known/openid-configuration after the path\n    urlsToTry.push({\n        url: new URL(`${pathname}/.well-known/openid-configuration`, url.origin),\n        type: 'oidc'\n    });\n\n    return urlsToTry;\n}\n\n/**\n * Discovers authorization server metadata with support for RFC 8414 OAuth 2.0 Authorization Server Metadata\n * and OpenID Connect Discovery 1.0 specifications.\n *\n * This function implements a fallback strategy for authorization server discovery:\n * 1. Attempts RFC 8414 OAuth metadata discovery first\n * 2. If OAuth discovery fails, falls back to OpenID Connect Discovery\n *\n * @param authorizationServerUrl - The authorization server URL obtained from the MCP Server's\n *                                 protected resource metadata, or the MCP server's URL if the\n *                                 metadata was not found.\n * @param options - Configuration options\n * @param options.fetchFn - Optional fetch function for making HTTP requests, defaults to global fetch\n * @param options.protocolVersion - MCP protocol version to use, defaults to LATEST_PROTOCOL_VERSION\n * @returns Promise resolving to authorization server metadata, or undefined if discovery fails\n */\nexport async function discoverAuthorizationServerMetadata(\n    authorizationServerUrl: string | URL,\n    {\n        fetchFn = fetch,\n        protocolVersion = LATEST_PROTOCOL_VERSION\n    }: {\n        fetchFn?: FetchLike;\n        protocolVersion?: string;\n    } = {}\n): Promise<AuthorizationServerMetadata | undefined> {\n    const headers = { 'MCP-Protocol-Version': protocolVersion };\n\n    // Get the list of URLs to try\n    const urlsToTry = buildDiscoveryUrls(authorizationServerUrl);\n\n    // Try each URL in order\n    for (const { url: endpointUrl, type } of urlsToTry) {\n        const response = await fetchWithCorsRetry(endpointUrl, headers, fetchFn);\n\n        if (!response) {\n            /**\n             * CORS error occurred - don't throw as the endpoint may not allow CORS,\n             * continue trying other possible endpoints\n             */\n            continue;\n        }\n\n        if (!response.ok) {\n            // Continue looking for any 4xx response code.\n            if (response.status >= 400 && response.status < 500) {\n                continue; // Try next URL\n            }\n            throw new Error(\n                `HTTP ${response.status} trying to load ${type === 'oauth' ? 'OAuth' : 'OpenID provider'} metadata from ${endpointUrl}`\n            );\n        }\n\n        // Parse and validate based on type\n        if (type === 'oauth') {\n            return OAuthMetadataSchema.parse(await response.json());\n        } else {\n            const metadata = OpenIdProviderDiscoveryMetadataSchema.parse(await response.json());\n\n            // MCP spec requires OIDC providers to support S256 PKCE\n            if (!metadata.code_challenge_methods_supported?.includes('S256')) {\n                throw new Error(\n                    `Incompatible OIDC provider at ${endpointUrl}: does not support S256 code challenge method required by MCP specification`\n                );\n            }\n\n            return metadata;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Begins the authorization flow with the given server, by generating a PKCE challenge and constructing the authorization URL.\n */\nexport async function startAuthorization(\n    authorizationServerUrl: string | URL,\n    {\n        metadata,\n        clientInformation,\n        redirectUrl,\n        scope,\n        state,\n        resource\n    }: {\n        metadata?: AuthorizationServerMetadata;\n        clientInformation: OAuthClientInformation;\n        redirectUrl: string | URL;\n        scope?: string;\n        state?: string;\n        resource?: URL;\n    }\n): Promise<{ authorizationUrl: URL; codeVerifier: string }> {\n    const responseType = 'code';\n    const codeChallengeMethod = 'S256';\n\n    let authorizationUrl: URL;\n    if (metadata) {\n        authorizationUrl = new URL(metadata.authorization_endpoint);\n\n        if (!metadata.response_types_supported.includes(responseType)) {\n            throw new Error(`Incompatible auth server: does not support response type ${responseType}`);\n        }\n\n        if (!metadata.code_challenge_methods_supported || !metadata.code_challenge_methods_supported.includes(codeChallengeMethod)) {\n            throw new Error(`Incompatible auth server: does not support code challenge method ${codeChallengeMethod}`);\n        }\n    } else {\n        authorizationUrl = new URL('/authorize', authorizationServerUrl);\n    }\n\n    // Generate PKCE challenge\n    const challenge = await pkceChallenge();\n    const codeVerifier = challenge.code_verifier;\n    const codeChallenge = challenge.code_challenge;\n\n    authorizationUrl.searchParams.set('response_type', responseType);\n    authorizationUrl.searchParams.set('client_id', clientInformation.client_id);\n    authorizationUrl.searchParams.set('code_challenge', codeChallenge);\n    authorizationUrl.searchParams.set('code_challenge_method', codeChallengeMethod);\n    authorizationUrl.searchParams.set('redirect_uri', String(redirectUrl));\n\n    if (state) {\n        authorizationUrl.searchParams.set('state', state);\n    }\n\n    if (scope) {\n        authorizationUrl.searchParams.set('scope', scope);\n    }\n\n    if (scope?.includes('offline_access')) {\n        // if the request includes the OIDC-only \"offline_access\" scope,\n        // we need to set the prompt to \"consent\" to ensure the user is prompted to grant offline access\n        // https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess\n        authorizationUrl.searchParams.append('prompt', 'consent');\n    }\n\n    if (resource) {\n        authorizationUrl.searchParams.set('resource', resource.href);\n    }\n\n    return { authorizationUrl, codeVerifier };\n}\n\n/**\n * Exchanges an authorization code for an access token with the given server.\n *\n * Supports multiple client authentication methods as specified in OAuth 2.1:\n * - Automatically selects the best authentication method based on server support\n * - Falls back to appropriate defaults when server metadata is unavailable\n *\n * @param authorizationServerUrl - The authorization server's base URL\n * @param options - Configuration object containing client info, auth code, etc.\n * @returns Promise resolving to OAuth tokens\n * @throws {Error} When token exchange fails or authentication is invalid\n */\nexport async function exchangeAuthorization(\n    authorizationServerUrl: string | URL,\n    {\n        metadata,\n        clientInformation,\n        authorizationCode,\n        codeVerifier,\n        redirectUri,\n        resource,\n        addClientAuthentication,\n        fetchFn\n    }: {\n        metadata?: AuthorizationServerMetadata;\n        clientInformation: OAuthClientInformation;\n        authorizationCode: string;\n        codeVerifier: string;\n        redirectUri: string | URL;\n        resource?: URL;\n        addClientAuthentication?: OAuthClientProvider['addClientAuthentication'];\n        fetchFn?: FetchLike;\n    }\n): Promise<OAuthTokens> {\n    const grantType = 'authorization_code';\n\n    const tokenUrl = metadata?.token_endpoint ? new URL(metadata.token_endpoint) : new URL('/token', authorizationServerUrl);\n\n    if (metadata?.grant_types_supported && !metadata.grant_types_supported.includes(grantType)) {\n        throw new Error(`Incompatible auth server: does not support grant type ${grantType}`);\n    }\n\n    // Exchange code for tokens\n    const headers = new Headers({\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json'\n    });\n    const params = new URLSearchParams({\n        grant_type: grantType,\n        code: authorizationCode,\n        code_verifier: codeVerifier,\n        redirect_uri: String(redirectUri)\n    });\n\n    if (addClientAuthentication) {\n        addClientAuthentication(headers, params, authorizationServerUrl, metadata);\n    } else {\n        // Determine and apply client authentication method\n        const supportedMethods = metadata?.token_endpoint_auth_methods_supported ?? [];\n        const authMethod = selectClientAuthMethod(clientInformation, supportedMethods);\n\n        applyClientAuthentication(authMethod, clientInformation, headers, params);\n    }\n\n    if (resource) {\n        params.set('resource', resource.href);\n    }\n\n    const response = await (fetchFn ?? fetch)(tokenUrl, {\n        method: 'POST',\n        headers,\n        body: params\n    });\n\n    if (!response.ok) {\n        throw await parseErrorResponse(response);\n    }\n\n    return OAuthTokensSchema.parse(await response.json());\n}\n\n/**\n * Exchange a refresh token for an updated access token.\n *\n * Supports multiple client authentication methods as specified in OAuth 2.1:\n * - Automatically selects the best authentication method based on server support\n * - Preserves the original refresh token if a new one is not returned\n *\n * @param authorizationServerUrl - The authorization server's base URL\n * @param options - Configuration object containing client info, refresh token, etc.\n * @returns Promise resolving to OAuth tokens (preserves original refresh_token if not replaced)\n * @throws {Error} When token refresh fails or authentication is invalid\n */\nexport async function refreshAuthorization(\n    authorizationServerUrl: string | URL,\n    {\n        metadata,\n        clientInformation,\n        refreshToken,\n        resource,\n        addClientAuthentication,\n        fetchFn\n    }: {\n        metadata?: AuthorizationServerMetadata;\n        clientInformation: OAuthClientInformation;\n        refreshToken: string;\n        resource?: URL;\n        addClientAuthentication?: OAuthClientProvider['addClientAuthentication'];\n        fetchFn?: FetchLike;\n    }\n): Promise<OAuthTokens> {\n    const grantType = 'refresh_token';\n\n    let tokenUrl: URL;\n    if (metadata) {\n        tokenUrl = new URL(metadata.token_endpoint);\n\n        if (metadata.grant_types_supported && !metadata.grant_types_supported.includes(grantType)) {\n            throw new Error(`Incompatible auth server: does not support grant type ${grantType}`);\n        }\n    } else {\n        tokenUrl = new URL('/token', authorizationServerUrl);\n    }\n\n    // Exchange refresh token\n    const headers = new Headers({\n        'Content-Type': 'application/x-www-form-urlencoded'\n    });\n    const params = new URLSearchParams({\n        grant_type: grantType,\n        refresh_token: refreshToken\n    });\n\n    if (addClientAuthentication) {\n        addClientAuthentication(headers, params, authorizationServerUrl, metadata);\n    } else {\n        // Determine and apply client authentication method\n        const supportedMethods = metadata?.token_endpoint_auth_methods_supported ?? [];\n        const authMethod = selectClientAuthMethod(clientInformation, supportedMethods);\n\n        applyClientAuthentication(authMethod, clientInformation, headers, params);\n    }\n\n    if (resource) {\n        params.set('resource', resource.href);\n    }\n\n    const response = await (fetchFn ?? fetch)(tokenUrl, {\n        method: 'POST',\n        headers,\n        body: params\n    });\n    if (!response.ok) {\n        throw await parseErrorResponse(response);\n    }\n\n    return OAuthTokensSchema.parse({ refresh_token: refreshToken, ...(await response.json()) });\n}\n\n/**\n * Performs OAuth 2.0 Dynamic Client Registration according to RFC 7591.\n */\nexport async function registerClient(\n    authorizationServerUrl: string | URL,\n    {\n        metadata,\n        clientMetadata,\n        fetchFn\n    }: {\n        metadata?: AuthorizationServerMetadata;\n        clientMetadata: OAuthClientMetadata;\n        fetchFn?: FetchLike;\n    }\n): Promise<OAuthClientInformationFull> {\n    let registrationUrl: URL;\n\n    if (metadata) {\n        if (!metadata.registration_endpoint) {\n            throw new Error('Incompatible auth server: does not support dynamic client registration');\n        }\n\n        registrationUrl = new URL(metadata.registration_endpoint);\n    } else {\n        registrationUrl = new URL('/register', authorizationServerUrl);\n    }\n\n    const response = await (fetchFn ?? fetch)(registrationUrl, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(clientMetadata)\n    });\n\n    if (!response.ok) {\n        throw await parseErrorResponse(response);\n    }\n\n    return OAuthClientInformationFullSchema.parse(await response.json());\n}\n","var __defProp = Object.defineProperty, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __publicField = (obj, key, value) => __defNormalProp(obj, typeof key != \"symbol\" ? key + \"\" : key, value);\nclass ParseError extends Error {\n  constructor(message, options) {\n    super(message), __publicField(this, \"type\"), __publicField(this, \"field\"), __publicField(this, \"value\"), __publicField(this, \"line\"), this.name = \"ParseError\", this.type = options.type, this.field = options.field, this.value = options.value, this.line = options.line;\n  }\n}\nfunction noop(_arg) {\n}\nfunction createParser(callbacks) {\n  const { onEvent = noop, onError = noop, onRetry = noop, onComment } = callbacks;\n  let incompleteLine = \"\", isFirstChunk = !0, id, data = \"\", eventType = \"\";\n  function feed(newChunk) {\n    const chunk = isFirstChunk ? newChunk.replace(/^\\xEF\\xBB\\xBF/, \"\") : newChunk, [complete, incomplete] = splitLines(`${incompleteLine}${chunk}`);\n    for (const line of complete)\n      parseLine(line);\n    incompleteLine = incomplete, isFirstChunk = !1;\n  }\n  function parseLine(line) {\n    if (line === \"\") {\n      dispatchEvent();\n      return;\n    }\n    if (line.startsWith(\":\")) {\n      onComment && onComment(line.slice(line.startsWith(\": \") ? 2 : 1));\n      return;\n    }\n    const fieldSeparatorIndex = line.indexOf(\":\");\n    if (fieldSeparatorIndex !== -1) {\n      const field = line.slice(0, fieldSeparatorIndex), offset = line[fieldSeparatorIndex + 1] === \" \" ? 2 : 1, value = line.slice(fieldSeparatorIndex + offset);\n      processField(field, value, line);\n      return;\n    }\n    processField(line, \"\", line);\n  }\n  function processField(field, value, line) {\n    switch (field) {\n      case \"event\":\n        eventType = value;\n        break;\n      case \"data\":\n        data = `${data}${value}\n`;\n        break;\n      case \"id\":\n        id = value.includes(\"\\0\") ? void 0 : value;\n        break;\n      case \"retry\":\n        /^\\d+$/.test(value) ? onRetry(parseInt(value, 10)) : onError(\n          new ParseError(`Invalid \\`retry\\` value: \"${value}\"`, {\n            type: \"invalid-retry\",\n            value,\n            line\n          })\n        );\n        break;\n      default:\n        onError(\n          new ParseError(\n            `Unknown field \"${field.length > 20 ? `${field.slice(0, 20)}\\u2026` : field}\"`,\n            { type: \"unknown-field\", field, value, line }\n          )\n        );\n        break;\n    }\n  }\n  function dispatchEvent() {\n    data.length > 0 && onEvent({\n      id,\n      event: eventType || void 0,\n      // If the data buffer's last character is a U+000A LINE FEED (LF) character,\n      // then remove the last character from the data buffer.\n      data: data.endsWith(`\n`) ? data.slice(0, -1) : data\n    }), id = void 0, data = \"\", eventType = \"\";\n  }\n  function reset(options = {}) {\n    incompleteLine && options.consume && parseLine(incompleteLine), id = void 0, data = \"\", eventType = \"\", incompleteLine = \"\";\n  }\n  return { feed, reset };\n}\nfunction splitLines(chunk) {\n  const lines = [];\n  let incompleteLine = \"\";\n  const totalLength = chunk.length;\n  for (let i = 0; i < totalLength; i++) {\n    const char = chunk[i];\n    char === \"\\r\" && chunk[i + 1] === `\n` ? (lines.push(incompleteLine), incompleteLine = \"\", i++) : char === \"\\r\" || char === `\n` ? (lines.push(incompleteLine), incompleteLine = \"\") : incompleteLine += char;\n  }\n  return [lines, incompleteLine];\n}\nexport {\n  ParseError,\n  createParser\n};\n//# sourceMappingURL=index.js.map\n","import { createParser } from \"./index.js\";\nimport { ParseError } from \"./index.js\";\nclass EventSourceParserStream extends TransformStream {\n  constructor({ onError, onRetry, onComment } = {}) {\n    let parser;\n    super({\n      start(controller) {\n        parser = createParser({\n          onEvent: (event) => {\n            controller.enqueue(event);\n          },\n          onError(error) {\n            onError === \"terminate\" ? controller.error(error) : typeof onError == \"function\" && onError(error);\n          },\n          onRetry,\n          onComment\n        });\n      },\n      transform(chunk) {\n        parser.feed(chunk);\n      }\n    });\n  }\n}\nexport {\n  EventSourceParserStream,\n  ParseError\n};\n//# sourceMappingURL=stream.js.map\n","import { Transport, FetchLike } from '../shared/transport.js';\nimport { isInitializedNotification, isJSONRPCRequest, isJSONRPCResponse, JSONRPCMessage, JSONRPCMessageSchema } from '../types.js';\nimport { auth, AuthResult, extractResourceMetadataUrl, OAuthClientProvider, UnauthorizedError } from './auth.js';\nimport { EventSourceParserStream } from 'eventsource-parser/stream';\n\n// Default reconnection options for StreamableHTTP connections\nconst DEFAULT_STREAMABLE_HTTP_RECONNECTION_OPTIONS: StreamableHTTPReconnectionOptions = {\n    initialReconnectionDelay: 1000,\n    maxReconnectionDelay: 30000,\n    reconnectionDelayGrowFactor: 1.5,\n    maxRetries: 2\n};\n\nexport class StreamableHTTPError extends Error {\n    constructor(\n        public readonly code: number | undefined,\n        message: string | undefined\n    ) {\n        super(`Streamable HTTP error: ${message}`);\n    }\n}\n\n/**\n * Options for starting or authenticating an SSE connection\n */\nexport interface StartSSEOptions {\n    /**\n     * The resumption token used to continue long-running requests that were interrupted.\n     *\n     * This allows clients to reconnect and continue from where they left off.\n     */\n    resumptionToken?: string;\n\n    /**\n     * A callback that is invoked when the resumption token changes.\n     *\n     * This allows clients to persist the latest token for potential reconnection.\n     */\n    onresumptiontoken?: (token: string) => void;\n\n    /**\n     * Override Message ID to associate with the replay message\n     * so that response can be associate with the new resumed request.\n     */\n    replayMessageId?: string | number;\n}\n\n/**\n * Configuration options for reconnection behavior of the StreamableHTTPClientTransport.\n */\nexport interface StreamableHTTPReconnectionOptions {\n    /**\n     * Maximum backoff time between reconnection attempts in milliseconds.\n     * Default is 30000 (30 seconds).\n     */\n    maxReconnectionDelay: number;\n\n    /**\n     * Initial backoff time between reconnection attempts in milliseconds.\n     * Default is 1000 (1 second).\n     */\n    initialReconnectionDelay: number;\n\n    /**\n     * The factor by which the reconnection delay increases after each attempt.\n     * Default is 1.5.\n     */\n    reconnectionDelayGrowFactor: number;\n\n    /**\n     * Maximum number of reconnection attempts before giving up.\n     * Default is 2.\n     */\n    maxRetries: number;\n}\n\n/**\n * Configuration options for the `StreamableHTTPClientTransport`.\n */\nexport type StreamableHTTPClientTransportOptions = {\n    /**\n     * An OAuth client provider to use for authentication.\n     *\n     * When an `authProvider` is specified and the connection is started:\n     * 1. The connection is attempted with any existing access token from the `authProvider`.\n     * 2. If the access token has expired, the `authProvider` is used to refresh the token.\n     * 3. If token refresh fails or no access token exists, and auth is required, `OAuthClientProvider.redirectToAuthorization` is called, and an `UnauthorizedError` will be thrown from `connect`/`start`.\n     *\n     * After the user has finished authorizing via their user agent, and is redirected back to the MCP client application, call `StreamableHTTPClientTransport.finishAuth` with the authorization code before retrying the connection.\n     *\n     * If an `authProvider` is not provided, and auth is required, an `UnauthorizedError` will be thrown.\n     *\n     * `UnauthorizedError` might also be thrown when sending any message over the transport, indicating that the session has expired, and needs to be re-authed and reconnected.\n     */\n    authProvider?: OAuthClientProvider;\n\n    /**\n     * Customizes HTTP requests to the server.\n     */\n    requestInit?: RequestInit;\n\n    /**\n     * Custom fetch implementation used for all network requests.\n     */\n    fetch?: FetchLike;\n\n    /**\n     * Options to configure the reconnection behavior.\n     */\n    reconnectionOptions?: StreamableHTTPReconnectionOptions;\n\n    /**\n     * Session ID for the connection. This is used to identify the session on the server.\n     * When not provided and connecting to a server that supports session IDs, the server will generate a new session ID.\n     */\n    sessionId?: string;\n};\n\n/**\n * Client transport for Streamable HTTP: this implements the MCP Streamable HTTP transport specification.\n * It will connect to a server using HTTP POST for sending messages and HTTP GET with Server-Sent Events\n * for receiving messages.\n */\nexport class StreamableHTTPClientTransport implements Transport {\n    private _abortController?: AbortController;\n    private _url: URL;\n    private _resourceMetadataUrl?: URL;\n    private _requestInit?: RequestInit;\n    private _authProvider?: OAuthClientProvider;\n    private _fetch?: FetchLike;\n    private _sessionId?: string;\n    private _reconnectionOptions: StreamableHTTPReconnectionOptions;\n    private _protocolVersion?: string;\n    private _hasCompletedAuthFlow = false; // Circuit breaker: detect auth success followed by immediate 401\n\n    onclose?: () => void;\n    onerror?: (error: Error) => void;\n    onmessage?: (message: JSONRPCMessage) => void;\n\n    constructor(url: URL, opts?: StreamableHTTPClientTransportOptions) {\n        this._url = url;\n        this._resourceMetadataUrl = undefined;\n        this._requestInit = opts?.requestInit;\n        this._authProvider = opts?.authProvider;\n        this._fetch = opts?.fetch;\n        this._sessionId = opts?.sessionId;\n        this._reconnectionOptions = opts?.reconnectionOptions ?? DEFAULT_STREAMABLE_HTTP_RECONNECTION_OPTIONS;\n    }\n\n    private async _authThenStart(): Promise<void> {\n        if (!this._authProvider) {\n            throw new UnauthorizedError('No auth provider');\n        }\n\n        let result: AuthResult;\n        try {\n            result = await auth(this._authProvider, {\n                serverUrl: this._url,\n                resourceMetadataUrl: this._resourceMetadataUrl,\n                fetchFn: this._fetch\n            });\n        } catch (error) {\n            this.onerror?.(error as Error);\n            throw error;\n        }\n\n        if (result !== 'AUTHORIZED') {\n            throw new UnauthorizedError();\n        }\n\n        return await this._startOrAuthSse({ resumptionToken: undefined });\n    }\n\n    private async _commonHeaders(): Promise<Headers> {\n        const headers: HeadersInit & Record<string, string> = {};\n        if (this._authProvider) {\n            const tokens = await this._authProvider.tokens();\n            if (tokens) {\n                headers['Authorization'] = `Bearer ${tokens.access_token}`;\n            }\n        }\n\n        if (this._sessionId) {\n            headers['mcp-session-id'] = this._sessionId;\n        }\n        if (this._protocolVersion) {\n            headers['mcp-protocol-version'] = this._protocolVersion;\n        }\n\n        const extraHeaders = this._normalizeHeaders(this._requestInit?.headers);\n\n        return new Headers({\n            ...headers,\n            ...extraHeaders\n        });\n    }\n\n    private async _startOrAuthSse(options: StartSSEOptions): Promise<void> {\n        const { resumptionToken } = options;\n        try {\n            // Try to open an initial SSE stream with GET to listen for server messages\n            // This is optional according to the spec - server may not support it\n            const headers = await this._commonHeaders();\n            headers.set('Accept', 'text/event-stream');\n\n            // Include Last-Event-ID header for resumable streams if provided\n            if (resumptionToken) {\n                headers.set('last-event-id', resumptionToken);\n            }\n\n            const response = await (this._fetch ?? fetch)(this._url, {\n                method: 'GET',\n                headers,\n                signal: this._abortController?.signal\n            });\n\n            if (!response.ok) {\n                if (response.status === 401 && this._authProvider) {\n                    // Need to authenticate\n                    return await this._authThenStart();\n                }\n\n                // 405 indicates that the server does not offer an SSE stream at GET endpoint\n                // This is an expected case that should not trigger an error\n                if (response.status === 405) {\n                    return;\n                }\n\n                throw new StreamableHTTPError(response.status, `Failed to open SSE stream: ${response.statusText}`);\n            }\n\n            this._handleSseStream(response.body, options, true);\n        } catch (error) {\n            this.onerror?.(error as Error);\n            throw error;\n        }\n    }\n\n    /**\n     * Calculates the next reconnection delay using  backoff algorithm\n     *\n     * @param attempt Current reconnection attempt count for the specific stream\n     * @returns Time to wait in milliseconds before next reconnection attempt\n     */\n    private _getNextReconnectionDelay(attempt: number): number {\n        // Access default values directly, ensuring they're never undefined\n        const initialDelay = this._reconnectionOptions.initialReconnectionDelay;\n        const growFactor = this._reconnectionOptions.reconnectionDelayGrowFactor;\n        const maxDelay = this._reconnectionOptions.maxReconnectionDelay;\n\n        // Cap at maximum delay\n        return Math.min(initialDelay * Math.pow(growFactor, attempt), maxDelay);\n    }\n\n    private _normalizeHeaders(headers: HeadersInit | undefined): Record<string, string> {\n        if (!headers) return {};\n\n        if (headers instanceof Headers) {\n            return Object.fromEntries(headers.entries());\n        }\n\n        if (Array.isArray(headers)) {\n            return Object.fromEntries(headers);\n        }\n\n        return { ...(headers as Record<string, string>) };\n    }\n\n    /**\n     * Schedule a reconnection attempt with exponential backoff\n     *\n     * @param lastEventId The ID of the last received event for resumability\n     * @param attemptCount Current reconnection attempt count for this specific stream\n     */\n    private _scheduleReconnection(options: StartSSEOptions, attemptCount = 0): void {\n        // Use provided options or default options\n        const maxRetries = this._reconnectionOptions.maxRetries;\n\n        // Check if we've exceeded maximum retry attempts\n        if (maxRetries > 0 && attemptCount >= maxRetries) {\n            this.onerror?.(new Error(`Maximum reconnection attempts (${maxRetries}) exceeded.`));\n            return;\n        }\n\n        // Calculate next delay based on current attempt count\n        const delay = this._getNextReconnectionDelay(attemptCount);\n\n        // Schedule the reconnection\n        setTimeout(() => {\n            // Use the last event ID to resume where we left off\n            this._startOrAuthSse(options).catch(error => {\n                this.onerror?.(new Error(`Failed to reconnect SSE stream: ${error instanceof Error ? error.message : String(error)}`));\n                // Schedule another attempt if this one failed, incrementing the attempt counter\n                this._scheduleReconnection(options, attemptCount + 1);\n            });\n        }, delay);\n    }\n\n    private _handleSseStream(stream: ReadableStream<Uint8Array> | null, options: StartSSEOptions, isReconnectable: boolean): void {\n        if (!stream) {\n            return;\n        }\n        const { onresumptiontoken, replayMessageId } = options;\n\n        let lastEventId: string | undefined;\n        const processStream = async () => {\n            // this is the closest we can get to trying to catch network errors\n            // if something happens reader will throw\n            try {\n                // Create a pipeline: binary stream -> text decoder -> SSE parser\n                const reader = stream.pipeThrough(new TextDecoderStream()).pipeThrough(new EventSourceParserStream()).getReader();\n\n                while (true) {\n                    const { value: event, done } = await reader.read();\n                    if (done) {\n                        break;\n                    }\n\n                    // Update last event ID if provided\n                    if (event.id) {\n                        lastEventId = event.id;\n                        onresumptiontoken?.(event.id);\n                    }\n\n                    if (!event.event || event.event === 'message') {\n                        try {\n                            const message = JSONRPCMessageSchema.parse(JSON.parse(event.data));\n                            if (replayMessageId !== undefined && isJSONRPCResponse(message)) {\n                                message.id = replayMessageId;\n                            }\n                            this.onmessage?.(message);\n                        } catch (error) {\n                            this.onerror?.(error as Error);\n                        }\n                    }\n                }\n            } catch (error) {\n                // Handle stream errors - likely a network disconnect\n                this.onerror?.(new Error(`SSE stream disconnected: ${error}`));\n\n                // Attempt to reconnect if the stream disconnects unexpectedly and we aren't closing\n                if (isReconnectable && this._abortController && !this._abortController.signal.aborted) {\n                    // Use the exponential backoff reconnection strategy\n                    try {\n                        this._scheduleReconnection(\n                            {\n                                resumptionToken: lastEventId,\n                                onresumptiontoken,\n                                replayMessageId\n                            },\n                            0\n                        );\n                    } catch (error) {\n                        this.onerror?.(new Error(`Failed to reconnect: ${error instanceof Error ? error.message : String(error)}`));\n                    }\n                }\n            }\n        };\n        processStream();\n    }\n\n    async start() {\n        if (this._abortController) {\n            throw new Error(\n                'StreamableHTTPClientTransport already started! If using Client class, note that connect() calls start() automatically.'\n            );\n        }\n\n        this._abortController = new AbortController();\n    }\n\n    /**\n     * Call this method after the user has finished authorizing via their user agent and is redirected back to the MCP client application. This will exchange the authorization code for an access token, enabling the next connection attempt to successfully auth.\n     */\n    async finishAuth(authorizationCode: string): Promise<void> {\n        if (!this._authProvider) {\n            throw new UnauthorizedError('No auth provider');\n        }\n\n        const result = await auth(this._authProvider, {\n            serverUrl: this._url,\n            authorizationCode,\n            resourceMetadataUrl: this._resourceMetadataUrl,\n            fetchFn: this._fetch\n        });\n        if (result !== 'AUTHORIZED') {\n            throw new UnauthorizedError('Failed to authorize');\n        }\n    }\n\n    async close(): Promise<void> {\n        // Abort any pending requests\n        this._abortController?.abort();\n\n        this.onclose?.();\n    }\n\n    async send(\n        message: JSONRPCMessage | JSONRPCMessage[],\n        options?: { resumptionToken?: string; onresumptiontoken?: (token: string) => void }\n    ): Promise<void> {\n        try {\n            const { resumptionToken, onresumptiontoken } = options || {};\n\n            if (resumptionToken) {\n                // If we have at last event ID, we need to reconnect the SSE stream\n                this._startOrAuthSse({ resumptionToken, replayMessageId: isJSONRPCRequest(message) ? message.id : undefined }).catch(err =>\n                    this.onerror?.(err)\n                );\n                return;\n            }\n\n            const headers = await this._commonHeaders();\n            headers.set('content-type', 'application/json');\n            headers.set('accept', 'application/json, text/event-stream');\n\n            const init = {\n                ...this._requestInit,\n                method: 'POST',\n                headers,\n                body: JSON.stringify(message),\n                signal: this._abortController?.signal\n            };\n\n            const response = await (this._fetch ?? fetch)(this._url, init);\n\n            // Handle session ID received during initialization\n            const sessionId = response.headers.get('mcp-session-id');\n            if (sessionId) {\n                this._sessionId = sessionId;\n            }\n\n            if (!response.ok) {\n                if (response.status === 401 && this._authProvider) {\n                    // Prevent infinite recursion when server returns 401 after successful auth\n                    if (this._hasCompletedAuthFlow) {\n                        throw new StreamableHTTPError(401, 'Server returned 401 after successful authentication');\n                    }\n\n                    this._resourceMetadataUrl = extractResourceMetadataUrl(response);\n\n                    const result = await auth(this._authProvider, {\n                        serverUrl: this._url,\n                        resourceMetadataUrl: this._resourceMetadataUrl,\n                        fetchFn: this._fetch\n                    });\n                    if (result !== 'AUTHORIZED') {\n                        throw new UnauthorizedError();\n                    }\n\n                    // Mark that we completed auth flow\n                    this._hasCompletedAuthFlow = true;\n                    // Purposely _not_ awaited, so we don't call onerror twice\n                    return this.send(message);\n                }\n\n                const text = await response.text().catch(() => null);\n                throw new Error(`Error POSTing to endpoint (HTTP ${response.status}): ${text}`);\n            }\n\n            // Reset auth loop flag on successful response\n            this._hasCompletedAuthFlow = false;\n\n            // If the response is 202 Accepted, there's no body to process\n            if (response.status === 202) {\n                // if the accepted notification is initialized, we start the SSE stream\n                // if it's supported by the server\n                if (isInitializedNotification(message)) {\n                    // Start without a lastEventId since this is a fresh connection\n                    this._startOrAuthSse({ resumptionToken: undefined }).catch(err => this.onerror?.(err));\n                }\n                return;\n            }\n\n            // Get original message(s) for detecting request IDs\n            const messages = Array.isArray(message) ? message : [message];\n\n            const hasRequests = messages.filter(msg => 'method' in msg && 'id' in msg && msg.id !== undefined).length > 0;\n\n            // Check the response type\n            const contentType = response.headers.get('content-type');\n\n            if (hasRequests) {\n                if (contentType?.includes('text/event-stream')) {\n                    // Handle SSE stream responses for requests\n                    // We use the same handler as standalone streams, which now supports\n                    // reconnection with the last event ID\n                    this._handleSseStream(response.body, { onresumptiontoken }, false);\n                } else if (contentType?.includes('application/json')) {\n                    // For non-streaming servers, we might get direct JSON responses\n                    const data = await response.json();\n                    const responseMessages = Array.isArray(data)\n                        ? data.map(msg => JSONRPCMessageSchema.parse(msg))\n                        : [JSONRPCMessageSchema.parse(data)];\n\n                    for (const msg of responseMessages) {\n                        this.onmessage?.(msg);\n                    }\n                } else {\n                    throw new StreamableHTTPError(-1, `Unexpected content type: ${contentType}`);\n                }\n            }\n        } catch (error) {\n            this.onerror?.(error as Error);\n            throw error;\n        }\n    }\n\n    get sessionId(): string | undefined {\n        return this._sessionId;\n    }\n\n    /**\n     * Terminates the current session by sending a DELETE request to the server.\n     *\n     * Clients that no longer need a particular session\n     * (e.g., because the user is leaving the client application) SHOULD send an\n     * HTTP DELETE to the MCP endpoint with the Mcp-Session-Id header to explicitly\n     * terminate the session.\n     *\n     * The server MAY respond with HTTP 405 Method Not Allowed, indicating that\n     * the server does not allow clients to terminate sessions.\n     */\n    async terminateSession(): Promise<void> {\n        if (!this._sessionId) {\n            return; // No session to terminate\n        }\n\n        try {\n            const headers = await this._commonHeaders();\n\n            const init = {\n                ...this._requestInit,\n                method: 'DELETE',\n                headers,\n                signal: this._abortController?.signal\n            };\n\n            const response = await (this._fetch ?? fetch)(this._url, init);\n\n            // We specifically handle 405 as a valid response according to the spec,\n            // meaning the server does not support explicit session termination\n            if (!response.ok && response.status !== 405) {\n                throw new StreamableHTTPError(response.status, `Failed to terminate session: ${response.statusText}`);\n            }\n\n            this._sessionId = undefined;\n        } catch (error) {\n            this.onerror?.(error as Error);\n            throw error;\n        }\n    }\n\n    setProtocolVersion(version: string): void {\n        this._protocolVersion = version;\n    }\n    get protocolVersion(): string | undefined {\n        return this._protocolVersion;\n    }\n}\n","import { Transport } from './shared/transport.js';\nimport { JSONRPCMessage, RequestId } from './types.js';\nimport { AuthInfo } from './server/auth/types.js';\n\ninterface QueuedMessage {\n    message: JSONRPCMessage;\n    extra?: { authInfo?: AuthInfo };\n}\n\n/**\n * In-memory transport for creating clients and servers that talk to each other within the same process.\n */\nexport class InMemoryTransport implements Transport {\n    private _otherTransport?: InMemoryTransport;\n    private _messageQueue: QueuedMessage[] = [];\n\n    onclose?: () => void;\n    onerror?: (error: Error) => void;\n    onmessage?: (message: JSONRPCMessage, extra?: { authInfo?: AuthInfo }) => void;\n    sessionId?: string;\n\n    /**\n     * Creates a pair of linked in-memory transports that can communicate with each other. One should be passed to a Client and one to a Server.\n     */\n    static createLinkedPair(): [InMemoryTransport, InMemoryTransport] {\n        const clientTransport = new InMemoryTransport();\n        const serverTransport = new InMemoryTransport();\n        clientTransport._otherTransport = serverTransport;\n        serverTransport._otherTransport = clientTransport;\n        return [clientTransport, serverTransport];\n    }\n\n    async start(): Promise<void> {\n        // Process any messages that were queued before start was called\n        while (this._messageQueue.length > 0) {\n            const queuedMessage = this._messageQueue.shift()!;\n            this.onmessage?.(queuedMessage.message, queuedMessage.extra);\n        }\n    }\n\n    async close(): Promise<void> {\n        const other = this._otherTransport;\n        this._otherTransport = undefined;\n        await other?.close();\n        this.onclose?.();\n    }\n\n    /**\n     * Sends a message with optional auth info.\n     * This is useful for testing authentication scenarios.\n     */\n    async send(message: JSONRPCMessage, options?: { relatedRequestId?: RequestId; authInfo?: AuthInfo }): Promise<void> {\n        if (!this._otherTransport) {\n            throw new Error('Not connected');\n        }\n\n        if (this._otherTransport.onmessage) {\n            this._otherTransport.onmessage(message, { authInfo: options?.authInfo });\n        } else {\n            this._otherTransport._messageQueue.push({ message, extra: { authInfo: options?.authInfo } });\n        }\n    }\n}\n","import { mergeCapabilities, Protocol, ProtocolOptions, RequestOptions } from '../shared/protocol.js';\nimport {\n    ClientCapabilities,\n    CreateMessageRequest,\n    CreateMessageResultSchema,\n    ElicitRequest,\n    ElicitResult,\n    ElicitResultSchema,\n    EmptyResultSchema,\n    Implementation,\n    InitializedNotificationSchema,\n    InitializeRequest,\n    InitializeRequestSchema,\n    InitializeResult,\n    LATEST_PROTOCOL_VERSION,\n    ListRootsRequest,\n    ListRootsResultSchema,\n    LoggingMessageNotification,\n    McpError,\n    ErrorCode,\n    Notification,\n    Request,\n    ResourceUpdatedNotification,\n    Result,\n    ServerCapabilities,\n    ServerNotification,\n    ServerRequest,\n    ServerResult,\n    SUPPORTED_PROTOCOL_VERSIONS,\n    LoggingLevel,\n    SetLevelRequestSchema,\n    LoggingLevelSchema\n} from '../types.js';\nimport Ajv from 'ajv';\n\nexport type ServerOptions = ProtocolOptions & {\n    /**\n     * Capabilities to advertise as being supported by this server.\n     */\n    capabilities?: ServerCapabilities;\n\n    /**\n     * Optional instructions describing how to use the server and its features.\n     */\n    instructions?: string;\n};\n\n/**\n * An MCP server on top of a pluggable transport.\n *\n * This server will automatically respond to the initialization flow as initiated from the client.\n *\n * To use with custom types, extend the base Request/Notification/Result types and pass them as type parameters:\n *\n * ```typescript\n * // Custom schemas\n * const CustomRequestSchema = RequestSchema.extend({...})\n * const CustomNotificationSchema = NotificationSchema.extend({...})\n * const CustomResultSchema = ResultSchema.extend({...})\n *\n * // Type aliases\n * type CustomRequest = z.infer<typeof CustomRequestSchema>\n * type CustomNotification = z.infer<typeof CustomNotificationSchema>\n * type CustomResult = z.infer<typeof CustomResultSchema>\n *\n * // Create typed server\n * const server = new Server<CustomRequest, CustomNotification, CustomResult>({\n *   name: \"CustomServer\",\n *   version: \"1.0.0\"\n * })\n * ```\n */\nexport class Server<\n    RequestT extends Request = Request,\n    NotificationT extends Notification = Notification,\n    ResultT extends Result = Result\n> extends Protocol<ServerRequest | RequestT, ServerNotification | NotificationT, ServerResult | ResultT> {\n    private _clientCapabilities?: ClientCapabilities;\n    private _clientVersion?: Implementation;\n    private _capabilities: ServerCapabilities;\n    private _instructions?: string;\n\n    /**\n     * Callback for when initialization has fully completed (i.e., the client has sent an `initialized` notification).\n     */\n    oninitialized?: () => void;\n\n    /**\n     * Initializes this server with the given name and version information.\n     */\n    constructor(\n        private _serverInfo: Implementation,\n        options?: ServerOptions\n    ) {\n        super(options);\n        this._capabilities = options?.capabilities ?? {};\n        this._instructions = options?.instructions;\n\n        this.setRequestHandler(InitializeRequestSchema, request => this._oninitialize(request));\n        this.setNotificationHandler(InitializedNotificationSchema, () => this.oninitialized?.());\n\n        if (this._capabilities.logging) {\n            this.setRequestHandler(SetLevelRequestSchema, async (request, extra) => {\n                const transportSessionId: string | undefined =\n                    extra.sessionId || (extra.requestInfo?.headers['mcp-session-id'] as string) || undefined;\n                const { level } = request.params;\n                const parseResult = LoggingLevelSchema.safeParse(level);\n                if (parseResult.success) {\n                    this._loggingLevels.set(transportSessionId, parseResult.data);\n                }\n                return {};\n            });\n        }\n    }\n\n    // Map log levels by session id\n    private _loggingLevels = new Map<string | undefined, LoggingLevel>();\n\n    // Map LogLevelSchema to severity index\n    private readonly LOG_LEVEL_SEVERITY = new Map(LoggingLevelSchema.options.map((level, index) => [level, index]));\n\n    // Is a message with the given level ignored in the log level set for the given session id?\n    private isMessageIgnored = (level: LoggingLevel, sessionId?: string): boolean => {\n        const currentLevel = this._loggingLevels.get(sessionId);\n        return currentLevel ? this.LOG_LEVEL_SEVERITY.get(level)! < this.LOG_LEVEL_SEVERITY.get(currentLevel)! : false;\n    };\n\n    /**\n     * Registers new capabilities. This can only be called before connecting to a transport.\n     *\n     * The new capabilities will be merged with any existing capabilities previously given (e.g., at initialization).\n     */\n    public registerCapabilities(capabilities: ServerCapabilities): void {\n        if (this.transport) {\n            throw new Error('Cannot register capabilities after connecting to transport');\n        }\n        this._capabilities = mergeCapabilities(this._capabilities, capabilities);\n    }\n\n    protected assertCapabilityForMethod(method: RequestT['method']): void {\n        switch (method as ServerRequest['method']) {\n            case 'sampling/createMessage':\n                if (!this._clientCapabilities?.sampling) {\n                    throw new Error(`Client does not support sampling (required for ${method})`);\n                }\n                break;\n\n            case 'elicitation/create':\n                if (!this._clientCapabilities?.elicitation) {\n                    throw new Error(`Client does not support elicitation (required for ${method})`);\n                }\n                break;\n\n            case 'roots/list':\n                if (!this._clientCapabilities?.roots) {\n                    throw new Error(`Client does not support listing roots (required for ${method})`);\n                }\n                break;\n\n            case 'ping':\n                // No specific capability required for ping\n                break;\n        }\n    }\n\n    protected assertNotificationCapability(method: (ServerNotification | NotificationT)['method']): void {\n        switch (method as ServerNotification['method']) {\n            case 'notifications/message':\n                if (!this._capabilities.logging) {\n                    throw new Error(`Server does not support logging (required for ${method})`);\n                }\n                break;\n\n            case 'notifications/resources/updated':\n            case 'notifications/resources/list_changed':\n                if (!this._capabilities.resources) {\n                    throw new Error(`Server does not support notifying about resources (required for ${method})`);\n                }\n                break;\n\n            case 'notifications/tools/list_changed':\n                if (!this._capabilities.tools) {\n                    throw new Error(`Server does not support notifying of tool list changes (required for ${method})`);\n                }\n                break;\n\n            case 'notifications/prompts/list_changed':\n                if (!this._capabilities.prompts) {\n                    throw new Error(`Server does not support notifying of prompt list changes (required for ${method})`);\n                }\n                break;\n\n            case 'notifications/cancelled':\n                // Cancellation notifications are always allowed\n                break;\n\n            case 'notifications/progress':\n                // Progress notifications are always allowed\n                break;\n        }\n    }\n\n    protected assertRequestHandlerCapability(method: string): void {\n        switch (method) {\n            case 'sampling/createMessage':\n                if (!this._capabilities.sampling) {\n                    throw new Error(`Server does not support sampling (required for ${method})`);\n                }\n                break;\n\n            case 'logging/setLevel':\n                if (!this._capabilities.logging) {\n                    throw new Error(`Server does not support logging (required for ${method})`);\n                }\n                break;\n\n            case 'prompts/get':\n            case 'prompts/list':\n                if (!this._capabilities.prompts) {\n                    throw new Error(`Server does not support prompts (required for ${method})`);\n                }\n                break;\n\n            case 'resources/list':\n            case 'resources/templates/list':\n            case 'resources/read':\n                if (!this._capabilities.resources) {\n                    throw new Error(`Server does not support resources (required for ${method})`);\n                }\n                break;\n\n            case 'tools/call':\n            case 'tools/list':\n                if (!this._capabilities.tools) {\n                    throw new Error(`Server does not support tools (required for ${method})`);\n                }\n                break;\n\n            case 'ping':\n            case 'initialize':\n                // No specific capability required for these methods\n                break;\n        }\n    }\n\n    private async _oninitialize(request: InitializeRequest): Promise<InitializeResult> {\n        const requestedVersion = request.params.protocolVersion;\n\n        this._clientCapabilities = request.params.capabilities;\n        this._clientVersion = request.params.clientInfo;\n\n        const protocolVersion = SUPPORTED_PROTOCOL_VERSIONS.includes(requestedVersion) ? requestedVersion : LATEST_PROTOCOL_VERSION;\n\n        return {\n            protocolVersion,\n            capabilities: this.getCapabilities(),\n            serverInfo: this._serverInfo,\n            ...(this._instructions && { instructions: this._instructions })\n        };\n    }\n\n    /**\n     * After initialization has completed, this will be populated with the client's reported capabilities.\n     */\n    getClientCapabilities(): ClientCapabilities | undefined {\n        return this._clientCapabilities;\n    }\n\n    /**\n     * After initialization has completed, this will be populated with information about the client's name and version.\n     */\n    getClientVersion(): Implementation | undefined {\n        return this._clientVersion;\n    }\n\n    private getCapabilities(): ServerCapabilities {\n        return this._capabilities;\n    }\n\n    async ping() {\n        return this.request({ method: 'ping' }, EmptyResultSchema);\n    }\n\n    async createMessage(params: CreateMessageRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'sampling/createMessage', params }, CreateMessageResultSchema, options);\n    }\n\n    async elicitInput(params: ElicitRequest['params'], options?: RequestOptions): Promise<ElicitResult> {\n        const result = await this.request({ method: 'elicitation/create', params }, ElicitResultSchema, options);\n\n        // Validate the response content against the requested schema if action is \"accept\"\n        if (result.action === 'accept' && result.content) {\n            try {\n                const ajv = new Ajv();\n\n                const validate = ajv.compile(params.requestedSchema);\n                const isValid = validate(result.content);\n\n                if (!isValid) {\n                    throw new McpError(\n                        ErrorCode.InvalidParams,\n                        `Elicitation response content does not match requested schema: ${ajv.errorsText(validate.errors)}`\n                    );\n                }\n            } catch (error) {\n                if (error instanceof McpError) {\n                    throw error;\n                }\n                throw new McpError(ErrorCode.InternalError, `Error validating elicitation response: ${error}`);\n            }\n        }\n\n        return result;\n    }\n\n    async listRoots(params?: ListRootsRequest['params'], options?: RequestOptions) {\n        return this.request({ method: 'roots/list', params }, ListRootsResultSchema, options);\n    }\n\n    /**\n     * Sends a logging message to the client, if connected.\n     * Note: You only need to send the parameters object, not the entire JSON RPC message\n     * @see LoggingMessageNotification\n     * @param params\n     * @param sessionId optional for stateless and backward compatibility\n     */\n    async sendLoggingMessage(params: LoggingMessageNotification['params'], sessionId?: string) {\n        if (this._capabilities.logging) {\n            if (!this.isMessageIgnored(params.level, sessionId)) {\n                return this.notification({ method: 'notifications/message', params });\n            }\n        }\n    }\n\n    async sendResourceUpdated(params: ResourceUpdatedNotification['params']) {\n        return this.notification({\n            method: 'notifications/resources/updated',\n            params\n        });\n    }\n\n    async sendResourceListChanged() {\n        return this.notification({\n            method: 'notifications/resources/list_changed'\n        });\n    }\n\n    async sendToolListChanged() {\n        return this.notification({ method: 'notifications/tools/list_changed' });\n    }\n\n    async sendPromptListChanged() {\n        return this.notification({ method: 'notifications/prompts/list_changed' });\n    }\n}\n","import { ZodTypeAny, ZodTypeDef, ZodType, ParseInput, ParseReturnType, RawCreateParams, ZodErrorMap, ProcessedCreateParams } from 'zod';\n\nexport enum McpZodTypeKind {\n    Completable = 'McpCompletable'\n}\n\nexport type CompleteCallback<T extends ZodTypeAny = ZodTypeAny> = (\n    value: T['_input'],\n    context?: {\n        arguments?: Record<string, string>;\n    }\n) => T['_input'][] | Promise<T['_input'][]>;\n\nexport interface CompletableDef<T extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {\n    type: T;\n    complete: CompleteCallback<T>;\n    typeName: McpZodTypeKind.Completable;\n}\n\nexport class Completable<T extends ZodTypeAny> extends ZodType<T['_output'], CompletableDef<T>, T['_input']> {\n    _parse(input: ParseInput): ParseReturnType<this['_output']> {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n    }\n\n    unwrap() {\n        return this._def.type;\n    }\n\n    static create = <T extends ZodTypeAny>(\n        type: T,\n        params: RawCreateParams & {\n            complete: CompleteCallback<T>;\n        }\n    ): Completable<T> => {\n        return new Completable({\n            type,\n            typeName: McpZodTypeKind.Completable,\n            complete: params.complete,\n            ...processCreateParams(params)\n        });\n    };\n}\n\n/**\n * Wraps a Zod type to provide autocompletion capabilities. Useful for, e.g., prompt arguments in MCP.\n */\nexport function completable<T extends ZodTypeAny>(schema: T, complete: CompleteCallback<T>): Completable<T> {\n    return Completable.create(schema, { ...schema._def, complete });\n}\n\n// Not sure why this isn't exported from Zod:\n// https://github.com/colinhacks/zod/blob/f7ad26147ba291cb3fb257545972a8e00e767470/src/types.ts#L130\nfunction processCreateParams(params: RawCreateParams): ProcessedCreateParams {\n    if (!params) return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap) return { errorMap: errorMap, description };\n    const customMap: ZodErrorMap = (iss, ctx) => {\n        const { message } = params;\n\n        if (iss.code === 'invalid_enum_value') {\n            return { message: message ?? ctx.defaultError };\n        }\n        if (typeof ctx.data === 'undefined') {\n            return { message: message ?? required_error ?? ctx.defaultError };\n        }\n        if (iss.code !== 'invalid_type') return { message: ctx.defaultError };\n        return { message: message ?? invalid_type_error ?? ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\n","// Claude-authored implementation of RFC 6570 URI Templates\n\nexport type Variables = Record<string, string | string[]>;\n\nconst MAX_TEMPLATE_LENGTH = 1000000; // 1MB\nconst MAX_VARIABLE_LENGTH = 1000000; // 1MB\nconst MAX_TEMPLATE_EXPRESSIONS = 10000;\nconst MAX_REGEX_LENGTH = 1000000; // 1MB\n\nexport class UriTemplate {\n    /**\n     * Returns true if the given string contains any URI template expressions.\n     * A template expression is a sequence of characters enclosed in curly braces,\n     * like {foo} or {?bar}.\n     */\n    static isTemplate(str: string): boolean {\n        // Look for any sequence of characters between curly braces\n        // that isn't just whitespace\n        return /\\{[^}\\s]+\\}/.test(str);\n    }\n\n    private static validateLength(str: string, max: number, context: string): void {\n        if (str.length > max) {\n            throw new Error(`${context} exceeds maximum length of ${max} characters (got ${str.length})`);\n        }\n    }\n    private readonly template: string;\n    private readonly parts: Array<string | { name: string; operator: string; names: string[]; exploded: boolean }>;\n\n    get variableNames(): string[] {\n        return this.parts.flatMap(part => (typeof part === 'string' ? [] : part.names));\n    }\n\n    constructor(template: string) {\n        UriTemplate.validateLength(template, MAX_TEMPLATE_LENGTH, 'Template');\n        this.template = template;\n        this.parts = this.parse(template);\n    }\n\n    toString(): string {\n        return this.template;\n    }\n\n    private parse(template: string): Array<string | { name: string; operator: string; names: string[]; exploded: boolean }> {\n        const parts: Array<string | { name: string; operator: string; names: string[]; exploded: boolean }> = [];\n        let currentText = '';\n        let i = 0;\n        let expressionCount = 0;\n\n        while (i < template.length) {\n            if (template[i] === '{') {\n                if (currentText) {\n                    parts.push(currentText);\n                    currentText = '';\n                }\n                const end = template.indexOf('}', i);\n                if (end === -1) throw new Error('Unclosed template expression');\n\n                expressionCount++;\n                if (expressionCount > MAX_TEMPLATE_EXPRESSIONS) {\n                    throw new Error(`Template contains too many expressions (max ${MAX_TEMPLATE_EXPRESSIONS})`);\n                }\n\n                const expr = template.slice(i + 1, end);\n                const operator = this.getOperator(expr);\n                const exploded = expr.includes('*');\n                const names = this.getNames(expr);\n                const name = names[0];\n\n                // Validate variable name length\n                for (const name of names) {\n                    UriTemplate.validateLength(name, MAX_VARIABLE_LENGTH, 'Variable name');\n                }\n\n                parts.push({ name, operator, names, exploded });\n                i = end + 1;\n            } else {\n                currentText += template[i];\n                i++;\n            }\n        }\n\n        if (currentText) {\n            parts.push(currentText);\n        }\n\n        return parts;\n    }\n\n    private getOperator(expr: string): string {\n        const operators = ['+', '#', '.', '/', '?', '&'];\n        return operators.find(op => expr.startsWith(op)) || '';\n    }\n\n    private getNames(expr: string): string[] {\n        const operator = this.getOperator(expr);\n        return expr\n            .slice(operator.length)\n            .split(',')\n            .map(name => name.replace('*', '').trim())\n            .filter(name => name.length > 0);\n    }\n\n    private encodeValue(value: string, operator: string): string {\n        UriTemplate.validateLength(value, MAX_VARIABLE_LENGTH, 'Variable value');\n        if (operator === '+' || operator === '#') {\n            return encodeURI(value);\n        }\n        return encodeURIComponent(value);\n    }\n\n    private expandPart(\n        part: {\n            name: string;\n            operator: string;\n            names: string[];\n            exploded: boolean;\n        },\n        variables: Variables\n    ): string {\n        if (part.operator === '?' || part.operator === '&') {\n            const pairs = part.names\n                .map(name => {\n                    const value = variables[name];\n                    if (value === undefined) return '';\n                    const encoded = Array.isArray(value)\n                        ? value.map(v => this.encodeValue(v, part.operator)).join(',')\n                        : this.encodeValue(value.toString(), part.operator);\n                    return `${name}=${encoded}`;\n                })\n                .filter(pair => pair.length > 0);\n\n            if (pairs.length === 0) return '';\n            const separator = part.operator === '?' ? '?' : '&';\n            return separator + pairs.join('&');\n        }\n\n        if (part.names.length > 1) {\n            const values = part.names.map(name => variables[name]).filter(v => v !== undefined);\n            if (values.length === 0) return '';\n            return values.map(v => (Array.isArray(v) ? v[0] : v)).join(',');\n        }\n\n        const value = variables[part.name];\n        if (value === undefined) return '';\n\n        const values = Array.isArray(value) ? value : [value];\n        const encoded = values.map(v => this.encodeValue(v, part.operator));\n\n        switch (part.operator) {\n            case '':\n                return encoded.join(',');\n            case '+':\n                return encoded.join(',');\n            case '#':\n                return '#' + encoded.join(',');\n            case '.':\n                return '.' + encoded.join('.');\n            case '/':\n                return '/' + encoded.join('/');\n            default:\n                return encoded.join(',');\n        }\n    }\n\n    expand(variables: Variables): string {\n        let result = '';\n        let hasQueryParam = false;\n\n        for (const part of this.parts) {\n            if (typeof part === 'string') {\n                result += part;\n                continue;\n            }\n\n            const expanded = this.expandPart(part, variables);\n            if (!expanded) continue;\n\n            // Convert ? to & if we already have a query parameter\n            if ((part.operator === '?' || part.operator === '&') && hasQueryParam) {\n                result += expanded.replace('?', '&');\n            } else {\n                result += expanded;\n            }\n\n            if (part.operator === '?' || part.operator === '&') {\n                hasQueryParam = true;\n            }\n        }\n\n        return result;\n    }\n\n    private escapeRegExp(str: string): string {\n        return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    }\n\n    private partToRegExp(part: {\n        name: string;\n        operator: string;\n        names: string[];\n        exploded: boolean;\n    }): Array<{ pattern: string; name: string }> {\n        const patterns: Array<{ pattern: string; name: string }> = [];\n\n        // Validate variable name length for matching\n        for (const name of part.names) {\n            UriTemplate.validateLength(name, MAX_VARIABLE_LENGTH, 'Variable name');\n        }\n\n        if (part.operator === '?' || part.operator === '&') {\n            for (let i = 0; i < part.names.length; i++) {\n                const name = part.names[i];\n                const prefix = i === 0 ? '\\\\' + part.operator : '&';\n                patterns.push({\n                    pattern: prefix + this.escapeRegExp(name) + '=([^&]+)',\n                    name\n                });\n            }\n            return patterns;\n        }\n\n        let pattern: string;\n        const name = part.name;\n\n        switch (part.operator) {\n            case '':\n                pattern = part.exploded ? '([^/]+(?:,[^/]+)*)' : '([^/,]+)';\n                break;\n            case '+':\n            case '#':\n                pattern = '(.+)';\n                break;\n            case '.':\n                pattern = '\\\\.([^/,]+)';\n                break;\n            case '/':\n                pattern = '/' + (part.exploded ? '([^/]+(?:,[^/]+)*)' : '([^/,]+)');\n                break;\n            default:\n                pattern = '([^/]+)';\n        }\n\n        patterns.push({ pattern, name });\n        return patterns;\n    }\n\n    match(uri: string): Variables | null {\n        UriTemplate.validateLength(uri, MAX_TEMPLATE_LENGTH, 'URI');\n        let pattern = '^';\n        const names: Array<{ name: string; exploded: boolean }> = [];\n\n        for (const part of this.parts) {\n            if (typeof part === 'string') {\n                pattern += this.escapeRegExp(part);\n            } else {\n                const patterns = this.partToRegExp(part);\n                for (const { pattern: partPattern, name } of patterns) {\n                    pattern += partPattern;\n                    names.push({ name, exploded: part.exploded });\n                }\n            }\n        }\n\n        pattern += '$';\n        UriTemplate.validateLength(pattern, MAX_REGEX_LENGTH, 'Generated regex pattern');\n        const regex = new RegExp(pattern);\n        const match = uri.match(regex);\n\n        if (!match) return null;\n\n        const result: Variables = {};\n        for (let i = 0; i < names.length; i++) {\n            const { name, exploded } = names[i];\n            const value = match[i + 1];\n            const cleanName = name.replace('*', '');\n\n            if (exploded && value.includes(',')) {\n                result[cleanName] = value.split(',');\n            } else {\n                result[cleanName] = value;\n            }\n        }\n\n        return result;\n    }\n}\n","import { Server, ServerOptions } from './index.js';\nimport { zodToJsonSchema } from 'zod-to-json-schema';\nimport { z, ZodRawShape, ZodObject, ZodString, AnyZodObject, ZodTypeAny, ZodType, ZodTypeDef, ZodOptional } from 'zod';\nimport {\n    Implementation,\n    Tool,\n    ListToolsResult,\n    CallToolResult,\n    McpError,\n    ErrorCode,\n    CompleteRequest,\n    CompleteResult,\n    PromptReference,\n    ResourceTemplateReference,\n    BaseMetadata,\n    Resource,\n    ListResourcesResult,\n    ListResourceTemplatesRequestSchema,\n    ReadResourceRequestSchema,\n    ListToolsRequestSchema,\n    CallToolRequestSchema,\n    ListResourcesRequestSchema,\n    ListPromptsRequestSchema,\n    GetPromptRequestSchema,\n    CompleteRequestSchema,\n    ListPromptsResult,\n    Prompt,\n    PromptArgument,\n    GetPromptResult,\n    ReadResourceResult,\n    ServerRequest,\n    ServerNotification,\n    ToolAnnotations,\n    LoggingMessageNotification\n} from '../types.js';\nimport { Completable, CompletableDef } from './completable.js';\nimport { UriTemplate, Variables } from '../shared/uriTemplate.js';\nimport { RequestHandlerExtra } from '../shared/protocol.js';\nimport { Transport } from '../shared/transport.js';\n\n/**\n * High-level MCP server that provides a simpler API for working with resources, tools, and prompts.\n * For advanced usage (like sending notifications or setting custom request handlers), use the underlying\n * Server instance available via the `server` property.\n */\nexport class McpServer {\n    /**\n     * The underlying Server instance, useful for advanced operations like sending notifications.\n     */\n    public readonly server: Server;\n\n    private _registeredResources: { [uri: string]: RegisteredResource } = {};\n    private _registeredResourceTemplates: {\n        [name: string]: RegisteredResourceTemplate;\n    } = {};\n    private _registeredTools: { [name: string]: RegisteredTool } = {};\n    private _registeredPrompts: { [name: string]: RegisteredPrompt } = {};\n\n    constructor(serverInfo: Implementation, options?: ServerOptions) {\n        this.server = new Server(serverInfo, options);\n    }\n\n    /**\n     * Attaches to the given transport, starts it, and starts listening for messages.\n     *\n     * The `server` object assumes ownership of the Transport, replacing any callbacks that have already been set, and expects that it is the only user of the Transport instance going forward.\n     */\n    async connect(transport: Transport): Promise<void> {\n        return await this.server.connect(transport);\n    }\n\n    /**\n     * Closes the connection.\n     */\n    async close(): Promise<void> {\n        await this.server.close();\n    }\n\n    private _toolHandlersInitialized = false;\n\n    private setToolRequestHandlers() {\n        if (this._toolHandlersInitialized) {\n            return;\n        }\n\n        this.server.assertCanSetRequestHandler(ListToolsRequestSchema.shape.method.value);\n        this.server.assertCanSetRequestHandler(CallToolRequestSchema.shape.method.value);\n\n        this.server.registerCapabilities({\n            tools: {\n                listChanged: true\n            }\n        });\n\n        this.server.setRequestHandler(\n            ListToolsRequestSchema,\n            (): ListToolsResult => ({\n                tools: Object.entries(this._registeredTools)\n                    .filter(([, tool]) => tool.enabled)\n                    .map(([name, tool]): Tool => {\n                        const toolDefinition: Tool = {\n                            name,\n                            title: tool.title,\n                            description: tool.description,\n                            inputSchema: tool.inputSchema\n                                ? (zodToJsonSchema(tool.inputSchema, {\n                                      strictUnions: true\n                                  }) as Tool['inputSchema'])\n                                : EMPTY_OBJECT_JSON_SCHEMA,\n                            annotations: tool.annotations,\n                            _meta: tool._meta\n                        };\n\n                        if (tool.outputSchema) {\n                            toolDefinition.outputSchema = zodToJsonSchema(tool.outputSchema, {\n                                strictUnions: true\n                            }) as Tool['outputSchema'];\n                        }\n\n                        return toolDefinition;\n                    })\n            })\n        );\n\n        this.server.setRequestHandler(CallToolRequestSchema, async (request, extra): Promise<CallToolResult> => {\n            const tool = this._registeredTools[request.params.name];\n            if (!tool) {\n                throw new McpError(ErrorCode.InvalidParams, `Tool ${request.params.name} not found`);\n            }\n\n            if (!tool.enabled) {\n                throw new McpError(ErrorCode.InvalidParams, `Tool ${request.params.name} disabled`);\n            }\n\n            let result: CallToolResult;\n\n            if (tool.inputSchema) {\n                const parseResult = await tool.inputSchema.safeParseAsync(request.params.arguments);\n                if (!parseResult.success) {\n                    throw new McpError(\n                        ErrorCode.InvalidParams,\n                        `Invalid arguments for tool ${request.params.name}: ${parseResult.error.message}`\n                    );\n                }\n\n                const args = parseResult.data;\n                const cb = tool.callback as ToolCallback<ZodRawShape>;\n                try {\n                    result = await Promise.resolve(cb(args, extra));\n                } catch (error) {\n                    result = {\n                        content: [\n                            {\n                                type: 'text',\n                                text: error instanceof Error ? error.message : String(error)\n                            }\n                        ],\n                        isError: true\n                    };\n                }\n            } else {\n                const cb = tool.callback as ToolCallback<undefined>;\n                try {\n                    result = await Promise.resolve(cb(extra));\n                } catch (error) {\n                    result = {\n                        content: [\n                            {\n                                type: 'text',\n                                text: error instanceof Error ? error.message : String(error)\n                            }\n                        ],\n                        isError: true\n                    };\n                }\n            }\n\n            if (tool.outputSchema && !result.isError) {\n                if (!result.structuredContent) {\n                    throw new McpError(\n                        ErrorCode.InvalidParams,\n                        `Tool ${request.params.name} has an output schema but no structured content was provided`\n                    );\n                }\n\n                // if the tool has an output schema, validate structured content\n                const parseResult = await tool.outputSchema.safeParseAsync(result.structuredContent);\n                if (!parseResult.success) {\n                    throw new McpError(\n                        ErrorCode.InvalidParams,\n                        `Invalid structured content for tool ${request.params.name}: ${parseResult.error.message}`\n                    );\n                }\n            }\n\n            return result;\n        });\n\n        this._toolHandlersInitialized = true;\n    }\n\n    private _completionHandlerInitialized = false;\n\n    private setCompletionRequestHandler() {\n        if (this._completionHandlerInitialized) {\n            return;\n        }\n\n        this.server.assertCanSetRequestHandler(CompleteRequestSchema.shape.method.value);\n\n        this.server.registerCapabilities({\n            completions: {}\n        });\n\n        this.server.setRequestHandler(CompleteRequestSchema, async (request): Promise<CompleteResult> => {\n            switch (request.params.ref.type) {\n                case 'ref/prompt':\n                    return this.handlePromptCompletion(request, request.params.ref);\n\n                case 'ref/resource':\n                    return this.handleResourceCompletion(request, request.params.ref);\n\n                default:\n                    throw new McpError(ErrorCode.InvalidParams, `Invalid completion reference: ${request.params.ref}`);\n            }\n        });\n\n        this._completionHandlerInitialized = true;\n    }\n\n    private async handlePromptCompletion(request: CompleteRequest, ref: PromptReference): Promise<CompleteResult> {\n        const prompt = this._registeredPrompts[ref.name];\n        if (!prompt) {\n            throw new McpError(ErrorCode.InvalidParams, `Prompt ${ref.name} not found`);\n        }\n\n        if (!prompt.enabled) {\n            throw new McpError(ErrorCode.InvalidParams, `Prompt ${ref.name} disabled`);\n        }\n\n        if (!prompt.argsSchema) {\n            return EMPTY_COMPLETION_RESULT;\n        }\n\n        const field = prompt.argsSchema.shape[request.params.argument.name];\n        if (!(field instanceof Completable)) {\n            return EMPTY_COMPLETION_RESULT;\n        }\n\n        const def: CompletableDef<ZodString> = field._def;\n        const suggestions = await def.complete(request.params.argument.value, request.params.context);\n        return createCompletionResult(suggestions);\n    }\n\n    private async handleResourceCompletion(request: CompleteRequest, ref: ResourceTemplateReference): Promise<CompleteResult> {\n        const template = Object.values(this._registeredResourceTemplates).find(t => t.resourceTemplate.uriTemplate.toString() === ref.uri);\n\n        if (!template) {\n            if (this._registeredResources[ref.uri]) {\n                // Attempting to autocomplete a fixed resource URI is not an error in the spec (but probably should be).\n                return EMPTY_COMPLETION_RESULT;\n            }\n\n            throw new McpError(ErrorCode.InvalidParams, `Resource template ${request.params.ref.uri} not found`);\n        }\n\n        const completer = template.resourceTemplate.completeCallback(request.params.argument.name);\n        if (!completer) {\n            return EMPTY_COMPLETION_RESULT;\n        }\n\n        const suggestions = await completer(request.params.argument.value, request.params.context);\n        return createCompletionResult(suggestions);\n    }\n\n    private _resourceHandlersInitialized = false;\n\n    private setResourceRequestHandlers() {\n        if (this._resourceHandlersInitialized) {\n            return;\n        }\n\n        this.server.assertCanSetRequestHandler(ListResourcesRequestSchema.shape.method.value);\n        this.server.assertCanSetRequestHandler(ListResourceTemplatesRequestSchema.shape.method.value);\n        this.server.assertCanSetRequestHandler(ReadResourceRequestSchema.shape.method.value);\n\n        this.server.registerCapabilities({\n            resources: {\n                listChanged: true\n            }\n        });\n\n        this.server.setRequestHandler(ListResourcesRequestSchema, async (request, extra) => {\n            const resources = Object.entries(this._registeredResources)\n                .filter(([_, resource]) => resource.enabled)\n                .map(([uri, resource]) => ({\n                    uri,\n                    name: resource.name,\n                    ...resource.metadata\n                }));\n\n            const templateResources: Resource[] = [];\n            for (const template of Object.values(this._registeredResourceTemplates)) {\n                if (!template.resourceTemplate.listCallback) {\n                    continue;\n                }\n\n                const result = await template.resourceTemplate.listCallback(extra);\n                for (const resource of result.resources) {\n                    templateResources.push({\n                        ...template.metadata,\n                        // the defined resource metadata should override the template metadata if present\n                        ...resource\n                    });\n                }\n            }\n\n            return { resources: [...resources, ...templateResources] };\n        });\n\n        this.server.setRequestHandler(ListResourceTemplatesRequestSchema, async () => {\n            const resourceTemplates = Object.entries(this._registeredResourceTemplates).map(([name, template]) => ({\n                name,\n                uriTemplate: template.resourceTemplate.uriTemplate.toString(),\n                ...template.metadata\n            }));\n\n            return { resourceTemplates };\n        });\n\n        this.server.setRequestHandler(ReadResourceRequestSchema, async (request, extra) => {\n            const uri = new URL(request.params.uri);\n\n            // First check for exact resource match\n            const resource = this._registeredResources[uri.toString()];\n            if (resource) {\n                if (!resource.enabled) {\n                    throw new McpError(ErrorCode.InvalidParams, `Resource ${uri} disabled`);\n                }\n                return resource.readCallback(uri, extra);\n            }\n\n            // Then check templates\n            for (const template of Object.values(this._registeredResourceTemplates)) {\n                const variables = template.resourceTemplate.uriTemplate.match(uri.toString());\n                if (variables) {\n                    return template.readCallback(uri, variables, extra);\n                }\n            }\n\n            throw new McpError(ErrorCode.InvalidParams, `Resource ${uri} not found`);\n        });\n\n        this.setCompletionRequestHandler();\n\n        this._resourceHandlersInitialized = true;\n    }\n\n    private _promptHandlersInitialized = false;\n\n    private setPromptRequestHandlers() {\n        if (this._promptHandlersInitialized) {\n            return;\n        }\n\n        this.server.assertCanSetRequestHandler(ListPromptsRequestSchema.shape.method.value);\n        this.server.assertCanSetRequestHandler(GetPromptRequestSchema.shape.method.value);\n\n        this.server.registerCapabilities({\n            prompts: {\n                listChanged: true\n            }\n        });\n\n        this.server.setRequestHandler(\n            ListPromptsRequestSchema,\n            (): ListPromptsResult => ({\n                prompts: Object.entries(this._registeredPrompts)\n                    .filter(([, prompt]) => prompt.enabled)\n                    .map(([name, prompt]): Prompt => {\n                        return {\n                            name,\n                            title: prompt.title,\n                            description: prompt.description,\n                            arguments: prompt.argsSchema ? promptArgumentsFromSchema(prompt.argsSchema) : undefined\n                        };\n                    })\n            })\n        );\n\n        this.server.setRequestHandler(GetPromptRequestSchema, async (request, extra): Promise<GetPromptResult> => {\n            const prompt = this._registeredPrompts[request.params.name];\n            if (!prompt) {\n                throw new McpError(ErrorCode.InvalidParams, `Prompt ${request.params.name} not found`);\n            }\n\n            if (!prompt.enabled) {\n                throw new McpError(ErrorCode.InvalidParams, `Prompt ${request.params.name} disabled`);\n            }\n\n            if (prompt.argsSchema) {\n                const parseResult = await prompt.argsSchema.safeParseAsync(request.params.arguments);\n                if (!parseResult.success) {\n                    throw new McpError(\n                        ErrorCode.InvalidParams,\n                        `Invalid arguments for prompt ${request.params.name}: ${parseResult.error.message}`\n                    );\n                }\n\n                const args = parseResult.data;\n                const cb = prompt.callback as PromptCallback<PromptArgsRawShape>;\n                return await Promise.resolve(cb(args, extra));\n            } else {\n                const cb = prompt.callback as PromptCallback<undefined>;\n                return await Promise.resolve(cb(extra));\n            }\n        });\n\n        this.setCompletionRequestHandler();\n\n        this._promptHandlersInitialized = true;\n    }\n\n    /**\n     * Registers a resource `name` at a fixed URI, which will use the given callback to respond to read requests.\n     */\n    resource(name: string, uri: string, readCallback: ReadResourceCallback): RegisteredResource;\n\n    /**\n     * Registers a resource `name` at a fixed URI with metadata, which will use the given callback to respond to read requests.\n     */\n    resource(name: string, uri: string, metadata: ResourceMetadata, readCallback: ReadResourceCallback): RegisteredResource;\n\n    /**\n     * Registers a resource `name` with a template pattern, which will use the given callback to respond to read requests.\n     */\n    resource(name: string, template: ResourceTemplate, readCallback: ReadResourceTemplateCallback): RegisteredResourceTemplate;\n\n    /**\n     * Registers a resource `name` with a template pattern and metadata, which will use the given callback to respond to read requests.\n     */\n    resource(\n        name: string,\n        template: ResourceTemplate,\n        metadata: ResourceMetadata,\n        readCallback: ReadResourceTemplateCallback\n    ): RegisteredResourceTemplate;\n\n    resource(name: string, uriOrTemplate: string | ResourceTemplate, ...rest: unknown[]): RegisteredResource | RegisteredResourceTemplate {\n        let metadata: ResourceMetadata | undefined;\n        if (typeof rest[0] === 'object') {\n            metadata = rest.shift() as ResourceMetadata;\n        }\n\n        const readCallback = rest[0] as ReadResourceCallback | ReadResourceTemplateCallback;\n\n        if (typeof uriOrTemplate === 'string') {\n            if (this._registeredResources[uriOrTemplate]) {\n                throw new Error(`Resource ${uriOrTemplate} is already registered`);\n            }\n\n            const registeredResource = this._createRegisteredResource(\n                name,\n                undefined,\n                uriOrTemplate,\n                metadata,\n                readCallback as ReadResourceCallback\n            );\n\n            this.setResourceRequestHandlers();\n            this.sendResourceListChanged();\n            return registeredResource;\n        } else {\n            if (this._registeredResourceTemplates[name]) {\n                throw new Error(`Resource template ${name} is already registered`);\n            }\n\n            const registeredResourceTemplate = this._createRegisteredResourceTemplate(\n                name,\n                undefined,\n                uriOrTemplate,\n                metadata,\n                readCallback as ReadResourceTemplateCallback\n            );\n\n            this.setResourceRequestHandlers();\n            this.sendResourceListChanged();\n            return registeredResourceTemplate;\n        }\n    }\n\n    /**\n     * Registers a resource with a config object and callback.\n     * For static resources, use a URI string. For dynamic resources, use a ResourceTemplate.\n     */\n    registerResource(name: string, uriOrTemplate: string, config: ResourceMetadata, readCallback: ReadResourceCallback): RegisteredResource;\n    registerResource(\n        name: string,\n        uriOrTemplate: ResourceTemplate,\n        config: ResourceMetadata,\n        readCallback: ReadResourceTemplateCallback\n    ): RegisteredResourceTemplate;\n    registerResource(\n        name: string,\n        uriOrTemplate: string | ResourceTemplate,\n        config: ResourceMetadata,\n        readCallback: ReadResourceCallback | ReadResourceTemplateCallback\n    ): RegisteredResource | RegisteredResourceTemplate {\n        if (typeof uriOrTemplate === 'string') {\n            if (this._registeredResources[uriOrTemplate]) {\n                throw new Error(`Resource ${uriOrTemplate} is already registered`);\n            }\n\n            const registeredResource = this._createRegisteredResource(\n                name,\n                (config as BaseMetadata).title,\n                uriOrTemplate,\n                config,\n                readCallback as ReadResourceCallback\n            );\n\n            this.setResourceRequestHandlers();\n            this.sendResourceListChanged();\n            return registeredResource;\n        } else {\n            if (this._registeredResourceTemplates[name]) {\n                throw new Error(`Resource template ${name} is already registered`);\n            }\n\n            const registeredResourceTemplate = this._createRegisteredResourceTemplate(\n                name,\n                (config as BaseMetadata).title,\n                uriOrTemplate,\n                config,\n                readCallback as ReadResourceTemplateCallback\n            );\n\n            this.setResourceRequestHandlers();\n            this.sendResourceListChanged();\n            return registeredResourceTemplate;\n        }\n    }\n\n    private _createRegisteredResource(\n        name: string,\n        title: string | undefined,\n        uri: string,\n        metadata: ResourceMetadata | undefined,\n        readCallback: ReadResourceCallback\n    ): RegisteredResource {\n        const registeredResource: RegisteredResource = {\n            name,\n            title,\n            metadata,\n            readCallback,\n            enabled: true,\n            disable: () => registeredResource.update({ enabled: false }),\n            enable: () => registeredResource.update({ enabled: true }),\n            remove: () => registeredResource.update({ uri: null }),\n            update: updates => {\n                if (typeof updates.uri !== 'undefined' && updates.uri !== uri) {\n                    delete this._registeredResources[uri];\n                    if (updates.uri) this._registeredResources[updates.uri] = registeredResource;\n                }\n                if (typeof updates.name !== 'undefined') registeredResource.name = updates.name;\n                if (typeof updates.title !== 'undefined') registeredResource.title = updates.title;\n                if (typeof updates.metadata !== 'undefined') registeredResource.metadata = updates.metadata;\n                if (typeof updates.callback !== 'undefined') registeredResource.readCallback = updates.callback;\n                if (typeof updates.enabled !== 'undefined') registeredResource.enabled = updates.enabled;\n                this.sendResourceListChanged();\n            }\n        };\n        this._registeredResources[uri] = registeredResource;\n        return registeredResource;\n    }\n\n    private _createRegisteredResourceTemplate(\n        name: string,\n        title: string | undefined,\n        template: ResourceTemplate,\n        metadata: ResourceMetadata | undefined,\n        readCallback: ReadResourceTemplateCallback\n    ): RegisteredResourceTemplate {\n        const registeredResourceTemplate: RegisteredResourceTemplate = {\n            resourceTemplate: template,\n            title,\n            metadata,\n            readCallback,\n            enabled: true,\n            disable: () => registeredResourceTemplate.update({ enabled: false }),\n            enable: () => registeredResourceTemplate.update({ enabled: true }),\n            remove: () => registeredResourceTemplate.update({ name: null }),\n            update: updates => {\n                if (typeof updates.name !== 'undefined' && updates.name !== name) {\n                    delete this._registeredResourceTemplates[name];\n                    if (updates.name) this._registeredResourceTemplates[updates.name] = registeredResourceTemplate;\n                }\n                if (typeof updates.title !== 'undefined') registeredResourceTemplate.title = updates.title;\n                if (typeof updates.template !== 'undefined') registeredResourceTemplate.resourceTemplate = updates.template;\n                if (typeof updates.metadata !== 'undefined') registeredResourceTemplate.metadata = updates.metadata;\n                if (typeof updates.callback !== 'undefined') registeredResourceTemplate.readCallback = updates.callback;\n                if (typeof updates.enabled !== 'undefined') registeredResourceTemplate.enabled = updates.enabled;\n                this.sendResourceListChanged();\n            }\n        };\n        this._registeredResourceTemplates[name] = registeredResourceTemplate;\n        return registeredResourceTemplate;\n    }\n\n    private _createRegisteredPrompt(\n        name: string,\n        title: string | undefined,\n        description: string | undefined,\n        argsSchema: PromptArgsRawShape | undefined,\n        callback: PromptCallback<PromptArgsRawShape | undefined>\n    ): RegisteredPrompt {\n        const registeredPrompt: RegisteredPrompt = {\n            title,\n            description,\n            argsSchema: argsSchema === undefined ? undefined : z.object(argsSchema),\n            callback,\n            enabled: true,\n            disable: () => registeredPrompt.update({ enabled: false }),\n            enable: () => registeredPrompt.update({ enabled: true }),\n            remove: () => registeredPrompt.update({ name: null }),\n            update: updates => {\n                if (typeof updates.name !== 'undefined' && updates.name !== name) {\n                    delete this._registeredPrompts[name];\n                    if (updates.name) this._registeredPrompts[updates.name] = registeredPrompt;\n                }\n                if (typeof updates.title !== 'undefined') registeredPrompt.title = updates.title;\n                if (typeof updates.description !== 'undefined') registeredPrompt.description = updates.description;\n                if (typeof updates.argsSchema !== 'undefined') registeredPrompt.argsSchema = z.object(updates.argsSchema);\n                if (typeof updates.callback !== 'undefined') registeredPrompt.callback = updates.callback;\n                if (typeof updates.enabled !== 'undefined') registeredPrompt.enabled = updates.enabled;\n                this.sendPromptListChanged();\n            }\n        };\n        this._registeredPrompts[name] = registeredPrompt;\n        return registeredPrompt;\n    }\n\n    private _createRegisteredTool(\n        name: string,\n        title: string | undefined,\n        description: string | undefined,\n        inputSchema: ZodRawShape | undefined,\n        outputSchema: ZodRawShape | undefined,\n        annotations: ToolAnnotations | undefined,\n        _meta: Record<string, unknown> | undefined,\n        callback: ToolCallback<ZodRawShape | undefined>\n    ): RegisteredTool {\n        const registeredTool: RegisteredTool = {\n            title,\n            description,\n            inputSchema: inputSchema === undefined ? undefined : z.object(inputSchema),\n            outputSchema: outputSchema === undefined ? undefined : z.object(outputSchema),\n            annotations,\n            _meta,\n            callback,\n            enabled: true,\n            disable: () => registeredTool.update({ enabled: false }),\n            enable: () => registeredTool.update({ enabled: true }),\n            remove: () => registeredTool.update({ name: null }),\n            update: updates => {\n                if (typeof updates.name !== 'undefined' && updates.name !== name) {\n                    delete this._registeredTools[name];\n                    if (updates.name) this._registeredTools[updates.name] = registeredTool;\n                }\n                if (typeof updates.title !== 'undefined') registeredTool.title = updates.title;\n                if (typeof updates.description !== 'undefined') registeredTool.description = updates.description;\n                if (typeof updates.paramsSchema !== 'undefined') registeredTool.inputSchema = z.object(updates.paramsSchema);\n                if (typeof updates.callback !== 'undefined') registeredTool.callback = updates.callback;\n                if (typeof updates.annotations !== 'undefined') registeredTool.annotations = updates.annotations;\n                if (typeof updates._meta !== 'undefined') registeredTool._meta = updates._meta;\n                if (typeof updates.enabled !== 'undefined') registeredTool.enabled = updates.enabled;\n                this.sendToolListChanged();\n            }\n        };\n        this._registeredTools[name] = registeredTool;\n\n        this.setToolRequestHandlers();\n        this.sendToolListChanged();\n\n        return registeredTool;\n    }\n\n    /**\n     * Registers a zero-argument tool `name`, which will run the given function when the client calls it.\n     */\n    tool(name: string, cb: ToolCallback): RegisteredTool;\n\n    /**\n     * Registers a zero-argument tool `name` (with a description) which will run the given function when the client calls it.\n     */\n    tool(name: string, description: string, cb: ToolCallback): RegisteredTool;\n\n    /**\n     * Registers a tool taking either a parameter schema for validation or annotations for additional metadata.\n     * This unified overload handles both `tool(name, paramsSchema, cb)` and `tool(name, annotations, cb)` cases.\n     *\n     * Note: We use a union type for the second parameter because TypeScript cannot reliably disambiguate\n     * between ToolAnnotations and ZodRawShape during overload resolution, as both are plain object types.\n     */\n    tool<Args extends ZodRawShape>(name: string, paramsSchemaOrAnnotations: Args | ToolAnnotations, cb: ToolCallback<Args>): RegisteredTool;\n\n    /**\n     * Registers a tool `name` (with a description) taking either parameter schema or annotations.\n     * This unified overload handles both `tool(name, description, paramsSchema, cb)` and\n     * `tool(name, description, annotations, cb)` cases.\n     *\n     * Note: We use a union type for the third parameter because TypeScript cannot reliably disambiguate\n     * between ToolAnnotations and ZodRawShape during overload resolution, as both are plain object types.\n     */\n    tool<Args extends ZodRawShape>(\n        name: string,\n        description: string,\n        paramsSchemaOrAnnotations: Args | ToolAnnotations,\n        cb: ToolCallback<Args>\n    ): RegisteredTool;\n\n    /**\n     * Registers a tool with both parameter schema and annotations.\n     */\n    tool<Args extends ZodRawShape>(name: string, paramsSchema: Args, annotations: ToolAnnotations, cb: ToolCallback<Args>): RegisteredTool;\n\n    /**\n     * Registers a tool with description, parameter schema, and annotations.\n     */\n    tool<Args extends ZodRawShape>(\n        name: string,\n        description: string,\n        paramsSchema: Args,\n        annotations: ToolAnnotations,\n        cb: ToolCallback<Args>\n    ): RegisteredTool;\n\n    /**\n     * tool() implementation. Parses arguments passed to overrides defined above.\n     */\n    tool(name: string, ...rest: unknown[]): RegisteredTool {\n        if (this._registeredTools[name]) {\n            throw new Error(`Tool ${name} is already registered`);\n        }\n\n        let description: string | undefined;\n        let inputSchema: ZodRawShape | undefined;\n        let outputSchema: ZodRawShape | undefined;\n        let annotations: ToolAnnotations | undefined;\n\n        // Tool properties are passed as separate arguments, with omissions allowed.\n        // Support for this style is frozen as of protocol version 2025-03-26. Future additions\n        // to tool definition should *NOT* be added.\n\n        if (typeof rest[0] === 'string') {\n            description = rest.shift() as string;\n        }\n\n        // Handle the different overload combinations\n        if (rest.length > 1) {\n            // We have at least one more arg before the callback\n            const firstArg = rest[0];\n\n            if (isZodRawShape(firstArg)) {\n                // We have a params schema as the first arg\n                inputSchema = rest.shift() as ZodRawShape;\n\n                // Check if the next arg is potentially annotations\n                if (rest.length > 1 && typeof rest[0] === 'object' && rest[0] !== null && !isZodRawShape(rest[0])) {\n                    // Case: tool(name, paramsSchema, annotations, cb)\n                    // Or: tool(name, description, paramsSchema, annotations, cb)\n                    annotations = rest.shift() as ToolAnnotations;\n                }\n            } else if (typeof firstArg === 'object' && firstArg !== null) {\n                // Not a ZodRawShape, so must be annotations in this position\n                // Case: tool(name, annotations, cb)\n                // Or: tool(name, description, annotations, cb)\n                annotations = rest.shift() as ToolAnnotations;\n            }\n        }\n        const callback = rest[0] as ToolCallback<ZodRawShape | undefined>;\n\n        return this._createRegisteredTool(name, undefined, description, inputSchema, outputSchema, annotations, undefined, callback);\n    }\n\n    /**\n     * Registers a tool with a config object and callback.\n     */\n    registerTool<InputArgs extends ZodRawShape, OutputArgs extends ZodRawShape>(\n        name: string,\n        config: {\n            title?: string;\n            description?: string;\n            inputSchema?: InputArgs;\n            outputSchema?: OutputArgs;\n            annotations?: ToolAnnotations;\n            _meta?: Record<string, unknown>;\n        },\n        cb: ToolCallback<InputArgs>\n    ): RegisteredTool {\n        if (this._registeredTools[name]) {\n            throw new Error(`Tool ${name} is already registered`);\n        }\n\n        const { title, description, inputSchema, outputSchema, annotations, _meta } = config;\n\n        return this._createRegisteredTool(\n            name,\n            title,\n            description,\n            inputSchema,\n            outputSchema,\n            annotations,\n            _meta,\n            cb as ToolCallback<ZodRawShape | undefined>\n        );\n    }\n\n    /**\n     * Registers a zero-argument prompt `name`, which will run the given function when the client calls it.\n     */\n    prompt(name: string, cb: PromptCallback): RegisteredPrompt;\n\n    /**\n     * Registers a zero-argument prompt `name` (with a description) which will run the given function when the client calls it.\n     */\n    prompt(name: string, description: string, cb: PromptCallback): RegisteredPrompt;\n\n    /**\n     * Registers a prompt `name` accepting the given arguments, which must be an object containing named properties associated with Zod schemas. When the client calls it, the function will be run with the parsed and validated arguments.\n     */\n    prompt<Args extends PromptArgsRawShape>(name: string, argsSchema: Args, cb: PromptCallback<Args>): RegisteredPrompt;\n\n    /**\n     * Registers a prompt `name` (with a description) accepting the given arguments, which must be an object containing named properties associated with Zod schemas. When the client calls it, the function will be run with the parsed and validated arguments.\n     */\n    prompt<Args extends PromptArgsRawShape>(\n        name: string,\n        description: string,\n        argsSchema: Args,\n        cb: PromptCallback<Args>\n    ): RegisteredPrompt;\n\n    prompt(name: string, ...rest: unknown[]): RegisteredPrompt {\n        if (this._registeredPrompts[name]) {\n            throw new Error(`Prompt ${name} is already registered`);\n        }\n\n        let description: string | undefined;\n        if (typeof rest[0] === 'string') {\n            description = rest.shift() as string;\n        }\n\n        let argsSchema: PromptArgsRawShape | undefined;\n        if (rest.length > 1) {\n            argsSchema = rest.shift() as PromptArgsRawShape;\n        }\n\n        const cb = rest[0] as PromptCallback<PromptArgsRawShape | undefined>;\n        const registeredPrompt = this._createRegisteredPrompt(name, undefined, description, argsSchema, cb);\n\n        this.setPromptRequestHandlers();\n        this.sendPromptListChanged();\n\n        return registeredPrompt;\n    }\n\n    /**\n     * Registers a prompt with a config object and callback.\n     */\n    registerPrompt<Args extends PromptArgsRawShape>(\n        name: string,\n        config: {\n            title?: string;\n            description?: string;\n            argsSchema?: Args;\n        },\n        cb: PromptCallback<Args>\n    ): RegisteredPrompt {\n        if (this._registeredPrompts[name]) {\n            throw new Error(`Prompt ${name} is already registered`);\n        }\n\n        const { title, description, argsSchema } = config;\n\n        const registeredPrompt = this._createRegisteredPrompt(\n            name,\n            title,\n            description,\n            argsSchema,\n            cb as PromptCallback<PromptArgsRawShape | undefined>\n        );\n\n        this.setPromptRequestHandlers();\n        this.sendPromptListChanged();\n\n        return registeredPrompt;\n    }\n\n    /**\n     * Checks if the server is connected to a transport.\n     * @returns True if the server is connected\n     */\n    isConnected() {\n        return this.server.transport !== undefined;\n    }\n\n    /**\n     * Sends a logging message to the client, if connected.\n     * Note: You only need to send the parameters object, not the entire JSON RPC message\n     * @see LoggingMessageNotification\n     * @param params\n     * @param sessionId optional for stateless and backward compatibility\n     */\n    async sendLoggingMessage(params: LoggingMessageNotification['params'], sessionId?: string) {\n        return this.server.sendLoggingMessage(params, sessionId);\n    }\n    /**\n     * Sends a resource list changed event to the client, if connected.\n     */\n    sendResourceListChanged() {\n        if (this.isConnected()) {\n            this.server.sendResourceListChanged();\n        }\n    }\n\n    /**\n     * Sends a tool list changed event to the client, if connected.\n     */\n    sendToolListChanged() {\n        if (this.isConnected()) {\n            this.server.sendToolListChanged();\n        }\n    }\n\n    /**\n     * Sends a prompt list changed event to the client, if connected.\n     */\n    sendPromptListChanged() {\n        if (this.isConnected()) {\n            this.server.sendPromptListChanged();\n        }\n    }\n}\n\n/**\n * A callback to complete one variable within a resource template's URI template.\n */\nexport type CompleteResourceTemplateCallback = (\n    value: string,\n    context?: {\n        arguments?: Record<string, string>;\n    }\n) => string[] | Promise<string[]>;\n\n/**\n * A resource template combines a URI pattern with optional functionality to enumerate\n * all resources matching that pattern.\n */\nexport class ResourceTemplate {\n    private _uriTemplate: UriTemplate;\n\n    constructor(\n        uriTemplate: string | UriTemplate,\n        private _callbacks: {\n            /**\n             * A callback to list all resources matching this template. This is required to specified, even if `undefined`, to avoid accidentally forgetting resource listing.\n             */\n            list: ListResourcesCallback | undefined;\n\n            /**\n             * An optional callback to autocomplete variables within the URI template. Useful for clients and users to discover possible values.\n             */\n            complete?: {\n                [variable: string]: CompleteResourceTemplateCallback;\n            };\n        }\n    ) {\n        this._uriTemplate = typeof uriTemplate === 'string' ? new UriTemplate(uriTemplate) : uriTemplate;\n    }\n\n    /**\n     * Gets the URI template pattern.\n     */\n    get uriTemplate(): UriTemplate {\n        return this._uriTemplate;\n    }\n\n    /**\n     * Gets the list callback, if one was provided.\n     */\n    get listCallback(): ListResourcesCallback | undefined {\n        return this._callbacks.list;\n    }\n\n    /**\n     * Gets the callback for completing a specific URI template variable, if one was provided.\n     */\n    completeCallback(variable: string): CompleteResourceTemplateCallback | undefined {\n        return this._callbacks.complete?.[variable];\n    }\n}\n\n/**\n * Callback for a tool handler registered with Server.tool().\n *\n * Parameters will include tool arguments, if applicable, as well as other request handler context.\n *\n * The callback should return:\n * - `structuredContent` if the tool has an outputSchema defined\n * - `content` if the tool does not have an outputSchema\n * - Both fields are optional but typically one should be provided\n */\nexport type ToolCallback<Args extends undefined | ZodRawShape = undefined> = Args extends ZodRawShape\n    ? (\n          args: z.objectOutputType<Args, ZodTypeAny>,\n          extra: RequestHandlerExtra<ServerRequest, ServerNotification>\n      ) => CallToolResult | Promise<CallToolResult>\n    : (extra: RequestHandlerExtra<ServerRequest, ServerNotification>) => CallToolResult | Promise<CallToolResult>;\n\nexport type RegisteredTool = {\n    title?: string;\n    description?: string;\n    inputSchema?: AnyZodObject;\n    outputSchema?: AnyZodObject;\n    annotations?: ToolAnnotations;\n    _meta?: Record<string, unknown>;\n    callback: ToolCallback<undefined | ZodRawShape>;\n    enabled: boolean;\n    enable(): void;\n    disable(): void;\n    update<InputArgs extends ZodRawShape, OutputArgs extends ZodRawShape>(updates: {\n        name?: string | null;\n        title?: string;\n        description?: string;\n        paramsSchema?: InputArgs;\n        outputSchema?: OutputArgs;\n        annotations?: ToolAnnotations;\n        _meta?: Record<string, unknown>;\n        callback?: ToolCallback<InputArgs>;\n        enabled?: boolean;\n    }): void;\n    remove(): void;\n};\n\nconst EMPTY_OBJECT_JSON_SCHEMA = {\n    type: 'object' as const,\n    properties: {}\n};\n\n// Helper to check if an object is a Zod schema (ZodRawShape)\nfunction isZodRawShape(obj: unknown): obj is ZodRawShape {\n    if (typeof obj !== 'object' || obj === null) return false;\n\n    const isEmptyObject = Object.keys(obj).length === 0;\n\n    // Check if object is empty or at least one property is a ZodType instance\n    // Note: use heuristic check to avoid instanceof failure across different Zod versions\n    return isEmptyObject || Object.values(obj as object).some(isZodTypeLike);\n}\n\nfunction isZodTypeLike(value: unknown): value is ZodType {\n    return (\n        value !== null &&\n        typeof value === 'object' &&\n        'parse' in value &&\n        typeof value.parse === 'function' &&\n        'safeParse' in value &&\n        typeof value.safeParse === 'function'\n    );\n}\n\n/**\n * Additional, optional information for annotating a resource.\n */\nexport type ResourceMetadata = Omit<Resource, 'uri' | 'name'>;\n\n/**\n * Callback to list all resources matching a given template.\n */\nexport type ListResourcesCallback = (\n    extra: RequestHandlerExtra<ServerRequest, ServerNotification>\n) => ListResourcesResult | Promise<ListResourcesResult>;\n\n/**\n * Callback to read a resource at a given URI.\n */\nexport type ReadResourceCallback = (\n    uri: URL,\n    extra: RequestHandlerExtra<ServerRequest, ServerNotification>\n) => ReadResourceResult | Promise<ReadResourceResult>;\n\nexport type RegisteredResource = {\n    name: string;\n    title?: string;\n    metadata?: ResourceMetadata;\n    readCallback: ReadResourceCallback;\n    enabled: boolean;\n    enable(): void;\n    disable(): void;\n    update(updates: {\n        name?: string;\n        title?: string;\n        uri?: string | null;\n        metadata?: ResourceMetadata;\n        callback?: ReadResourceCallback;\n        enabled?: boolean;\n    }): void;\n    remove(): void;\n};\n\n/**\n * Callback to read a resource at a given URI, following a filled-in URI template.\n */\nexport type ReadResourceTemplateCallback = (\n    uri: URL,\n    variables: Variables,\n    extra: RequestHandlerExtra<ServerRequest, ServerNotification>\n) => ReadResourceResult | Promise<ReadResourceResult>;\n\nexport type RegisteredResourceTemplate = {\n    resourceTemplate: ResourceTemplate;\n    title?: string;\n    metadata?: ResourceMetadata;\n    readCallback: ReadResourceTemplateCallback;\n    enabled: boolean;\n    enable(): void;\n    disable(): void;\n    update(updates: {\n        name?: string | null;\n        title?: string;\n        template?: ResourceTemplate;\n        metadata?: ResourceMetadata;\n        callback?: ReadResourceTemplateCallback;\n        enabled?: boolean;\n    }): void;\n    remove(): void;\n};\n\ntype PromptArgsRawShape = {\n    [k: string]: ZodType<string, ZodTypeDef, string> | ZodOptional<ZodType<string, ZodTypeDef, string>>;\n};\n\nexport type PromptCallback<Args extends undefined | PromptArgsRawShape = undefined> = Args extends PromptArgsRawShape\n    ? (\n          args: z.objectOutputType<Args, ZodTypeAny>,\n          extra: RequestHandlerExtra<ServerRequest, ServerNotification>\n      ) => GetPromptResult | Promise<GetPromptResult>\n    : (extra: RequestHandlerExtra<ServerRequest, ServerNotification>) => GetPromptResult | Promise<GetPromptResult>;\n\nexport type RegisteredPrompt = {\n    title?: string;\n    description?: string;\n    argsSchema?: ZodObject<PromptArgsRawShape>;\n    callback: PromptCallback<undefined | PromptArgsRawShape>;\n    enabled: boolean;\n    enable(): void;\n    disable(): void;\n    update<Args extends PromptArgsRawShape>(updates: {\n        name?: string | null;\n        title?: string;\n        description?: string;\n        argsSchema?: Args;\n        callback?: PromptCallback<Args>;\n        enabled?: boolean;\n    }): void;\n    remove(): void;\n};\n\nfunction promptArgumentsFromSchema(schema: ZodObject<PromptArgsRawShape>): PromptArgument[] {\n    return Object.entries(schema.shape).map(\n        ([name, field]): PromptArgument => ({\n            name,\n            description: field.description,\n            required: !field.isOptional()\n        })\n    );\n}\n\nfunction createCompletionResult(suggestions: string[]): CompleteResult {\n    return {\n        completion: {\n            values: suggestions.slice(0, 100),\n            total: suggestions.length,\n            hasMore: suggestions.length > 100\n        }\n    };\n}\n\nconst EMPTY_COMPLETION_RESULT: CompleteResult = {\n    completion: {\n        values: [],\n        hasMore: false\n    }\n};\n","import { IncomingMessage, ServerResponse } from 'node:http';\nimport { Transport } from '../shared/transport.js';\nimport {\n    MessageExtraInfo,\n    RequestInfo,\n    isInitializeRequest,\n    isJSONRPCError,\n    isJSONRPCRequest,\n    isJSONRPCResponse,\n    JSONRPCMessage,\n    JSONRPCMessageSchema,\n    RequestId,\n    SUPPORTED_PROTOCOL_VERSIONS,\n    DEFAULT_NEGOTIATED_PROTOCOL_VERSION\n} from '../types.js';\nimport getRawBody from 'raw-body';\nimport contentType from 'content-type';\nimport { randomUUID } from 'node:crypto';\nimport { AuthInfo } from './auth/types.js';\n\nconst MAXIMUM_MESSAGE_SIZE = '4mb';\n\nexport type StreamId = string;\nexport type EventId = string;\n\n/**\n * Interface for resumability support via event storage\n */\nexport interface EventStore {\n    /**\n     * Stores an event for later retrieval\n     * @param streamId ID of the stream the event belongs to\n     * @param message The JSON-RPC message to store\n     * @returns The generated event ID for the stored event\n     */\n    storeEvent(streamId: StreamId, message: JSONRPCMessage): Promise<EventId>;\n\n    replayEventsAfter(\n        lastEventId: EventId,\n        {\n            send\n        }: {\n            send: (eventId: EventId, message: JSONRPCMessage) => Promise<void>;\n        }\n    ): Promise<StreamId>;\n}\n\n/**\n * Configuration options for StreamableHTTPServerTransport\n */\nexport interface StreamableHTTPServerTransportOptions {\n    /**\n     * Function that generates a session ID for the transport.\n     * The session ID SHOULD be globally unique and cryptographically secure (e.g., a securely generated UUID, a JWT, or a cryptographic hash)\n     *\n     * Return undefined to disable session management.\n     */\n    sessionIdGenerator: (() => string) | undefined;\n\n    /**\n     * A callback for session initialization events\n     * This is called when the server initializes a new session.\n     * Useful in cases when you need to register multiple mcp sessions\n     * and need to keep track of them.\n     * @param sessionId The generated session ID\n     */\n    onsessioninitialized?: (sessionId: string) => void | Promise<void>;\n\n    /**\n     * A callback for session close events\n     * This is called when the server closes a session due to a DELETE request.\n     * Useful in cases when you need to clean up resources associated with the session.\n     * Note that this is different from the transport closing, if you are handling\n     * HTTP requests from multiple nodes you might want to close each\n     * StreamableHTTPServerTransport after a request is completed while still keeping the\n     * session open/running.\n     * @param sessionId The session ID that was closed\n     */\n    onsessionclosed?: (sessionId: string) => void | Promise<void>;\n\n    /**\n     * If true, the server will return JSON responses instead of starting an SSE stream.\n     * This can be useful for simple request/response scenarios without streaming.\n     * Default is false (SSE streams are preferred).\n     */\n    enableJsonResponse?: boolean;\n\n    /**\n     * Event store for resumability support\n     * If provided, resumability will be enabled, allowing clients to reconnect and resume messages\n     */\n    eventStore?: EventStore;\n\n    /**\n     * List of allowed host header values for DNS rebinding protection.\n     * If not specified, host validation is disabled.\n     */\n    allowedHosts?: string[];\n\n    /**\n     * List of allowed origin header values for DNS rebinding protection.\n     * If not specified, origin validation is disabled.\n     */\n    allowedOrigins?: string[];\n\n    /**\n     * Enable DNS rebinding protection (requires allowedHosts and/or allowedOrigins to be configured).\n     * Default is false for backwards compatibility.\n     */\n    enableDnsRebindingProtection?: boolean;\n}\n\n/**\n * Server transport for Streamable HTTP: this implements the MCP Streamable HTTP transport specification.\n * It supports both SSE streaming and direct HTTP responses.\n *\n * Usage example:\n *\n * ```typescript\n * // Stateful mode - server sets the session ID\n * const statefulTransport = new StreamableHTTPServerTransport({\n *   sessionIdGenerator: () => randomUUID(),\n * });\n *\n * // Stateless mode - explicitly set session ID to undefined\n * const statelessTransport = new StreamableHTTPServerTransport({\n *   sessionIdGenerator: undefined,\n * });\n *\n * // Using with pre-parsed request body\n * app.post('/mcp', (req, res) => {\n *   transport.handleRequest(req, res, req.body);\n * });\n * ```\n *\n * In stateful mode:\n * - Session ID is generated and included in response headers\n * - Session ID is always included in initialization responses\n * - Requests with invalid session IDs are rejected with 404 Not Found\n * - Non-initialization requests without a session ID are rejected with 400 Bad Request\n * - State is maintained in-memory (connections, message history)\n *\n * In stateless mode:\n * - No Session ID is included in any responses\n * - No session validation is performed\n */\nexport class StreamableHTTPServerTransport implements Transport {\n    // when sessionId is not set (undefined), it means the transport is in stateless mode\n    private sessionIdGenerator: (() => string) | undefined;\n    private _started: boolean = false;\n    private _streamMapping: Map<string, ServerResponse> = new Map();\n    private _requestToStreamMapping: Map<RequestId, string> = new Map();\n    private _requestResponseMap: Map<RequestId, JSONRPCMessage> = new Map();\n    private _initialized: boolean = false;\n    private _enableJsonResponse: boolean = false;\n    private _standaloneSseStreamId: string = '_GET_stream';\n    private _eventStore?: EventStore;\n    private _onsessioninitialized?: (sessionId: string) => void | Promise<void>;\n    private _onsessionclosed?: (sessionId: string) => void | Promise<void>;\n    private _allowedHosts?: string[];\n    private _allowedOrigins?: string[];\n    private _enableDnsRebindingProtection: boolean;\n\n    sessionId?: string;\n    onclose?: () => void;\n    onerror?: (error: Error) => void;\n    onmessage?: (message: JSONRPCMessage, extra?: MessageExtraInfo) => void;\n\n    constructor(options: StreamableHTTPServerTransportOptions) {\n        this.sessionIdGenerator = options.sessionIdGenerator;\n        this._enableJsonResponse = options.enableJsonResponse ?? false;\n        this._eventStore = options.eventStore;\n        this._onsessioninitialized = options.onsessioninitialized;\n        this._onsessionclosed = options.onsessionclosed;\n        this._allowedHosts = options.allowedHosts;\n        this._allowedOrigins = options.allowedOrigins;\n        this._enableDnsRebindingProtection = options.enableDnsRebindingProtection ?? false;\n    }\n\n    /**\n     * Starts the transport. This is required by the Transport interface but is a no-op\n     * for the Streamable HTTP transport as connections are managed per-request.\n     */\n    async start(): Promise<void> {\n        if (this._started) {\n            throw new Error('Transport already started');\n        }\n        this._started = true;\n    }\n\n    /**\n     * Validates request headers for DNS rebinding protection.\n     * @returns Error message if validation fails, undefined if validation passes.\n     */\n    private validateRequestHeaders(req: IncomingMessage): string | undefined {\n        // Skip validation if protection is not enabled\n        if (!this._enableDnsRebindingProtection) {\n            return undefined;\n        }\n\n        // Validate Host header if allowedHosts is configured\n        if (this._allowedHosts && this._allowedHosts.length > 0) {\n            const hostHeader = req.headers.host;\n            if (!hostHeader || !this._allowedHosts.includes(hostHeader)) {\n                return `Invalid Host header: ${hostHeader}`;\n            }\n        }\n\n        // Validate Origin header if allowedOrigins is configured\n        if (this._allowedOrigins && this._allowedOrigins.length > 0) {\n            const originHeader = req.headers.origin;\n            if (!originHeader || !this._allowedOrigins.includes(originHeader)) {\n                return `Invalid Origin header: ${originHeader}`;\n            }\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Handles an incoming HTTP request, whether GET or POST\n     */\n    async handleRequest(req: IncomingMessage & { auth?: AuthInfo }, res: ServerResponse, parsedBody?: unknown): Promise<void> {\n        // Validate request headers for DNS rebinding protection\n        const validationError = this.validateRequestHeaders(req);\n        if (validationError) {\n            res.writeHead(403).end(\n                JSON.stringify({\n                    jsonrpc: '2.0',\n                    error: {\n                        code: -32000,\n                        message: validationError\n                    },\n                    id: null\n                })\n            );\n            this.onerror?.(new Error(validationError));\n            return;\n        }\n\n        if (req.method === 'POST') {\n            await this.handlePostRequest(req, res, parsedBody);\n        } else if (req.method === 'GET') {\n            await this.handleGetRequest(req, res);\n        } else if (req.method === 'DELETE') {\n            await this.handleDeleteRequest(req, res);\n        } else {\n            await this.handleUnsupportedRequest(res);\n        }\n    }\n\n    /**\n     * Handles GET requests for SSE stream\n     */\n    private async handleGetRequest(req: IncomingMessage, res: ServerResponse): Promise<void> {\n        // The client MUST include an Accept header, listing text/event-stream as a supported content type.\n        const acceptHeader = req.headers.accept;\n        if (!acceptHeader?.includes('text/event-stream')) {\n            res.writeHead(406).end(\n                JSON.stringify({\n                    jsonrpc: '2.0',\n                    error: {\n                        code: -32000,\n                        message: 'Not Acceptable: Client must accept text/event-stream'\n                    },\n                    id: null\n                })\n            );\n            return;\n        }\n\n        // If an Mcp-Session-Id is returned by the server during initialization,\n        // clients using the Streamable HTTP transport MUST include it\n        // in the Mcp-Session-Id header on all of their subsequent HTTP requests.\n        if (!this.validateSession(req, res)) {\n            return;\n        }\n        if (!this.validateProtocolVersion(req, res)) {\n            return;\n        }\n        // Handle resumability: check for Last-Event-ID header\n        if (this._eventStore) {\n            const lastEventId = req.headers['last-event-id'] as string | undefined;\n            if (lastEventId) {\n                await this.replayEvents(lastEventId, res);\n                return;\n            }\n        }\n\n        // The server MUST either return Content-Type: text/event-stream in response to this HTTP GET,\n        // or else return HTTP 405 Method Not Allowed\n        const headers: Record<string, string> = {\n            'Content-Type': 'text/event-stream',\n            'Cache-Control': 'no-cache, no-transform',\n            Connection: 'keep-alive'\n        };\n\n        // After initialization, always include the session ID if we have one\n        if (this.sessionId !== undefined) {\n            headers['mcp-session-id'] = this.sessionId;\n        }\n\n        // Check if there's already an active standalone SSE stream for this session\n        if (this._streamMapping.get(this._standaloneSseStreamId) !== undefined) {\n            // Only one GET SSE stream is allowed per session\n            res.writeHead(409).end(\n                JSON.stringify({\n                    jsonrpc: '2.0',\n                    error: {\n                        code: -32000,\n                        message: 'Conflict: Only one SSE stream is allowed per session'\n                    },\n                    id: null\n                })\n            );\n            return;\n        }\n\n        // We need to send headers immediately as messages will arrive much later,\n        // otherwise the client will just wait for the first message\n        res.writeHead(200, headers).flushHeaders();\n\n        // Assign the response to the standalone SSE stream\n        this._streamMapping.set(this._standaloneSseStreamId, res);\n        // Set up close handler for client disconnects\n        res.on('close', () => {\n            this._streamMapping.delete(this._standaloneSseStreamId);\n        });\n\n        // Add error handler for standalone SSE stream\n        res.on('error', error => {\n            this.onerror?.(error as Error);\n        });\n    }\n\n    /**\n     * Replays events that would have been sent after the specified event ID\n     * Only used when resumability is enabled\n     */\n    private async replayEvents(lastEventId: string, res: ServerResponse): Promise<void> {\n        if (!this._eventStore) {\n            return;\n        }\n        try {\n            const headers: Record<string, string> = {\n                'Content-Type': 'text/event-stream',\n                'Cache-Control': 'no-cache, no-transform',\n                Connection: 'keep-alive'\n            };\n\n            if (this.sessionId !== undefined) {\n                headers['mcp-session-id'] = this.sessionId;\n            }\n            res.writeHead(200, headers).flushHeaders();\n\n            const streamId = await this._eventStore?.replayEventsAfter(lastEventId, {\n                send: async (eventId: string, message: JSONRPCMessage) => {\n                    if (!this.writeSSEEvent(res, message, eventId)) {\n                        this.onerror?.(new Error('Failed replay events'));\n                        res.end();\n                    }\n                }\n            });\n            this._streamMapping.set(streamId, res);\n\n            // Add error handler for replay stream\n            res.on('error', error => {\n                this.onerror?.(error as Error);\n            });\n        } catch (error) {\n            this.onerror?.(error as Error);\n        }\n    }\n\n    /**\n     * Writes an event to the SSE stream with proper formatting\n     */\n    private writeSSEEvent(res: ServerResponse, message: JSONRPCMessage, eventId?: string): boolean {\n        let eventData = `event: message\\n`;\n        // Include event ID if provided - this is important for resumability\n        if (eventId) {\n            eventData += `id: ${eventId}\\n`;\n        }\n        eventData += `data: ${JSON.stringify(message)}\\n\\n`;\n\n        return res.write(eventData);\n    }\n\n    /**\n     * Handles unsupported requests (PUT, PATCH, etc.)\n     */\n    private async handleUnsupportedRequest(res: ServerResponse): Promise<void> {\n        res.writeHead(405, {\n            Allow: 'GET, POST, DELETE'\n        }).end(\n            JSON.stringify({\n                jsonrpc: '2.0',\n                error: {\n                    code: -32000,\n                    message: 'Method not allowed.'\n                },\n                id: null\n            })\n        );\n    }\n\n    /**\n     * Handles POST requests containing JSON-RPC messages\n     */\n    private async handlePostRequest(req: IncomingMessage & { auth?: AuthInfo }, res: ServerResponse, parsedBody?: unknown): Promise<void> {\n        try {\n            // Validate the Accept header\n            const acceptHeader = req.headers.accept;\n            // The client MUST include an Accept header, listing both application/json and text/event-stream as supported content types.\n            if (!acceptHeader?.includes('application/json') || !acceptHeader.includes('text/event-stream')) {\n                res.writeHead(406).end(\n                    JSON.stringify({\n                        jsonrpc: '2.0',\n                        error: {\n                            code: -32000,\n                            message: 'Not Acceptable: Client must accept both application/json and text/event-stream'\n                        },\n                        id: null\n                    })\n                );\n                return;\n            }\n\n            const ct = req.headers['content-type'];\n            if (!ct || !ct.includes('application/json')) {\n                res.writeHead(415).end(\n                    JSON.stringify({\n                        jsonrpc: '2.0',\n                        error: {\n                            code: -32000,\n                            message: 'Unsupported Media Type: Content-Type must be application/json'\n                        },\n                        id: null\n                    })\n                );\n                return;\n            }\n\n            const authInfo: AuthInfo | undefined = req.auth;\n            const requestInfo: RequestInfo = { headers: req.headers };\n\n            let rawMessage;\n            if (parsedBody !== undefined) {\n                rawMessage = parsedBody;\n            } else {\n                const parsedCt = contentType.parse(ct);\n                const body = await getRawBody(req, {\n                    limit: MAXIMUM_MESSAGE_SIZE,\n                    encoding: parsedCt.parameters.charset ?? 'utf-8'\n                });\n                rawMessage = JSON.parse(body.toString());\n            }\n\n            let messages: JSONRPCMessage[];\n\n            // handle batch and single messages\n            if (Array.isArray(rawMessage)) {\n                messages = rawMessage.map(msg => JSONRPCMessageSchema.parse(msg));\n            } else {\n                messages = [JSONRPCMessageSchema.parse(rawMessage)];\n            }\n\n            // Check if this is an initialization request\n            // https://spec.modelcontextprotocol.io/specification/2025-03-26/basic/lifecycle/\n            const isInitializationRequest = messages.some(isInitializeRequest);\n            if (isInitializationRequest) {\n                // If it's a server with session management and the session ID is already set we should reject the request\n                // to avoid re-initialization.\n                if (this._initialized && this.sessionId !== undefined) {\n                    res.writeHead(400).end(\n                        JSON.stringify({\n                            jsonrpc: '2.0',\n                            error: {\n                                code: -32600,\n                                message: 'Invalid Request: Server already initialized'\n                            },\n                            id: null\n                        })\n                    );\n                    return;\n                }\n                if (messages.length > 1) {\n                    res.writeHead(400).end(\n                        JSON.stringify({\n                            jsonrpc: '2.0',\n                            error: {\n                                code: -32600,\n                                message: 'Invalid Request: Only one initialization request is allowed'\n                            },\n                            id: null\n                        })\n                    );\n                    return;\n                }\n                this.sessionId = this.sessionIdGenerator?.();\n                this._initialized = true;\n\n                // If we have a session ID and an onsessioninitialized handler, call it immediately\n                // This is needed in cases where the server needs to keep track of multiple sessions\n                if (this.sessionId && this._onsessioninitialized) {\n                    await Promise.resolve(this._onsessioninitialized(this.sessionId));\n                }\n            }\n            if (!isInitializationRequest) {\n                // If an Mcp-Session-Id is returned by the server during initialization,\n                // clients using the Streamable HTTP transport MUST include it\n                // in the Mcp-Session-Id header on all of their subsequent HTTP requests.\n                if (!this.validateSession(req, res)) {\n                    return;\n                }\n                // Mcp-Protocol-Version header is required for all requests after initialization.\n                if (!this.validateProtocolVersion(req, res)) {\n                    return;\n                }\n            }\n\n            // check if it contains requests\n            const hasRequests = messages.some(isJSONRPCRequest);\n\n            if (!hasRequests) {\n                // if it only contains notifications or responses, return 202\n                res.writeHead(202).end();\n\n                // handle each message\n                for (const message of messages) {\n                    this.onmessage?.(message, { authInfo, requestInfo });\n                }\n            } else if (hasRequests) {\n                // The default behavior is to use SSE streaming\n                // but in some cases server will return JSON responses\n                const streamId = randomUUID();\n                if (!this._enableJsonResponse) {\n                    const headers: Record<string, string> = {\n                        'Content-Type': 'text/event-stream',\n                        'Cache-Control': 'no-cache',\n                        Connection: 'keep-alive'\n                    };\n\n                    // After initialization, always include the session ID if we have one\n                    if (this.sessionId !== undefined) {\n                        headers['mcp-session-id'] = this.sessionId;\n                    }\n\n                    res.writeHead(200, headers);\n                }\n                // Store the response for this request to send messages back through this connection\n                // We need to track by request ID to maintain the connection\n                for (const message of messages) {\n                    if (isJSONRPCRequest(message)) {\n                        this._streamMapping.set(streamId, res);\n                        this._requestToStreamMapping.set(message.id, streamId);\n                    }\n                }\n                // Set up close handler for client disconnects\n                res.on('close', () => {\n                    this._streamMapping.delete(streamId);\n                });\n\n                // Add error handler for stream write errors\n                res.on('error', error => {\n                    this.onerror?.(error as Error);\n                });\n\n                // handle each message\n                for (const message of messages) {\n                    this.onmessage?.(message, { authInfo, requestInfo });\n                }\n                // The server SHOULD NOT close the SSE stream before sending all JSON-RPC responses\n                // This will be handled by the send() method when responses are ready\n            }\n        } catch (error) {\n            // return JSON-RPC formatted error\n            res.writeHead(400).end(\n                JSON.stringify({\n                    jsonrpc: '2.0',\n                    error: {\n                        code: -32700,\n                        message: 'Parse error',\n                        data: String(error)\n                    },\n                    id: null\n                })\n            );\n            this.onerror?.(error as Error);\n        }\n    }\n\n    /**\n     * Handles DELETE requests to terminate sessions\n     */\n    private async handleDeleteRequest(req: IncomingMessage, res: ServerResponse): Promise<void> {\n        if (!this.validateSession(req, res)) {\n            return;\n        }\n        if (!this.validateProtocolVersion(req, res)) {\n            return;\n        }\n        await Promise.resolve(this._onsessionclosed?.(this.sessionId!));\n        await this.close();\n        res.writeHead(200).end();\n    }\n\n    /**\n     * Validates session ID for non-initialization requests\n     * Returns true if the session is valid, false otherwise\n     */\n    private validateSession(req: IncomingMessage, res: ServerResponse): boolean {\n        if (this.sessionIdGenerator === undefined) {\n            // If the sessionIdGenerator ID is not set, the session management is disabled\n            // and we don't need to validate the session ID\n            return true;\n        }\n        if (!this._initialized) {\n            // If the server has not been initialized yet, reject all requests\n            res.writeHead(400).end(\n                JSON.stringify({\n                    jsonrpc: '2.0',\n                    error: {\n                        code: -32000,\n                        message: 'Bad Request: Server not initialized'\n                    },\n                    id: null\n                })\n            );\n            return false;\n        }\n\n        const sessionId = req.headers['mcp-session-id'];\n\n        if (!sessionId) {\n            // Non-initialization requests without a session ID should return 400 Bad Request\n            res.writeHead(400).end(\n                JSON.stringify({\n                    jsonrpc: '2.0',\n                    error: {\n                        code: -32000,\n                        message: 'Bad Request: Mcp-Session-Id header is required'\n                    },\n                    id: null\n                })\n            );\n            return false;\n        } else if (Array.isArray(sessionId)) {\n            res.writeHead(400).end(\n                JSON.stringify({\n                    jsonrpc: '2.0',\n                    error: {\n                        code: -32000,\n                        message: 'Bad Request: Mcp-Session-Id header must be a single value'\n                    },\n                    id: null\n                })\n            );\n            return false;\n        } else if (sessionId !== this.sessionId) {\n            // Reject requests with invalid session ID with 404 Not Found\n            res.writeHead(404).end(\n                JSON.stringify({\n                    jsonrpc: '2.0',\n                    error: {\n                        code: -32001,\n                        message: 'Session not found'\n                    },\n                    id: null\n                })\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    private validateProtocolVersion(req: IncomingMessage, res: ServerResponse): boolean {\n        let protocolVersion = req.headers['mcp-protocol-version'] ?? DEFAULT_NEGOTIATED_PROTOCOL_VERSION;\n        if (Array.isArray(protocolVersion)) {\n            protocolVersion = protocolVersion[protocolVersion.length - 1];\n        }\n\n        if (!SUPPORTED_PROTOCOL_VERSIONS.includes(protocolVersion)) {\n            res.writeHead(400).end(\n                JSON.stringify({\n                    jsonrpc: '2.0',\n                    error: {\n                        code: -32000,\n                        message: `Bad Request: Unsupported protocol version (supported versions: ${SUPPORTED_PROTOCOL_VERSIONS.join(', ')})`\n                    },\n                    id: null\n                })\n            );\n            return false;\n        }\n        return true;\n    }\n\n    async close(): Promise<void> {\n        // Close all SSE connections\n        this._streamMapping.forEach(response => {\n            response.end();\n        });\n        this._streamMapping.clear();\n\n        // Clear any pending responses\n        this._requestResponseMap.clear();\n        this.onclose?.();\n    }\n\n    async send(message: JSONRPCMessage, options?: { relatedRequestId?: RequestId }): Promise<void> {\n        let requestId = options?.relatedRequestId;\n        if (isJSONRPCResponse(message) || isJSONRPCError(message)) {\n            // If the message is a response, use the request ID from the message\n            requestId = message.id;\n        }\n\n        // Check if this message should be sent on the standalone SSE stream (no request ID)\n        // Ignore notifications from tools (which have relatedRequestId set)\n        // Those will be sent via dedicated response SSE streams\n        if (requestId === undefined) {\n            // For standalone SSE streams, we can only send requests and notifications\n            if (isJSONRPCResponse(message) || isJSONRPCError(message)) {\n                throw new Error('Cannot send a response on a standalone SSE stream unless resuming a previous client request');\n            }\n            const standaloneSse = this._streamMapping.get(this._standaloneSseStreamId);\n            if (standaloneSse === undefined) {\n                // The spec says the server MAY send messages on the stream, so it's ok to discard if no stream\n                return;\n            }\n\n            // Generate and store event ID if event store is provided\n            let eventId: string | undefined;\n            if (this._eventStore) {\n                // Stores the event and gets the generated event ID\n                eventId = await this._eventStore.storeEvent(this._standaloneSseStreamId, message);\n            }\n\n            // Send the message to the standalone SSE stream\n            this.writeSSEEvent(standaloneSse, message, eventId);\n            return;\n        }\n\n        // Get the response for this request\n        const streamId = this._requestToStreamMapping.get(requestId);\n        const response = this._streamMapping.get(streamId!);\n        if (!streamId) {\n            throw new Error(`No connection established for request ID: ${String(requestId)}`);\n        }\n\n        if (!this._enableJsonResponse) {\n            // For SSE responses, generate event ID if event store is provided\n            let eventId: string | undefined;\n\n            if (this._eventStore) {\n                eventId = await this._eventStore.storeEvent(streamId, message);\n            }\n            if (response) {\n                // Write the event to the response stream\n                this.writeSSEEvent(response, message, eventId);\n            }\n        }\n\n        if (isJSONRPCResponse(message) || isJSONRPCError(message)) {\n            this._requestResponseMap.set(requestId, message);\n            const relatedIds = Array.from(this._requestToStreamMapping.entries())\n                .filter(([_, streamId]) => this._streamMapping.get(streamId) === response)\n                .map(([id]) => id);\n\n            // Check if we have responses for all requests using this connection\n            const allResponsesReady = relatedIds.every(id => this._requestResponseMap.has(id));\n\n            if (allResponsesReady) {\n                if (!response) {\n                    throw new Error(`No connection established for request ID: ${String(requestId)}`);\n                }\n                if (this._enableJsonResponse) {\n                    // All responses ready, send as JSON\n                    const headers: Record<string, string> = {\n                        'Content-Type': 'application/json'\n                    };\n                    if (this.sessionId !== undefined) {\n                        headers['mcp-session-id'] = this.sessionId;\n                    }\n\n                    const responses = relatedIds.map(id => this._requestResponseMap.get(id)!);\n\n                    response.writeHead(200, headers);\n                    if (responses.length === 1) {\n                        response.end(JSON.stringify(responses[0]));\n                    } else {\n                        response.end(JSON.stringify(responses));\n                    }\n                } else {\n                    // End the SSE stream\n                    response.end();\n                }\n                // Clean up\n                for (const id of relatedIds) {\n                    this._requestResponseMap.delete(id);\n                    this._requestToStreamMapping.delete(id);\n                }\n            }\n        }\n    }\n}\n"],"names":["ErrorCode","jsonrpcNotification","codeVerifier","tokens","error","contentType","index","McpZodTypeKind","name","value","encoded","values","streamId"],"mappings":"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","x_google_ignoreList":[7,8]}