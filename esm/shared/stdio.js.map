{"version":3,"file":"stdio.js","sources":["../../../src/shared/stdio.ts"],"sourcesContent":["import { JSONRPCMessage, JSONRPCMessageSchema } from '../types.js';\n\n/**\n * Buffers a continuous stdio stream into discrete JSON-RPC messages.\n */\nexport class ReadBuffer {\n    private _buffer?: Buffer;\n\n    append(chunk: Buffer): void {\n        this._buffer = this._buffer ? Buffer.concat([this._buffer, chunk]) : chunk;\n    }\n\n    readMessage(): JSONRPCMessage | null {\n        if (!this._buffer) {\n            return null;\n        }\n\n        const index = this._buffer.indexOf('\\n');\n        if (index === -1) {\n            return null;\n        }\n\n        const line = this._buffer.toString('utf8', 0, index).replace(/\\r$/, '');\n        this._buffer = this._buffer.subarray(index + 1);\n        return deserializeMessage(line);\n    }\n\n    clear(): void {\n        this._buffer = undefined;\n    }\n}\n\nexport function deserializeMessage(line: string): JSONRPCMessage {\n    return JSONRPCMessageSchema.parse(JSON.parse(line));\n}\n\nexport function serializeMessage(message: JSONRPCMessage): string {\n    return JSON.stringify(message) + '\\n';\n}\n"],"names":[],"mappings":";AAKO,MAAM,WAAW;AAAA,EAGpB,OAAO,OAAqB;AACxB,SAAK,UAAU,KAAK,UAAU,OAAO,OAAO,CAAC,KAAK,SAAS,KAAK,CAAC,IAAI;AAAA,EACzE;AAAA,EAEA,cAAqC;AACjC,QAAI,CAAC,KAAK,SAAS;AACf,aAAO;AAAA,IACX;AAEA,UAAM,QAAQ,KAAK,QAAQ,QAAQ,IAAI;AACvC,QAAI,UAAU,IAAI;AACd,aAAO;AAAA,IACX;AAEA,UAAM,OAAO,KAAK,QAAQ,SAAS,QAAQ,GAAG,KAAK,EAAE,QAAQ,OAAO,EAAE;AACtE,SAAK,UAAU,KAAK,QAAQ,SAAS,QAAQ,CAAC;AAC9C,WAAO,mBAAmB,IAAI;AAAA,EAClC;AAAA,EAEA,QAAc;AACV,SAAK,UAAU;AAAA,EACnB;AACJ;AAEO,SAAS,mBAAmB,MAA8B;AAC7D,SAAO,qBAAqB,MAAM,KAAK,MAAM,IAAI,CAAC;AACtD;AAEO,SAAS,iBAAiB,SAAiC;AAC9D,SAAO,KAAK,UAAU,OAAO,IAAI;AACrC;"}