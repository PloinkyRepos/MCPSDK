{"version":3,"file":"stdio.js","sources":["../../../src/server/stdio.ts"],"sourcesContent":["import process from 'node:process';\nimport { Readable, Writable } from 'node:stream';\nimport { ReadBuffer, serializeMessage } from '../shared/stdio.js';\nimport { JSONRPCMessage } from '../types.js';\nimport { Transport } from '../shared/transport.js';\n\n/**\n * Server transport for stdio: this communicates with a MCP client by reading from the current process' stdin and writing to stdout.\n *\n * This transport is only available in Node.js environments.\n */\nexport class StdioServerTransport implements Transport {\n    private _readBuffer: ReadBuffer = new ReadBuffer();\n    private _started = false;\n\n    constructor(\n        private _stdin: Readable = process.stdin,\n        private _stdout: Writable = process.stdout\n    ) {}\n\n    onclose?: () => void;\n    onerror?: (error: Error) => void;\n    onmessage?: (message: JSONRPCMessage) => void;\n\n    // Arrow functions to bind `this` properly, while maintaining function identity.\n    _ondata = (chunk: Buffer) => {\n        this._readBuffer.append(chunk);\n        this.processReadBuffer();\n    };\n    _onerror = (error: Error) => {\n        this.onerror?.(error);\n    };\n\n    /**\n     * Starts listening for messages on stdin.\n     */\n    async start(): Promise<void> {\n        if (this._started) {\n            throw new Error(\n                'StdioServerTransport already started! If using Server class, note that connect() calls start() automatically.'\n            );\n        }\n\n        this._started = true;\n        this._stdin.on('data', this._ondata);\n        this._stdin.on('error', this._onerror);\n    }\n\n    private processReadBuffer() {\n        while (true) {\n            try {\n                const message = this._readBuffer.readMessage();\n                if (message === null) {\n                    break;\n                }\n\n                this.onmessage?.(message);\n            } catch (error) {\n                this.onerror?.(error as Error);\n            }\n        }\n    }\n\n    async close(): Promise<void> {\n        // Remove our event listeners first\n        this._stdin.off('data', this._ondata);\n        this._stdin.off('error', this._onerror);\n\n        // Check if we were the only data listener\n        const remainingDataListeners = this._stdin.listenerCount('data');\n        if (remainingDataListeners === 0) {\n            // Only pause stdin if we were the only listener\n            // This prevents interfering with other parts of the application that might be using stdin\n            this._stdin.pause();\n        }\n\n        // Clear the buffer and notify closure\n        this._readBuffer.clear();\n        this.onclose?.();\n    }\n\n    send(message: JSONRPCMessage): Promise<void> {\n        return new Promise(resolve => {\n            const json = serializeMessage(message);\n            if (this._stdout.write(json)) {\n                resolve();\n            } else {\n                this._stdout.once('drain', resolve);\n            }\n        });\n    }\n}\n"],"names":[],"mappings":";;AAWO,MAAM,qBAA0C;AAAA,EAInD,YACY,SAAmB,QAAQ,OAC3B,UAAoB,QAAQ,QACtC;AAFU,SAAA,SAAA;AACA,SAAA,UAAA;AALZ,SAAQ,cAA0B,IAAI,WAAA;AACtC,SAAQ,WAAW;AAYnB,SAAA,UAAU,CAAC,UAAkB;AACzB,WAAK,YAAY,OAAO,KAAK;AAC7B,WAAK,kBAAA;AAAA,IACT;AACA,SAAA,WAAW,CAAC,UAAiB;AACzB,WAAK,UAAU,KAAK;AAAA,IACxB;AAAA,EAbG;AAAA;AAAA;AAAA;AAAA,EAkBH,MAAM,QAAuB;AACzB,QAAI,KAAK,UAAU;AACf,YAAM,IAAI;AAAA,QACN;AAAA,MAAA;AAAA,IAER;AAEA,SAAK,WAAW;AAChB,SAAK,OAAO,GAAG,QAAQ,KAAK,OAAO;AACnC,SAAK,OAAO,GAAG,SAAS,KAAK,QAAQ;AAAA,EACzC;AAAA,EAEQ,oBAAoB;AACxB,WAAO,MAAM;AACT,UAAI;AACA,cAAM,UAAU,KAAK,YAAY,YAAA;AACjC,YAAI,YAAY,MAAM;AAClB;AAAA,QACJ;AAEA,aAAK,YAAY,OAAO;AAAA,MAC5B,SAAS,OAAO;AACZ,aAAK,UAAU,KAAc;AAAA,MACjC;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,QAAuB;AAEzB,SAAK,OAAO,IAAI,QAAQ,KAAK,OAAO;AACpC,SAAK,OAAO,IAAI,SAAS,KAAK,QAAQ;AAGtC,UAAM,yBAAyB,KAAK,OAAO,cAAc,MAAM;AAC/D,QAAI,2BAA2B,GAAG;AAG9B,WAAK,OAAO,MAAA;AAAA,IAChB;AAGA,SAAK,YAAY,MAAA;AACjB,SAAK,UAAA;AAAA,EACT;AAAA,EAEA,KAAK,SAAwC;AACzC,WAAO,IAAI,QAAQ,CAAA,YAAW;AAC1B,YAAM,OAAO,iBAAiB,OAAO;AACrC,UAAI,KAAK,QAAQ,MAAM,IAAI,GAAG;AAC1B,gBAAA;AAAA,MACJ,OAAO;AACH,aAAK,QAAQ,KAAK,SAAS,OAAO;AAAA,MACtC;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;"}