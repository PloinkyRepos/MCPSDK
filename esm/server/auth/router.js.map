{"version":3,"file":"router.js","sources":["../../../../src/server/auth/router.ts"],"sourcesContent":["import express, { RequestHandler } from 'express';\nimport { clientRegistrationHandler, ClientRegistrationHandlerOptions } from './handlers/register.js';\nimport { tokenHandler, TokenHandlerOptions } from './handlers/token.js';\nimport { authorizationHandler, AuthorizationHandlerOptions } from './handlers/authorize.js';\nimport { revocationHandler, RevocationHandlerOptions } from './handlers/revoke.js';\nimport { metadataHandler } from './handlers/metadata.js';\nimport { OAuthServerProvider } from './provider.js';\nimport { OAuthMetadata, OAuthProtectedResourceMetadata } from '../../shared/auth.js';\n\nexport type AuthRouterOptions = {\n    /**\n     * A provider implementing the actual authorization logic for this router.\n     */\n    provider: OAuthServerProvider;\n\n    /**\n     * The authorization server's issuer identifier, which is a URL that uses the \"https\" scheme and has no query or fragment components.\n     */\n    issuerUrl: URL;\n\n    /**\n     * The base URL of the authorization server to use for the metadata endpoints.\n     *\n     * If not provided, the issuer URL will be used as the base URL.\n     */\n    baseUrl?: URL;\n\n    /**\n     * An optional URL of a page containing human-readable information that developers might want or need to know when using the authorization server.\n     */\n    serviceDocumentationUrl?: URL;\n\n    /**\n     * An optional list of scopes supported by this authorization server\n     */\n    scopesSupported?: string[];\n\n    /**\n     * The resource name to be displayed in protected resource metadata\n     */\n    resourceName?: string;\n\n    /**\n     * The URL of the protected resource (RS) whose metadata we advertise.\n     * If not provided, falls back to `baseUrl` and then to `issuerUrl` (AS=RS).\n     */\n    resourceServerUrl?: URL;\n\n    // Individual options per route\n    authorizationOptions?: Omit<AuthorizationHandlerOptions, 'provider'>;\n    clientRegistrationOptions?: Omit<ClientRegistrationHandlerOptions, 'clientsStore'>;\n    revocationOptions?: Omit<RevocationHandlerOptions, 'provider'>;\n    tokenOptions?: Omit<TokenHandlerOptions, 'provider'>;\n};\n\nconst checkIssuerUrl = (issuer: URL): void => {\n    // Technically RFC 8414 does not permit a localhost HTTPS exemption, but this will be necessary for ease of testing\n    if (issuer.protocol !== 'https:' && issuer.hostname !== 'localhost' && issuer.hostname !== '127.0.0.1') {\n        throw new Error('Issuer URL must be HTTPS');\n    }\n    if (issuer.hash) {\n        throw new Error(`Issuer URL must not have a fragment: ${issuer}`);\n    }\n    if (issuer.search) {\n        throw new Error(`Issuer URL must not have a query string: ${issuer}`);\n    }\n};\n\nexport const createOAuthMetadata = (options: {\n    provider: OAuthServerProvider;\n    issuerUrl: URL;\n    baseUrl?: URL;\n    serviceDocumentationUrl?: URL;\n    scopesSupported?: string[];\n}): OAuthMetadata => {\n    const issuer = options.issuerUrl;\n    const baseUrl = options.baseUrl;\n\n    checkIssuerUrl(issuer);\n\n    const authorization_endpoint = '/authorize';\n    const token_endpoint = '/token';\n    const registration_endpoint = options.provider.clientsStore.registerClient ? '/register' : undefined;\n    const revocation_endpoint = options.provider.revokeToken ? '/revoke' : undefined;\n\n    const metadata: OAuthMetadata = {\n        issuer: issuer.href,\n        service_documentation: options.serviceDocumentationUrl?.href,\n\n        authorization_endpoint: new URL(authorization_endpoint, baseUrl || issuer).href,\n        response_types_supported: ['code'],\n        code_challenge_methods_supported: ['S256'],\n\n        token_endpoint: new URL(token_endpoint, baseUrl || issuer).href,\n        token_endpoint_auth_methods_supported: ['client_secret_post'],\n        grant_types_supported: ['authorization_code', 'refresh_token'],\n\n        scopes_supported: options.scopesSupported,\n\n        revocation_endpoint: revocation_endpoint ? new URL(revocation_endpoint, baseUrl || issuer).href : undefined,\n        revocation_endpoint_auth_methods_supported: revocation_endpoint ? ['client_secret_post'] : undefined,\n\n        registration_endpoint: registration_endpoint ? new URL(registration_endpoint, baseUrl || issuer).href : undefined\n    };\n\n    return metadata;\n};\n\n/**\n * Installs standard MCP authorization server endpoints, including dynamic client registration and token revocation (if supported).\n * Also advertises standard authorization server metadata, for easier discovery of supported configurations by clients.\n * Note: if your MCP server is only a resource server and not an authorization server, use mcpAuthMetadataRouter instead.\n *\n * By default, rate limiting is applied to all endpoints to prevent abuse.\n *\n * This router MUST be installed at the application root, like so:\n *\n *  const app = express();\n *  app.use(mcpAuthRouter(...));\n */\nexport function mcpAuthRouter(options: AuthRouterOptions): RequestHandler {\n    const oauthMetadata = createOAuthMetadata(options);\n\n    const router = express.Router();\n\n    router.use(\n        new URL(oauthMetadata.authorization_endpoint).pathname,\n        authorizationHandler({ provider: options.provider, ...options.authorizationOptions })\n    );\n\n    router.use(new URL(oauthMetadata.token_endpoint).pathname, tokenHandler({ provider: options.provider, ...options.tokenOptions }));\n\n    router.use(\n        mcpAuthMetadataRouter({\n            oauthMetadata,\n            // Prefer explicit RS; otherwise fall back to AS baseUrl, then to issuer (back-compat)\n            resourceServerUrl: options.resourceServerUrl ?? options.baseUrl ?? new URL(oauthMetadata.issuer),\n            serviceDocumentationUrl: options.serviceDocumentationUrl,\n            scopesSupported: options.scopesSupported,\n            resourceName: options.resourceName\n        })\n    );\n\n    if (oauthMetadata.registration_endpoint) {\n        router.use(\n            new URL(oauthMetadata.registration_endpoint).pathname,\n            clientRegistrationHandler({\n                clientsStore: options.provider.clientsStore,\n                ...options.clientRegistrationOptions\n            })\n        );\n    }\n\n    if (oauthMetadata.revocation_endpoint) {\n        router.use(\n            new URL(oauthMetadata.revocation_endpoint).pathname,\n            revocationHandler({ provider: options.provider, ...options.revocationOptions })\n        );\n    }\n\n    return router;\n}\n\nexport type AuthMetadataOptions = {\n    /**\n     * OAuth Metadata as would be returned from the authorization server\n     * this MCP server relies on\n     */\n    oauthMetadata: OAuthMetadata;\n\n    /**\n     * The url of the MCP server, for use in protected resource metadata\n     */\n    resourceServerUrl: URL;\n\n    /**\n     * The url for documentation for the MCP server\n     */\n    serviceDocumentationUrl?: URL;\n\n    /**\n     * An optional list of scopes supported by this MCP server\n     */\n    scopesSupported?: string[];\n\n    /**\n     * An optional resource name to display in resource metadata\n     */\n    resourceName?: string;\n};\n\nexport function mcpAuthMetadataRouter(options: AuthMetadataOptions): express.Router {\n    checkIssuerUrl(new URL(options.oauthMetadata.issuer));\n\n    const router = express.Router();\n\n    const protectedResourceMetadata: OAuthProtectedResourceMetadata = {\n        resource: options.resourceServerUrl.href,\n\n        authorization_servers: [options.oauthMetadata.issuer],\n\n        scopes_supported: options.scopesSupported,\n        resource_name: options.resourceName,\n        resource_documentation: options.serviceDocumentationUrl?.href\n    };\n\n    // Serve PRM at the path-specific URL per RFC 9728\n    const rsPath = new URL(options.resourceServerUrl.href).pathname;\n    router.use(`/.well-known/oauth-protected-resource${rsPath === '/' ? '' : rsPath}`, metadataHandler(protectedResourceMetadata));\n\n    // Always add this for OAuth Authorization Server metadata per RFC 8414\n    router.use('/.well-known/oauth-authorization-server', metadataHandler(options.oauthMetadata));\n\n    return router;\n}\n\n/**\n * Helper function to construct the OAuth 2.0 Protected Resource Metadata URL\n * from a given server URL. This replaces the path with the standard metadata endpoint.\n *\n * @param serverUrl - The base URL of the protected resource server\n * @returns The URL for the OAuth protected resource metadata endpoint\n *\n * @example\n * getOAuthProtectedResourceMetadataUrl(new URL('https://api.example.com/mcp'))\n * // Returns: 'https://api.example.com/.well-known/oauth-protected-resource/mcp'\n */\nexport function getOAuthProtectedResourceMetadataUrl(serverUrl: URL): string {\n    const u = new URL(serverUrl.href);\n    const rsPath = u.pathname && u.pathname !== '/' ? u.pathname : '';\n    return new URL(`/.well-known/oauth-protected-resource${rsPath}`, u).href;\n}\n"],"names":[],"mappings":"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"}