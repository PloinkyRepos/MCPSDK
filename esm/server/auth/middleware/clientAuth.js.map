{"version":3,"file":"clientAuth.js","sources":["../../../../../src/server/auth/middleware/clientAuth.ts"],"sourcesContent":["import { z } from 'zod';\nimport { RequestHandler } from 'express';\nimport { OAuthRegisteredClientsStore } from '../clients.js';\nimport { OAuthClientInformationFull } from '../../../shared/auth.js';\nimport { InvalidRequestError, InvalidClientError, ServerError, OAuthError } from '../errors.js';\n\nexport type ClientAuthenticationMiddlewareOptions = {\n    /**\n     * A store used to read information about registered OAuth clients.\n     */\n    clientsStore: OAuthRegisteredClientsStore;\n};\n\nconst ClientAuthenticatedRequestSchema = z.object({\n    client_id: z.string(),\n    client_secret: z.string().optional()\n});\n\ndeclare module 'express-serve-static-core' {\n    interface Request {\n        /**\n         * The authenticated client for this request, if the `authenticateClient` middleware was used.\n         */\n        client?: OAuthClientInformationFull;\n    }\n}\n\nexport function authenticateClient({ clientsStore }: ClientAuthenticationMiddlewareOptions): RequestHandler {\n    return async (req, res, next) => {\n        try {\n            const result = ClientAuthenticatedRequestSchema.safeParse(req.body);\n            if (!result.success) {\n                throw new InvalidRequestError(String(result.error));\n            }\n\n            const { client_id, client_secret } = result.data;\n            const client = await clientsStore.getClient(client_id);\n            if (!client) {\n                throw new InvalidClientError('Invalid client_id');\n            }\n\n            // If client has a secret, validate it\n            if (client.client_secret) {\n                // Check if client_secret is required but not provided\n                if (!client_secret) {\n                    throw new InvalidClientError('Client secret is required');\n                }\n\n                // Check if client_secret matches\n                if (client.client_secret !== client_secret) {\n                    throw new InvalidClientError('Invalid client_secret');\n                }\n\n                // Check if client_secret has expired\n                if (client.client_secret_expires_at && client.client_secret_expires_at < Math.floor(Date.now() / 1000)) {\n                    throw new InvalidClientError('Client secret has expired');\n                }\n            }\n\n            req.client = client;\n            next();\n        } catch (error) {\n            if (error instanceof OAuthError) {\n                const status = error instanceof ServerError ? 500 : 400;\n                res.status(status).json(error.toResponseObject());\n            } else {\n                const serverError = new ServerError('Internal Server Error');\n                res.status(500).json(serverError.toResponseObject());\n            }\n        }\n    };\n}\n"],"names":[],"mappings":";;AAaA,MAAM,mCAAmC,EAAE,OAAO;AAAA,EAC9C,WAAW,EAAE,OAAA;AAAA,EACb,eAAe,EAAE,OAAA,EAAS,SAAA;AAC9B,CAAC;AAWM,SAAS,mBAAmB,EAAE,gBAAuE;AACxG,SAAO,OAAO,KAAK,KAAK,SAAS;AAC7B,QAAI;AACA,YAAM,SAAS,iCAAiC,UAAU,IAAI,IAAI;AAClE,UAAI,CAAC,OAAO,SAAS;AACjB,cAAM,IAAI,oBAAoB,OAAO,OAAO,KAAK,CAAC;AAAA,MACtD;AAEA,YAAM,EAAE,WAAW,cAAA,IAAkB,OAAO;AAC5C,YAAM,SAAS,MAAM,aAAa,UAAU,SAAS;AACrD,UAAI,CAAC,QAAQ;AACT,cAAM,IAAI,mBAAmB,mBAAmB;AAAA,MACpD;AAGA,UAAI,OAAO,eAAe;AAEtB,YAAI,CAAC,eAAe;AAChB,gBAAM,IAAI,mBAAmB,2BAA2B;AAAA,QAC5D;AAGA,YAAI,OAAO,kBAAkB,eAAe;AACxC,gBAAM,IAAI,mBAAmB,uBAAuB;AAAA,QACxD;AAGA,YAAI,OAAO,4BAA4B,OAAO,2BAA2B,KAAK,MAAM,KAAK,QAAQ,GAAI,GAAG;AACpG,gBAAM,IAAI,mBAAmB,2BAA2B;AAAA,QAC5D;AAAA,MACJ;AAEA,UAAI,SAAS;AACb,WAAA;AAAA,IACJ,SAAS,OAAO;AACZ,UAAI,iBAAiB,YAAY;AAC7B,cAAM,SAAS,iBAAiB,cAAc,MAAM;AACpD,YAAI,OAAO,MAAM,EAAE,KAAK,MAAM,kBAAkB;AAAA,MACpD,OAAO;AACH,cAAM,cAAc,IAAI,YAAY,uBAAuB;AAC3D,YAAI,OAAO,GAAG,EAAE,KAAK,YAAY,kBAAkB;AAAA,MACvD;AAAA,IACJ;AAAA,EACJ;AACJ;"}