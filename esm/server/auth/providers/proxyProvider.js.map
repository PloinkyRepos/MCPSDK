{"version":3,"file":"proxyProvider.js","sources":["../../../../../src/server/auth/providers/proxyProvider.ts"],"sourcesContent":["import { Response } from 'express';\nimport { OAuthRegisteredClientsStore } from '../clients.js';\nimport {\n    OAuthClientInformationFull,\n    OAuthClientInformationFullSchema,\n    OAuthTokenRevocationRequest,\n    OAuthTokens,\n    OAuthTokensSchema\n} from '../../../shared/auth.js';\nimport { AuthInfo } from '../types.js';\nimport { AuthorizationParams, OAuthServerProvider } from '../provider.js';\nimport { ServerError } from '../errors.js';\nimport { FetchLike } from '../../../shared/transport.js';\n\nexport type ProxyEndpoints = {\n    authorizationUrl: string;\n    tokenUrl: string;\n    revocationUrl?: string;\n    registrationUrl?: string;\n};\n\nexport type ProxyOptions = {\n    /**\n     * Individual endpoint URLs for proxying specific OAuth operations\n     */\n    endpoints: ProxyEndpoints;\n\n    /**\n     * Function to verify access tokens and return auth info\n     */\n    verifyAccessToken: (token: string) => Promise<AuthInfo>;\n\n    /**\n     * Function to fetch client information from the upstream server\n     */\n    getClient: (clientId: string) => Promise<OAuthClientInformationFull | undefined>;\n\n    /**\n     * Custom fetch implementation used for all network requests.\n     */\n    fetch?: FetchLike;\n};\n\n/**\n * Implements an OAuth server that proxies requests to another OAuth server.\n */\nexport class ProxyOAuthServerProvider implements OAuthServerProvider {\n    protected readonly _endpoints: ProxyEndpoints;\n    protected readonly _verifyAccessToken: (token: string) => Promise<AuthInfo>;\n    protected readonly _getClient: (clientId: string) => Promise<OAuthClientInformationFull | undefined>;\n    protected readonly _fetch?: FetchLike;\n\n    skipLocalPkceValidation = true;\n\n    revokeToken?: (client: OAuthClientInformationFull, request: OAuthTokenRevocationRequest) => Promise<void>;\n\n    constructor(options: ProxyOptions) {\n        this._endpoints = options.endpoints;\n        this._verifyAccessToken = options.verifyAccessToken;\n        this._getClient = options.getClient;\n        this._fetch = options.fetch;\n        if (options.endpoints?.revocationUrl) {\n            this.revokeToken = async (client: OAuthClientInformationFull, request: OAuthTokenRevocationRequest) => {\n                const revocationUrl = this._endpoints.revocationUrl;\n\n                if (!revocationUrl) {\n                    throw new Error('No revocation endpoint configured');\n                }\n\n                const params = new URLSearchParams();\n                params.set('token', request.token);\n                params.set('client_id', client.client_id);\n                if (client.client_secret) {\n                    params.set('client_secret', client.client_secret);\n                }\n                if (request.token_type_hint) {\n                    params.set('token_type_hint', request.token_type_hint);\n                }\n\n                const response = await (this._fetch ?? fetch)(revocationUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded'\n                    },\n                    body: params.toString()\n                });\n\n                if (!response.ok) {\n                    throw new ServerError(`Token revocation failed: ${response.status}`);\n                }\n            };\n        }\n    }\n\n    get clientsStore(): OAuthRegisteredClientsStore {\n        const registrationUrl = this._endpoints.registrationUrl;\n        return {\n            getClient: this._getClient,\n            ...(registrationUrl && {\n                registerClient: async (client: OAuthClientInformationFull) => {\n                    const response = await (this._fetch ?? fetch)(registrationUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify(client)\n                    });\n\n                    if (!response.ok) {\n                        throw new ServerError(`Client registration failed: ${response.status}`);\n                    }\n\n                    const data = await response.json();\n                    return OAuthClientInformationFullSchema.parse(data);\n                }\n            })\n        };\n    }\n\n    async authorize(client: OAuthClientInformationFull, params: AuthorizationParams, res: Response): Promise<void> {\n        // Start with required OAuth parameters\n        const targetUrl = new URL(this._endpoints.authorizationUrl);\n        const searchParams = new URLSearchParams({\n            client_id: client.client_id,\n            response_type: 'code',\n            redirect_uri: params.redirectUri,\n            code_challenge: params.codeChallenge,\n            code_challenge_method: 'S256'\n        });\n\n        // Add optional standard OAuth parameters\n        if (params.state) searchParams.set('state', params.state);\n        if (params.scopes?.length) searchParams.set('scope', params.scopes.join(' '));\n        if (params.resource) searchParams.set('resource', params.resource.href);\n\n        targetUrl.search = searchParams.toString();\n        res.redirect(targetUrl.toString());\n    }\n\n    async challengeForAuthorizationCode(_client: OAuthClientInformationFull, _authorizationCode: string): Promise<string> {\n        // In a proxy setup, we don't store the code challenge ourselves\n        // Instead, we proxy the token request and let the upstream server validate it\n        return '';\n    }\n\n    async exchangeAuthorizationCode(\n        client: OAuthClientInformationFull,\n        authorizationCode: string,\n        codeVerifier?: string,\n        redirectUri?: string,\n        resource?: URL\n    ): Promise<OAuthTokens> {\n        const params = new URLSearchParams({\n            grant_type: 'authorization_code',\n            client_id: client.client_id,\n            code: authorizationCode\n        });\n\n        if (client.client_secret) {\n            params.append('client_secret', client.client_secret);\n        }\n\n        if (codeVerifier) {\n            params.append('code_verifier', codeVerifier);\n        }\n\n        if (redirectUri) {\n            params.append('redirect_uri', redirectUri);\n        }\n\n        if (resource) {\n            params.append('resource', resource.href);\n        }\n\n        const response = await (this._fetch ?? fetch)(this._endpoints.tokenUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: params.toString()\n        });\n\n        if (!response.ok) {\n            throw new ServerError(`Token exchange failed: ${response.status}`);\n        }\n\n        const data = await response.json();\n        return OAuthTokensSchema.parse(data);\n    }\n\n    async exchangeRefreshToken(\n        client: OAuthClientInformationFull,\n        refreshToken: string,\n        scopes?: string[],\n        resource?: URL\n    ): Promise<OAuthTokens> {\n        const params = new URLSearchParams({\n            grant_type: 'refresh_token',\n            client_id: client.client_id,\n            refresh_token: refreshToken\n        });\n\n        if (client.client_secret) {\n            params.set('client_secret', client.client_secret);\n        }\n\n        if (scopes?.length) {\n            params.set('scope', scopes.join(' '));\n        }\n\n        if (resource) {\n            params.set('resource', resource.href);\n        }\n\n        const response = await (this._fetch ?? fetch)(this._endpoints.tokenUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: params.toString()\n        });\n\n        if (!response.ok) {\n            throw new ServerError(`Token refresh failed: ${response.status}`);\n        }\n\n        const data = await response.json();\n        return OAuthTokensSchema.parse(data);\n    }\n\n    async verifyAccessToken(token: string): Promise<AuthInfo> {\n        return this._verifyAccessToken(token);\n    }\n}\n"],"names":[],"mappings":"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"}