{"version":3,"file":"token.js","sources":["../../../../../src/server/auth/handlers/token.ts"],"sourcesContent":["import { z } from 'zod';\nimport express, { RequestHandler } from 'express';\nimport { OAuthServerProvider } from '../provider.js';\nimport cors from 'cors';\nimport { verifyChallenge } from 'pkce-challenge';\nimport { authenticateClient } from '../middleware/clientAuth.js';\nimport { rateLimit, Options as RateLimitOptions } from 'express-rate-limit';\nimport { allowedMethods } from '../middleware/allowedMethods.js';\nimport {\n    InvalidRequestError,\n    InvalidGrantError,\n    UnsupportedGrantTypeError,\n    ServerError,\n    TooManyRequestsError,\n    OAuthError\n} from '../errors.js';\n\nexport type TokenHandlerOptions = {\n    provider: OAuthServerProvider;\n    /**\n     * Rate limiting configuration for the token endpoint.\n     * Set to false to disable rate limiting for this endpoint.\n     */\n    rateLimit?: Partial<RateLimitOptions> | false;\n};\n\nconst TokenRequestSchema = z.object({\n    grant_type: z.string()\n});\n\nconst AuthorizationCodeGrantSchema = z.object({\n    code: z.string(),\n    code_verifier: z.string(),\n    redirect_uri: z.string().optional(),\n    resource: z.string().url().optional()\n});\n\nconst RefreshTokenGrantSchema = z.object({\n    refresh_token: z.string(),\n    scope: z.string().optional(),\n    resource: z.string().url().optional()\n});\n\nexport function tokenHandler({ provider, rateLimit: rateLimitConfig }: TokenHandlerOptions): RequestHandler {\n    // Nested router so we can configure middleware and restrict HTTP method\n    const router = express.Router();\n\n    // Configure CORS to allow any origin, to make accessible to web-based MCP clients\n    router.use(cors());\n\n    router.use(allowedMethods(['POST']));\n    router.use(express.urlencoded({ extended: false }));\n\n    // Apply rate limiting unless explicitly disabled\n    if (rateLimitConfig !== false) {\n        router.use(\n            rateLimit({\n                windowMs: 15 * 60 * 1000, // 15 minutes\n                max: 50, // 50 requests per windowMs\n                standardHeaders: true,\n                legacyHeaders: false,\n                message: new TooManyRequestsError('You have exceeded the rate limit for token requests').toResponseObject(),\n                ...rateLimitConfig\n            })\n        );\n    }\n\n    // Authenticate and extract client details\n    router.use(authenticateClient({ clientsStore: provider.clientsStore }));\n\n    router.post('/', async (req, res) => {\n        res.setHeader('Cache-Control', 'no-store');\n\n        try {\n            const parseResult = TokenRequestSchema.safeParse(req.body);\n            if (!parseResult.success) {\n                throw new InvalidRequestError(parseResult.error.message);\n            }\n\n            const { grant_type } = parseResult.data;\n\n            const client = req.client;\n            if (!client) {\n                // This should never happen\n                throw new ServerError('Internal Server Error');\n            }\n\n            switch (grant_type) {\n                case 'authorization_code': {\n                    const parseResult = AuthorizationCodeGrantSchema.safeParse(req.body);\n                    if (!parseResult.success) {\n                        throw new InvalidRequestError(parseResult.error.message);\n                    }\n\n                    const { code, code_verifier, redirect_uri, resource } = parseResult.data;\n\n                    const skipLocalPkceValidation = provider.skipLocalPkceValidation;\n\n                    // Perform local PKCE validation unless explicitly skipped\n                    // (e.g. to validate code_verifier in upstream server)\n                    if (!skipLocalPkceValidation) {\n                        const codeChallenge = await provider.challengeForAuthorizationCode(client, code);\n                        if (!(await verifyChallenge(code_verifier, codeChallenge))) {\n                            throw new InvalidGrantError('code_verifier does not match the challenge');\n                        }\n                    }\n\n                    // Passes the code_verifier to the provider if PKCE validation didn't occur locally\n                    const tokens = await provider.exchangeAuthorizationCode(\n                        client,\n                        code,\n                        skipLocalPkceValidation ? code_verifier : undefined,\n                        redirect_uri,\n                        resource ? new URL(resource) : undefined\n                    );\n                    res.status(200).json(tokens);\n                    break;\n                }\n\n                case 'refresh_token': {\n                    const parseResult = RefreshTokenGrantSchema.safeParse(req.body);\n                    if (!parseResult.success) {\n                        throw new InvalidRequestError(parseResult.error.message);\n                    }\n\n                    const { refresh_token, scope, resource } = parseResult.data;\n\n                    const scopes = scope?.split(' ');\n                    const tokens = await provider.exchangeRefreshToken(\n                        client,\n                        refresh_token,\n                        scopes,\n                        resource ? new URL(resource) : undefined\n                    );\n                    res.status(200).json(tokens);\n                    break;\n                }\n\n                // Not supported right now\n                //case \"client_credentials\":\n\n                default:\n                    throw new UnsupportedGrantTypeError('The grant type is not supported by this authorization server.');\n            }\n        } catch (error) {\n            if (error instanceof OAuthError) {\n                const status = error instanceof ServerError ? 500 : 400;\n                res.status(status).json(error.toResponseObject());\n            } else {\n                const serverError = new ServerError('Internal Server Error');\n                res.status(500).json(serverError.toResponseObject());\n            }\n        }\n    });\n\n    return router;\n}\n"],"names":["parseResult"],"mappings":"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"}