{"version":3,"file":"simpleStreamableHttp.js","sources":["../../../../src/examples/server/simpleStreamableHttp.ts"],"sourcesContent":["import express, { Request, Response } from 'express';\nimport { randomUUID } from 'node:crypto';\nimport { z } from 'zod';\nimport { McpServer } from '../../server/mcp.js';\nimport { StreamableHTTPServerTransport } from '../../server/streamableHttp.js';\nimport { getOAuthProtectedResourceMetadataUrl, mcpAuthMetadataRouter } from '../../server/auth/router.js';\nimport { requireBearerAuth } from '../../server/auth/middleware/bearerAuth.js';\nimport {\n    CallToolResult,\n    GetPromptResult,\n    isInitializeRequest,\n    PrimitiveSchemaDefinition,\n    ReadResourceResult,\n    ResourceLink\n} from '../../types.js';\nimport { InMemoryEventStore } from '../shared/inMemoryEventStore.js';\nimport { setupAuthServer } from './demoInMemoryOAuthProvider.js';\nimport { OAuthMetadata } from 'src/shared/auth.js';\nimport { checkResourceAllowed } from 'src/shared/auth-utils.js';\n\nimport cors from 'cors';\n\n// Check for OAuth flag\nconst useOAuth = process.argv.includes('--oauth');\nconst strictOAuth = process.argv.includes('--oauth-strict');\n\n// Create an MCP server with implementation details\nconst getServer = () => {\n    const server = new McpServer(\n        {\n            name: 'simple-streamable-http-server',\n            version: '1.0.0',\n            icons: [{ src: './mcp.svg', sizes: ['512x512'], mimeType: 'image/svg+xml' }],\n            websiteUrl: 'https://github.com/modelcontextprotocol/typescript-sdk'\n        },\n        { capabilities: { logging: {} } }\n    );\n\n    // Register a simple tool that returns a greeting\n    server.registerTool(\n        'greet',\n        {\n            title: 'Greeting Tool', // Display name for UI\n            description: 'A simple greeting tool',\n            inputSchema: {\n                name: z.string().describe('Name to greet')\n            }\n        },\n        async ({ name }): Promise<CallToolResult> => {\n            return {\n                content: [\n                    {\n                        type: 'text',\n                        text: `Hello, ${name}!`\n                    }\n                ]\n            };\n        }\n    );\n\n    // Register a tool that sends multiple greetings with notifications (with annotations)\n    server.tool(\n        'multi-greet',\n        'A tool that sends different greetings with delays between them',\n        {\n            name: z.string().describe('Name to greet')\n        },\n        {\n            title: 'Multiple Greeting Tool',\n            readOnlyHint: true,\n            openWorldHint: false\n        },\n        async ({ name }, extra): Promise<CallToolResult> => {\n            const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n            await server.sendLoggingMessage(\n                {\n                    level: 'debug',\n                    data: `Starting multi-greet for ${name}`\n                },\n                extra.sessionId\n            );\n\n            await sleep(1000); // Wait 1 second before first greeting\n\n            await server.sendLoggingMessage(\n                {\n                    level: 'info',\n                    data: `Sending first greeting to ${name}`\n                },\n                extra.sessionId\n            );\n\n            await sleep(1000); // Wait another second before second greeting\n\n            await server.sendLoggingMessage(\n                {\n                    level: 'info',\n                    data: `Sending second greeting to ${name}`\n                },\n                extra.sessionId\n            );\n\n            return {\n                content: [\n                    {\n                        type: 'text',\n                        text: `Good morning, ${name}!`\n                    }\n                ]\n            };\n        }\n    );\n    // Register a tool that demonstrates elicitation (user input collection)\n    // This creates a closure that captures the server instance\n    server.tool(\n        'collect-user-info',\n        'A tool that collects user information through elicitation',\n        {\n            infoType: z.enum(['contact', 'preferences', 'feedback']).describe('Type of information to collect')\n        },\n        async ({ infoType }): Promise<CallToolResult> => {\n            let message: string;\n            let requestedSchema: {\n                type: 'object';\n                properties: Record<string, PrimitiveSchemaDefinition>;\n                required?: string[];\n            };\n\n            switch (infoType) {\n                case 'contact':\n                    message = 'Please provide your contact information';\n                    requestedSchema = {\n                        type: 'object',\n                        properties: {\n                            name: {\n                                type: 'string',\n                                title: 'Full Name',\n                                description: 'Your full name'\n                            },\n                            email: {\n                                type: 'string',\n                                title: 'Email Address',\n                                description: 'Your email address',\n                                format: 'email'\n                            },\n                            phone: {\n                                type: 'string',\n                                title: 'Phone Number',\n                                description: 'Your phone number (optional)'\n                            }\n                        },\n                        required: ['name', 'email']\n                    };\n                    break;\n                case 'preferences':\n                    message = 'Please set your preferences';\n                    requestedSchema = {\n                        type: 'object',\n                        properties: {\n                            theme: {\n                                type: 'string',\n                                title: 'Theme',\n                                description: 'Choose your preferred theme',\n                                enum: ['light', 'dark', 'auto'],\n                                enumNames: ['Light', 'Dark', 'Auto']\n                            },\n                            notifications: {\n                                type: 'boolean',\n                                title: 'Enable Notifications',\n                                description: 'Would you like to receive notifications?',\n                                default: true\n                            },\n                            frequency: {\n                                type: 'string',\n                                title: 'Notification Frequency',\n                                description: 'How often would you like notifications?',\n                                enum: ['daily', 'weekly', 'monthly'],\n                                enumNames: ['Daily', 'Weekly', 'Monthly']\n                            }\n                        },\n                        required: ['theme']\n                    };\n                    break;\n                case 'feedback':\n                    message = 'Please provide your feedback';\n                    requestedSchema = {\n                        type: 'object',\n                        properties: {\n                            rating: {\n                                type: 'integer',\n                                title: 'Rating',\n                                description: 'Rate your experience (1-5)',\n                                minimum: 1,\n                                maximum: 5\n                            },\n                            comments: {\n                                type: 'string',\n                                title: 'Comments',\n                                description: 'Additional comments (optional)',\n                                maxLength: 500\n                            },\n                            recommend: {\n                                type: 'boolean',\n                                title: 'Would you recommend this?',\n                                description: 'Would you recommend this to others?'\n                            }\n                        },\n                        required: ['rating', 'recommend']\n                    };\n                    break;\n                default:\n                    throw new Error(`Unknown info type: ${infoType}`);\n            }\n\n            try {\n                // Use the underlying server instance to elicit input from the client\n                const result = await server.server.elicitInput({\n                    message,\n                    requestedSchema\n                });\n\n                if (result.action === 'accept') {\n                    return {\n                        content: [\n                            {\n                                type: 'text',\n                                text: `Thank you! Collected ${infoType} information: ${JSON.stringify(result.content, null, 2)}`\n                            }\n                        ]\n                    };\n                } else if (result.action === 'decline') {\n                    return {\n                        content: [\n                            {\n                                type: 'text',\n                                text: `No information was collected. User declined ${infoType} information request.`\n                            }\n                        ]\n                    };\n                } else {\n                    return {\n                        content: [\n                            {\n                                type: 'text',\n                                text: `Information collection was cancelled by the user.`\n                            }\n                        ]\n                    };\n                }\n            } catch (error) {\n                return {\n                    content: [\n                        {\n                            type: 'text',\n                            text: `Error collecting ${infoType} information: ${error}`\n                        }\n                    ]\n                };\n            }\n        }\n    );\n\n    // Register a simple prompt with title\n    server.registerPrompt(\n        'greeting-template',\n        {\n            title: 'Greeting Template', // Display name for UI\n            description: 'A simple greeting prompt template',\n            argsSchema: {\n                name: z.string().describe('Name to include in greeting')\n            }\n        },\n        async ({ name }): Promise<GetPromptResult> => {\n            return {\n                messages: [\n                    {\n                        role: 'user',\n                        content: {\n                            type: 'text',\n                            text: `Please greet ${name} in a friendly manner.`\n                        }\n                    }\n                ]\n            };\n        }\n    );\n\n    // Register a tool specifically for testing resumability\n    server.tool(\n        'start-notification-stream',\n        'Starts sending periodic notifications for testing resumability',\n        {\n            interval: z.number().describe('Interval in milliseconds between notifications').default(100),\n            count: z.number().describe('Number of notifications to send (0 for 100)').default(50)\n        },\n        async ({ interval, count }, extra): Promise<CallToolResult> => {\n            const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n            let counter = 0;\n\n            while (count === 0 || counter < count) {\n                counter++;\n                try {\n                    await server.sendLoggingMessage(\n                        {\n                            level: 'info',\n                            data: `Periodic notification #${counter} at ${new Date().toISOString()}`\n                        },\n                        extra.sessionId\n                    );\n                } catch (error) {\n                    console.error('Error sending notification:', error);\n                }\n                // Wait for the specified interval\n                await sleep(interval);\n            }\n\n            return {\n                content: [\n                    {\n                        type: 'text',\n                        text: `Started sending periodic notifications every ${interval}ms`\n                    }\n                ]\n            };\n        }\n    );\n\n    // Create a simple resource at a fixed URI\n    server.registerResource(\n        'greeting-resource',\n        'https://example.com/greetings/default',\n        {\n            title: 'Default Greeting', // Display name for UI\n            description: 'A simple greeting resource',\n            mimeType: 'text/plain'\n        },\n        async (): Promise<ReadResourceResult> => {\n            return {\n                contents: [\n                    {\n                        uri: 'https://example.com/greetings/default',\n                        text: 'Hello, world!'\n                    }\n                ]\n            };\n        }\n    );\n\n    // Create additional resources for ResourceLink demonstration\n    server.registerResource(\n        'example-file-1',\n        'file:///example/file1.txt',\n        {\n            title: 'Example File 1',\n            description: 'First example file for ResourceLink demonstration',\n            mimeType: 'text/plain'\n        },\n        async (): Promise<ReadResourceResult> => {\n            return {\n                contents: [\n                    {\n                        uri: 'file:///example/file1.txt',\n                        text: 'This is the content of file 1'\n                    }\n                ]\n            };\n        }\n    );\n\n    server.registerResource(\n        'example-file-2',\n        'file:///example/file2.txt',\n        {\n            title: 'Example File 2',\n            description: 'Second example file for ResourceLink demonstration',\n            mimeType: 'text/plain'\n        },\n        async (): Promise<ReadResourceResult> => {\n            return {\n                contents: [\n                    {\n                        uri: 'file:///example/file2.txt',\n                        text: 'This is the content of file 2'\n                    }\n                ]\n            };\n        }\n    );\n\n    // Register a tool that returns ResourceLinks\n    server.registerTool(\n        'list-files',\n        {\n            title: 'List Files with ResourceLinks',\n            description: 'Returns a list of files as ResourceLinks without embedding their content',\n            inputSchema: {\n                includeDescriptions: z.boolean().optional().describe('Whether to include descriptions in the resource links')\n            }\n        },\n        async ({ includeDescriptions = true }): Promise<CallToolResult> => {\n            const resourceLinks: ResourceLink[] = [\n                {\n                    type: 'resource_link',\n                    uri: 'https://example.com/greetings/default',\n                    name: 'Default Greeting',\n                    mimeType: 'text/plain',\n                    ...(includeDescriptions && { description: 'A simple greeting resource' })\n                },\n                {\n                    type: 'resource_link',\n                    uri: 'file:///example/file1.txt',\n                    name: 'Example File 1',\n                    mimeType: 'text/plain',\n                    ...(includeDescriptions && { description: 'First example file for ResourceLink demonstration' })\n                },\n                {\n                    type: 'resource_link',\n                    uri: 'file:///example/file2.txt',\n                    name: 'Example File 2',\n                    mimeType: 'text/plain',\n                    ...(includeDescriptions && { description: 'Second example file for ResourceLink demonstration' })\n                }\n            ];\n\n            return {\n                content: [\n                    {\n                        type: 'text',\n                        text: 'Here are the available files as resource links:'\n                    },\n                    ...resourceLinks,\n                    {\n                        type: 'text',\n                        text: '\\nYou can read any of these resources using their URI.'\n                    }\n                ]\n            };\n        }\n    );\n\n    return server;\n};\n\nconst MCP_PORT = process.env.MCP_PORT ? parseInt(process.env.MCP_PORT, 10) : 3000;\nconst AUTH_PORT = process.env.MCP_AUTH_PORT ? parseInt(process.env.MCP_AUTH_PORT, 10) : 3001;\n\nconst app = express();\napp.use(express.json());\n\n// Allow CORS all domains, expose the Mcp-Session-Id header\napp.use(\n    cors({\n        origin: '*', // Allow all origins\n        exposedHeaders: ['Mcp-Session-Id']\n    })\n);\n\n// Set up OAuth if enabled\nlet authMiddleware = null;\nif (useOAuth) {\n    // Create auth middleware for MCP endpoints\n    const mcpServerUrl = new URL(`http://localhost:${MCP_PORT}/mcp`);\n    const authServerUrl = new URL(`http://localhost:${AUTH_PORT}`);\n\n    const oauthMetadata: OAuthMetadata = setupAuthServer({ authServerUrl, mcpServerUrl, strictResource: strictOAuth });\n\n    const tokenVerifier = {\n        verifyAccessToken: async (token: string) => {\n            const endpoint = oauthMetadata.introspection_endpoint;\n\n            if (!endpoint) {\n                throw new Error('No token verification endpoint available in metadata');\n            }\n\n            const response = await fetch(endpoint, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                },\n                body: new URLSearchParams({\n                    token: token\n                }).toString()\n            });\n\n            if (!response.ok) {\n                throw new Error(`Invalid or expired token: ${await response.text()}`);\n            }\n\n            const data = await response.json();\n\n            if (strictOAuth) {\n                if (!data.aud) {\n                    throw new Error(`Resource Indicator (RFC8707) missing`);\n                }\n                if (!checkResourceAllowed({ requestedResource: data.aud, configuredResource: mcpServerUrl })) {\n                    throw new Error(`Expected resource indicator ${mcpServerUrl}, got: ${data.aud}`);\n                }\n            }\n\n            // Convert the response to AuthInfo format\n            return {\n                token,\n                clientId: data.client_id,\n                scopes: data.scope ? data.scope.split(' ') : [],\n                expiresAt: data.exp\n            };\n        }\n    };\n    // Add metadata routes to the main MCP server\n    app.use(\n        mcpAuthMetadataRouter({\n            oauthMetadata,\n            resourceServerUrl: mcpServerUrl,\n            scopesSupported: ['mcp:tools'],\n            resourceName: 'MCP Demo Server'\n        })\n    );\n\n    authMiddleware = requireBearerAuth({\n        verifier: tokenVerifier,\n        requiredScopes: [],\n        resourceMetadataUrl: getOAuthProtectedResourceMetadataUrl(mcpServerUrl)\n    });\n}\n\n// Map to store transports by session ID\nconst transports: { [sessionId: string]: StreamableHTTPServerTransport } = {};\n\n// MCP POST endpoint with optional auth\nconst mcpPostHandler = async (req: Request, res: Response) => {\n    const sessionId = req.headers['mcp-session-id'] as string | undefined;\n    if (sessionId) {\n        console.log(`Received MCP request for session: ${sessionId}`);\n    } else {\n        console.log('Request body:', req.body);\n    }\n\n    if (useOAuth && req.auth) {\n        console.log('Authenticated user:', req.auth);\n    }\n    try {\n        let transport: StreamableHTTPServerTransport;\n        if (sessionId && transports[sessionId]) {\n            // Reuse existing transport\n            transport = transports[sessionId];\n        } else if (!sessionId && isInitializeRequest(req.body)) {\n            // New initialization request\n            const eventStore = new InMemoryEventStore();\n            transport = new StreamableHTTPServerTransport({\n                sessionIdGenerator: () => randomUUID(),\n                eventStore, // Enable resumability\n                onsessioninitialized: sessionId => {\n                    // Store the transport by session ID when session is initialized\n                    // This avoids race conditions where requests might come in before the session is stored\n                    console.log(`Session initialized with ID: ${sessionId}`);\n                    transports[sessionId] = transport;\n                }\n            });\n\n            // Set up onclose handler to clean up transport when closed\n            transport.onclose = () => {\n                const sid = transport.sessionId;\n                if (sid && transports[sid]) {\n                    console.log(`Transport closed for session ${sid}, removing from transports map`);\n                    delete transports[sid];\n                }\n            };\n\n            // Connect the transport to the MCP server BEFORE handling the request\n            // so responses can flow back through the same transport\n            const server = getServer();\n            await server.connect(transport);\n\n            await transport.handleRequest(req, res, req.body);\n            return; // Already handled\n        } else {\n            // Invalid request - no session ID or not initialization request\n            res.status(400).json({\n                jsonrpc: '2.0',\n                error: {\n                    code: -32000,\n                    message: 'Bad Request: No valid session ID provided'\n                },\n                id: null\n            });\n            return;\n        }\n\n        // Handle the request with existing transport - no need to reconnect\n        // The existing transport is already connected to the server\n        await transport.handleRequest(req, res, req.body);\n    } catch (error) {\n        console.error('Error handling MCP request:', error);\n        if (!res.headersSent) {\n            res.status(500).json({\n                jsonrpc: '2.0',\n                error: {\n                    code: -32603,\n                    message: 'Internal server error'\n                },\n                id: null\n            });\n        }\n    }\n};\n\n// Set up routes with conditional auth middleware\nif (useOAuth && authMiddleware) {\n    app.post('/mcp', authMiddleware, mcpPostHandler);\n} else {\n    app.post('/mcp', mcpPostHandler);\n}\n\n// Handle GET requests for SSE streams (using built-in support from StreamableHTTP)\nconst mcpGetHandler = async (req: Request, res: Response) => {\n    const sessionId = req.headers['mcp-session-id'] as string | undefined;\n    if (!sessionId || !transports[sessionId]) {\n        res.status(400).send('Invalid or missing session ID');\n        return;\n    }\n\n    if (useOAuth && req.auth) {\n        console.log('Authenticated SSE connection from user:', req.auth);\n    }\n\n    // Check for Last-Event-ID header for resumability\n    const lastEventId = req.headers['last-event-id'] as string | undefined;\n    if (lastEventId) {\n        console.log(`Client reconnecting with Last-Event-ID: ${lastEventId}`);\n    } else {\n        console.log(`Establishing new SSE stream for session ${sessionId}`);\n    }\n\n    const transport = transports[sessionId];\n    await transport.handleRequest(req, res);\n};\n\n// Set up GET route with conditional auth middleware\nif (useOAuth && authMiddleware) {\n    app.get('/mcp', authMiddleware, mcpGetHandler);\n} else {\n    app.get('/mcp', mcpGetHandler);\n}\n\n// Handle DELETE requests for session termination (according to MCP spec)\nconst mcpDeleteHandler = async (req: Request, res: Response) => {\n    const sessionId = req.headers['mcp-session-id'] as string | undefined;\n    if (!sessionId || !transports[sessionId]) {\n        res.status(400).send('Invalid or missing session ID');\n        return;\n    }\n\n    console.log(`Received session termination request for session ${sessionId}`);\n\n    try {\n        const transport = transports[sessionId];\n        await transport.handleRequest(req, res);\n    } catch (error) {\n        console.error('Error handling session termination:', error);\n        if (!res.headersSent) {\n            res.status(500).send('Error processing session termination');\n        }\n    }\n};\n\n// Set up DELETE route with conditional auth middleware\nif (useOAuth && authMiddleware) {\n    app.delete('/mcp', authMiddleware, mcpDeleteHandler);\n} else {\n    app.delete('/mcp', mcpDeleteHandler);\n}\n\napp.listen(MCP_PORT, error => {\n    if (error) {\n        console.error('Failed to start server:', error);\n        process.exit(1);\n    }\n    console.log(`MCP Streamable HTTP Server listening on port ${MCP_PORT}`);\n});\n\n// Handle server shutdown\nprocess.on('SIGINT', async () => {\n    console.log('Shutting down server...');\n\n    // Close all active transports to properly clean up resources\n    for (const sessionId in transports) {\n        try {\n            console.log(`Closing transport for session ${sessionId}`);\n            await transports[sessionId].close();\n            delete transports[sessionId];\n        } catch (error) {\n            console.error(`Error closing transport for session ${sessionId}:`, error);\n        }\n    }\n    console.log('Server shutdown complete');\n    process.exit(0);\n});\n"],"names":["sessionId"],"mappings":";;;;;;;;;;;;;AAuBA,MAAM,WAAW,QAAQ,KAAK,SAAS,SAAS;AAChD,MAAM,cAAc,QAAQ,KAAK,SAAS,gBAAgB;AAG1D,MAAM,YAAY,MAAM;AACpB,QAAM,SAAS,IAAI;AAAA,IACf;AAAA,MACI,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAO,CAAC,EAAE,KAAK,aAAa,OAAO,CAAC,SAAS,GAAG,UAAU,iBAAiB;AAAA,MAC3E,YAAY;AAAA,IAAA;AAAA,IAEhB,EAAE,cAAc,EAAE,SAAS,KAAG;AAAA,EAAE;AAIpC,SAAO;AAAA,IACH;AAAA,IACA;AAAA,MACI,OAAO;AAAA;AAAA,MACP,aAAa;AAAA,MACb,aAAa;AAAA,QACT,MAAM,EAAE,OAAA,EAAS,SAAS,eAAe;AAAA,MAAA;AAAA,IAC7C;AAAA,IAEJ,OAAO,EAAE,KAAA,MAAoC;AACzC,aAAO;AAAA,QACH,SAAS;AAAA,UACL;AAAA,YACI,MAAM;AAAA,YACN,MAAM,UAAU,IAAI;AAAA,UAAA;AAAA,QACxB;AAAA,MACJ;AAAA,IAER;AAAA,EAAA;AAIJ,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,MACI,MAAM,EAAE,OAAA,EAAS,SAAS,eAAe;AAAA,IAAA;AAAA,IAE7C;AAAA,MACI,OAAO;AAAA,MACP,cAAc;AAAA,MACd,eAAe;AAAA,IAAA;AAAA,IAEnB,OAAO,EAAE,KAAA,GAAQ,UAAmC;AAChD,YAAM,QAAQ,CAAC,OAAe,IAAI,QAAQ,CAAA,YAAW,WAAW,SAAS,EAAE,CAAC;AAE5E,YAAM,OAAO;AAAA,QACT;AAAA,UACI,OAAO;AAAA,UACP,MAAM,4BAA4B,IAAI;AAAA,QAAA;AAAA,QAE1C,MAAM;AAAA,MAAA;AAGV,YAAM,MAAM,GAAI;AAEhB,YAAM,OAAO;AAAA,QACT;AAAA,UACI,OAAO;AAAA,UACP,MAAM,6BAA6B,IAAI;AAAA,QAAA;AAAA,QAE3C,MAAM;AAAA,MAAA;AAGV,YAAM,MAAM,GAAI;AAEhB,YAAM,OAAO;AAAA,QACT;AAAA,UACI,OAAO;AAAA,UACP,MAAM,8BAA8B,IAAI;AAAA,QAAA;AAAA,QAE5C,MAAM;AAAA,MAAA;AAGV,aAAO;AAAA,QACH,SAAS;AAAA,UACL;AAAA,YACI,MAAM;AAAA,YACN,MAAM,iBAAiB,IAAI;AAAA,UAAA;AAAA,QAC/B;AAAA,MACJ;AAAA,IAER;AAAA,EAAA;AAIJ,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,MACI,UAAU,EAAE,KAAK,CAAC,WAAW,eAAe,UAAU,CAAC,EAAE,SAAS,gCAAgC;AAAA,IAAA;AAAA,IAEtG,OAAO,EAAE,SAAA,MAAwC;AAC7C,UAAI;AACJ,UAAI;AAMJ,cAAQ,UAAA;AAAA,QACJ,KAAK;AACD,oBAAU;AACV,4BAAkB;AAAA,YACd,MAAM;AAAA,YACN,YAAY;AAAA,cACR,MAAM;AAAA,gBACF,MAAM;AAAA,gBACN,OAAO;AAAA,gBACP,aAAa;AAAA,cAAA;AAAA,cAEjB,OAAO;AAAA,gBACH,MAAM;AAAA,gBACN,OAAO;AAAA,gBACP,aAAa;AAAA,gBACb,QAAQ;AAAA,cAAA;AAAA,cAEZ,OAAO;AAAA,gBACH,MAAM;AAAA,gBACN,OAAO;AAAA,gBACP,aAAa;AAAA,cAAA;AAAA,YACjB;AAAA,YAEJ,UAAU,CAAC,QAAQ,OAAO;AAAA,UAAA;AAE9B;AAAA,QACJ,KAAK;AACD,oBAAU;AACV,4BAAkB;AAAA,YACd,MAAM;AAAA,YACN,YAAY;AAAA,cACR,OAAO;AAAA,gBACH,MAAM;AAAA,gBACN,OAAO;AAAA,gBACP,aAAa;AAAA,gBACb,MAAM,CAAC,SAAS,QAAQ,MAAM;AAAA,gBAC9B,WAAW,CAAC,SAAS,QAAQ,MAAM;AAAA,cAAA;AAAA,cAEvC,eAAe;AAAA,gBACX,MAAM;AAAA,gBACN,OAAO;AAAA,gBACP,aAAa;AAAA,gBACb,SAAS;AAAA,cAAA;AAAA,cAEb,WAAW;AAAA,gBACP,MAAM;AAAA,gBACN,OAAO;AAAA,gBACP,aAAa;AAAA,gBACb,MAAM,CAAC,SAAS,UAAU,SAAS;AAAA,gBACnC,WAAW,CAAC,SAAS,UAAU,SAAS;AAAA,cAAA;AAAA,YAC5C;AAAA,YAEJ,UAAU,CAAC,OAAO;AAAA,UAAA;AAEtB;AAAA,QACJ,KAAK;AACD,oBAAU;AACV,4BAAkB;AAAA,YACd,MAAM;AAAA,YACN,YAAY;AAAA,cACR,QAAQ;AAAA,gBACJ,MAAM;AAAA,gBACN,OAAO;AAAA,gBACP,aAAa;AAAA,gBACb,SAAS;AAAA,gBACT,SAAS;AAAA,cAAA;AAAA,cAEb,UAAU;AAAA,gBACN,MAAM;AAAA,gBACN,OAAO;AAAA,gBACP,aAAa;AAAA,gBACb,WAAW;AAAA,cAAA;AAAA,cAEf,WAAW;AAAA,gBACP,MAAM;AAAA,gBACN,OAAO;AAAA,gBACP,aAAa;AAAA,cAAA;AAAA,YACjB;AAAA,YAEJ,UAAU,CAAC,UAAU,WAAW;AAAA,UAAA;AAEpC;AAAA,QACJ;AACI,gBAAM,IAAI,MAAM,sBAAsB,QAAQ,EAAE;AAAA,MAAA;AAGxD,UAAI;AAEA,cAAM,SAAS,MAAM,OAAO,OAAO,YAAY;AAAA,UAC3C;AAAA,UACA;AAAA,QAAA,CACH;AAED,YAAI,OAAO,WAAW,UAAU;AAC5B,iBAAO;AAAA,YACH,SAAS;AAAA,cACL;AAAA,gBACI,MAAM;AAAA,gBACN,MAAM,wBAAwB,QAAQ,iBAAiB,KAAK,UAAU,OAAO,SAAS,MAAM,CAAC,CAAC;AAAA,cAAA;AAAA,YAClG;AAAA,UACJ;AAAA,QAER,WAAW,OAAO,WAAW,WAAW;AACpC,iBAAO;AAAA,YACH,SAAS;AAAA,cACL;AAAA,gBACI,MAAM;AAAA,gBACN,MAAM,+CAA+C,QAAQ;AAAA,cAAA;AAAA,YACjE;AAAA,UACJ;AAAA,QAER,OAAO;AACH,iBAAO;AAAA,YACH,SAAS;AAAA,cACL;AAAA,gBACI,MAAM;AAAA,gBACN,MAAM;AAAA,cAAA;AAAA,YACV;AAAA,UACJ;AAAA,QAER;AAAA,MACJ,SAAS,OAAO;AACZ,eAAO;AAAA,UACH,SAAS;AAAA,YACL;AAAA,cACI,MAAM;AAAA,cACN,MAAM,oBAAoB,QAAQ,iBAAiB,KAAK;AAAA,YAAA;AAAA,UAC5D;AAAA,QACJ;AAAA,MAER;AAAA,IACJ;AAAA,EAAA;AAIJ,SAAO;AAAA,IACH;AAAA,IACA;AAAA,MACI,OAAO;AAAA;AAAA,MACP,aAAa;AAAA,MACb,YAAY;AAAA,QACR,MAAM,EAAE,OAAA,EAAS,SAAS,6BAA6B;AAAA,MAAA;AAAA,IAC3D;AAAA,IAEJ,OAAO,EAAE,KAAA,MAAqC;AAC1C,aAAO;AAAA,QACH,UAAU;AAAA,UACN;AAAA,YACI,MAAM;AAAA,YACN,SAAS;AAAA,cACL,MAAM;AAAA,cACN,MAAM,gBAAgB,IAAI;AAAA,YAAA;AAAA,UAC9B;AAAA,QACJ;AAAA,MACJ;AAAA,IAER;AAAA,EAAA;AAIJ,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,MACI,UAAU,EAAE,OAAA,EAAS,SAAS,gDAAgD,EAAE,QAAQ,GAAG;AAAA,MAC3F,OAAO,EAAE,OAAA,EAAS,SAAS,6CAA6C,EAAE,QAAQ,EAAE;AAAA,IAAA;AAAA,IAExF,OAAO,EAAE,UAAU,MAAA,GAAS,UAAmC;AAC3D,YAAM,QAAQ,CAAC,OAAe,IAAI,QAAQ,CAAA,YAAW,WAAW,SAAS,EAAE,CAAC;AAC5E,UAAI,UAAU;AAEd,aAAO,UAAU,KAAK,UAAU,OAAO;AACnC;AACA,YAAI;AACA,gBAAM,OAAO;AAAA,YACT;AAAA,cACI,OAAO;AAAA,cACP,MAAM,0BAA0B,OAAO,4BAAW,KAAA,GAAO,aAAa;AAAA,YAAA;AAAA,YAE1E,MAAM;AAAA,UAAA;AAAA,QAEd,SAAS,OAAO;AACZ,kBAAQ,MAAM,+BAA+B,KAAK;AAAA,QACtD;AAEA,cAAM,MAAM,QAAQ;AAAA,MACxB;AAEA,aAAO;AAAA,QACH,SAAS;AAAA,UACL;AAAA,YACI,MAAM;AAAA,YACN,MAAM,gDAAgD,QAAQ;AAAA,UAAA;AAAA,QAClE;AAAA,MACJ;AAAA,IAER;AAAA,EAAA;AAIJ,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,MACI,OAAO;AAAA;AAAA,MACP,aAAa;AAAA,MACb,UAAU;AAAA,IAAA;AAAA,IAEd,YAAyC;AACrC,aAAO;AAAA,QACH,UAAU;AAAA,UACN;AAAA,YACI,KAAK;AAAA,YACL,MAAM;AAAA,UAAA;AAAA,QACV;AAAA,MACJ;AAAA,IAER;AAAA,EAAA;AAIJ,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP,aAAa;AAAA,MACb,UAAU;AAAA,IAAA;AAAA,IAEd,YAAyC;AACrC,aAAO;AAAA,QACH,UAAU;AAAA,UACN;AAAA,YACI,KAAK;AAAA,YACL,MAAM;AAAA,UAAA;AAAA,QACV;AAAA,MACJ;AAAA,IAER;AAAA,EAAA;AAGJ,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP,aAAa;AAAA,MACb,UAAU;AAAA,IAAA;AAAA,IAEd,YAAyC;AACrC,aAAO;AAAA,QACH,UAAU;AAAA,UACN;AAAA,YACI,KAAK;AAAA,YACL,MAAM;AAAA,UAAA;AAAA,QACV;AAAA,MACJ;AAAA,IAER;AAAA,EAAA;AAIJ,SAAO;AAAA,IACH;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP,aAAa;AAAA,MACb,aAAa;AAAA,QACT,qBAAqB,EAAE,QAAA,EAAU,SAAA,EAAW,SAAS,uDAAuD;AAAA,MAAA;AAAA,IAChH;AAAA,IAEJ,OAAO,EAAE,sBAAsB,WAAoC;AAC/D,YAAM,gBAAgC;AAAA,QAClC;AAAA,UACI,MAAM;AAAA,UACN,KAAK;AAAA,UACL,MAAM;AAAA,UACN,UAAU;AAAA,UACV,GAAI,uBAAuB,EAAE,aAAa,6BAAA;AAAA,QAA6B;AAAA,QAE3E;AAAA,UACI,MAAM;AAAA,UACN,KAAK;AAAA,UACL,MAAM;AAAA,UACN,UAAU;AAAA,UACV,GAAI,uBAAuB,EAAE,aAAa,oDAAA;AAAA,QAAoD;AAAA,QAElG;AAAA,UACI,MAAM;AAAA,UACN,KAAK;AAAA,UACL,MAAM;AAAA,UACN,UAAU;AAAA,UACV,GAAI,uBAAuB,EAAE,aAAa,qDAAA;AAAA,QAAqD;AAAA,MACnG;AAGJ,aAAO;AAAA,QACH,SAAS;AAAA,UACL;AAAA,YACI,MAAM;AAAA,YACN,MAAM;AAAA,UAAA;AAAA,UAEV,GAAG;AAAA,UACH;AAAA,YACI,MAAM;AAAA,YACN,MAAM;AAAA,UAAA;AAAA,QACV;AAAA,MACJ;AAAA,IAER;AAAA,EAAA;AAGJ,SAAO;AACX;AAEA,MAAM,WAAW,2BAAY,WAAW,SAAS,2BAAY,UAAU,EAAE,IAAI;AAC7E,MAAM,YAAY,2BAAY,gBAAgB,SAAS,2BAAY,eAAe,EAAE,IAAI;AAExF,MAAM,MAAM,QAAA;AACZ,IAAI,IAAI,QAAQ,MAAM;AAGtB,IAAI;AAAA,EACA,KAAK;AAAA,IACD,QAAQ;AAAA;AAAA,IACR,gBAAgB,CAAC,gBAAgB;AAAA,EAAA,CACpC;AACL;AAGA,IAAI,iBAAiB;AACrB,IAAI,UAAU;AAEV,QAAM,eAAe,IAAI,IAAI,oBAAoB,QAAQ,MAAM;AAC/D,QAAM,gBAAgB,IAAI,IAAI,oBAAoB,SAAS,EAAE;AAE7D,QAAM,gBAA+B,gBAAgB,EAAE,eAAe,cAAc,gBAAgB,aAAa;AAEjH,QAAM,gBAAgB;AAAA,IAClB,mBAAmB,OAAO,UAAkB;AACxC,YAAM,WAAW,cAAc;AAE/B,UAAI,CAAC,UAAU;AACX,cAAM,IAAI,MAAM,sDAAsD;AAAA,MAC1E;AAEA,YAAM,WAAW,MAAM,MAAM,UAAU;AAAA,QACnC,QAAQ;AAAA,QACR,SAAS;AAAA,UACL,gBAAgB;AAAA,QAAA;AAAA,QAEpB,MAAM,IAAI,gBAAgB;AAAA,UACtB;AAAA,QAAA,CACH,EAAE,SAAA;AAAA,MAAS,CACf;AAED,UAAI,CAAC,SAAS,IAAI;AACd,cAAM,IAAI,MAAM,6BAA6B,MAAM,SAAS,KAAA,CAAM,EAAE;AAAA,MACxE;AAEA,YAAM,OAAO,MAAM,SAAS,KAAA;AAE5B,UAAI,aAAa;AACb,YAAI,CAAC,KAAK,KAAK;AACX,gBAAM,IAAI,MAAM,sCAAsC;AAAA,QAC1D;AACA,YAAI,CAAC,qBAAqB,EAAE,mBAAmB,KAAK,KAAK,oBAAoB,aAAA,CAAc,GAAG;AAC1F,gBAAM,IAAI,MAAM,+BAA+B,YAAY,UAAU,KAAK,GAAG,EAAE;AAAA,QACnF;AAAA,MACJ;AAGA,aAAO;AAAA,QACH;AAAA,QACA,UAAU,KAAK;AAAA,QACf,QAAQ,KAAK,QAAQ,KAAK,MAAM,MAAM,GAAG,IAAI,CAAA;AAAA,QAC7C,WAAW,KAAK;AAAA,MAAA;AAAA,IAExB;AAAA,EAAA;AAGJ,MAAI;AAAA,IACA,sBAAsB;AAAA,MAClB;AAAA,MACA,mBAAmB;AAAA,MACnB,iBAAiB,CAAC,WAAW;AAAA,MAC7B,cAAc;AAAA,IAAA,CACjB;AAAA,EAAA;AAGL,mBAAiB,kBAAkB;AAAA,IAC/B,UAAU;AAAA,IACV,gBAAgB,CAAA;AAAA,IAChB,qBAAqB,qCAAqC,YAAY;AAAA,EAAA,CACzE;AACL;AAGA,MAAM,aAAqE,CAAA;AAG3E,MAAM,iBAAiB,OAAO,KAAc,QAAkB;AAC1D,QAAM,YAAY,IAAI,QAAQ,gBAAgB;AAC9C,MAAI,WAAW;AACX,YAAQ,IAAI,qCAAqC,SAAS,EAAE;AAAA,EAChE,OAAO;AACH,YAAQ,IAAI,iBAAiB,IAAI,IAAI;AAAA,EACzC;AAEA,MAAI,YAAY,IAAI,MAAM;AACtB,YAAQ,IAAI,uBAAuB,IAAI,IAAI;AAAA,EAC/C;AACA,MAAI;AACA,QAAI;AACJ,QAAI,aAAa,WAAW,SAAS,GAAG;AAEpC,kBAAY,WAAW,SAAS;AAAA,IACpC,WAAW,CAAC,aAAa,oBAAoB,IAAI,IAAI,GAAG;AAEpD,YAAM,aAAa,IAAI,mBAAA;AACvB,kBAAY,IAAI,8BAA8B;AAAA,QAC1C,oBAAoB,MAAM,WAAA;AAAA,QAC1B;AAAA;AAAA,QACA,sBAAsB,CAAAA,eAAa;AAG/B,kBAAQ,IAAI,gCAAgCA,UAAS,EAAE;AACvD,qBAAWA,UAAS,IAAI;AAAA,QAC5B;AAAA,MAAA,CACH;AAGD,gBAAU,UAAU,MAAM;AACtB,cAAM,MAAM,UAAU;AACtB,YAAI,OAAO,WAAW,GAAG,GAAG;AACxB,kBAAQ,IAAI,gCAAgC,GAAG,gCAAgC;AAC/E,iBAAO,WAAW,GAAG;AAAA,QACzB;AAAA,MACJ;AAIA,YAAM,SAAS,UAAA;AACf,YAAM,OAAO,QAAQ,SAAS;AAE9B,YAAM,UAAU,cAAc,KAAK,KAAK,IAAI,IAAI;AAChD;AAAA,IACJ,OAAO;AAEH,UAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QACjB,SAAS;AAAA,QACT,OAAO;AAAA,UACH,MAAM;AAAA,UACN,SAAS;AAAA,QAAA;AAAA,QAEb,IAAI;AAAA,MAAA,CACP;AACD;AAAA,IACJ;AAIA,UAAM,UAAU,cAAc,KAAK,KAAK,IAAI,IAAI;AAAA,EACpD,SAAS,OAAO;AACZ,YAAQ,MAAM,+BAA+B,KAAK;AAClD,QAAI,CAAC,IAAI,aAAa;AAClB,UAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QACjB,SAAS;AAAA,QACT,OAAO;AAAA,UACH,MAAM;AAAA,UACN,SAAS;AAAA,QAAA;AAAA,QAEb,IAAI;AAAA,MAAA,CACP;AAAA,IACL;AAAA,EACJ;AACJ;AAGA,IAAI,YAAY,gBAAgB;AAC5B,MAAI,KAAK,QAAQ,gBAAgB,cAAc;AACnD,OAAO;AACH,MAAI,KAAK,QAAQ,cAAc;AACnC;AAGA,MAAM,gBAAgB,OAAO,KAAc,QAAkB;AACzD,QAAM,YAAY,IAAI,QAAQ,gBAAgB;AAC9C,MAAI,CAAC,aAAa,CAAC,WAAW,SAAS,GAAG;AACtC,QAAI,OAAO,GAAG,EAAE,KAAK,+BAA+B;AACpD;AAAA,EACJ;AAEA,MAAI,YAAY,IAAI,MAAM;AACtB,YAAQ,IAAI,2CAA2C,IAAI,IAAI;AAAA,EACnE;AAGA,QAAM,cAAc,IAAI,QAAQ,eAAe;AAC/C,MAAI,aAAa;AACb,YAAQ,IAAI,2CAA2C,WAAW,EAAE;AAAA,EACxE,OAAO;AACH,YAAQ,IAAI,2CAA2C,SAAS,EAAE;AAAA,EACtE;AAEA,QAAM,YAAY,WAAW,SAAS;AACtC,QAAM,UAAU,cAAc,KAAK,GAAG;AAC1C;AAGA,IAAI,YAAY,gBAAgB;AAC5B,MAAI,IAAI,QAAQ,gBAAgB,aAAa;AACjD,OAAO;AACH,MAAI,IAAI,QAAQ,aAAa;AACjC;AAGA,MAAM,mBAAmB,OAAO,KAAc,QAAkB;AAC5D,QAAM,YAAY,IAAI,QAAQ,gBAAgB;AAC9C,MAAI,CAAC,aAAa,CAAC,WAAW,SAAS,GAAG;AACtC,QAAI,OAAO,GAAG,EAAE,KAAK,+BAA+B;AACpD;AAAA,EACJ;AAEA,UAAQ,IAAI,oDAAoD,SAAS,EAAE;AAE3E,MAAI;AACA,UAAM,YAAY,WAAW,SAAS;AACtC,UAAM,UAAU,cAAc,KAAK,GAAG;AAAA,EAC1C,SAAS,OAAO;AACZ,YAAQ,MAAM,uCAAuC,KAAK;AAC1D,QAAI,CAAC,IAAI,aAAa;AAClB,UAAI,OAAO,GAAG,EAAE,KAAK,sCAAsC;AAAA,IAC/D;AAAA,EACJ;AACJ;AAGA,IAAI,YAAY,gBAAgB;AAC5B,MAAI,OAAO,QAAQ,gBAAgB,gBAAgB;AACvD,OAAO;AACH,MAAI,OAAO,QAAQ,gBAAgB;AACvC;AAEA,IAAI,OAAO,UAAU,CAAA,UAAS;AAC1B,MAAI,OAAO;AACP,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,YAAQ,KAAK,CAAC;AAAA,EAClB;AACA,UAAQ,IAAI,gDAAgD,QAAQ,EAAE;AAC1E,CAAC;AAGD,QAAQ,GAAG,UAAU,YAAY;AAC7B,UAAQ,IAAI,yBAAyB;AAGrC,aAAW,aAAa,YAAY;AAChC,QAAI;AACA,cAAQ,IAAI,iCAAiC,SAAS,EAAE;AACxD,YAAM,WAAW,SAAS,EAAE,MAAA;AAC5B,aAAO,WAAW,SAAS;AAAA,IAC/B,SAAS,OAAO;AACZ,cAAQ,MAAM,uCAAuC,SAAS,KAAK,KAAK;AAAA,IAC5E;AAAA,EACJ;AACA,UAAQ,IAAI,0BAA0B;AACtC,UAAQ,KAAK,CAAC;AAClB,CAAC;"}