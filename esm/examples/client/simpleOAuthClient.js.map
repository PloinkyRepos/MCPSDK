{"version":3,"file":"simpleOAuthClient.js","sources":["../../../../src/examples/client/simpleOAuthClient.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { createServer } from 'node:http';\nimport { createInterface } from 'node:readline';\nimport { URL } from 'node:url';\nimport { exec } from 'node:child_process';\nimport { Client } from '../../client/index.js';\nimport { StreamableHTTPClientTransport } from '../../client/streamableHttp.js';\nimport { OAuthClientInformation, OAuthClientInformationFull, OAuthClientMetadata, OAuthTokens } from '../../shared/auth.js';\nimport { CallToolRequest, ListToolsRequest, CallToolResultSchema, ListToolsResultSchema } from '../../types.js';\nimport { OAuthClientProvider, UnauthorizedError } from '../../client/auth.js';\n\n// Configuration\nconst DEFAULT_SERVER_URL = 'http://localhost:3000/mcp';\nconst CALLBACK_PORT = 8090; // Use different port than auth server (3001)\nconst CALLBACK_URL = `http://localhost:${CALLBACK_PORT}/callback`;\n\n/**\n * In-memory OAuth client provider for demonstration purposes\n * In production, you should persist tokens securely\n */\nclass InMemoryOAuthClientProvider implements OAuthClientProvider {\n    private _clientInformation?: OAuthClientInformationFull;\n    private _tokens?: OAuthTokens;\n    private _codeVerifier?: string;\n\n    constructor(\n        private readonly _redirectUrl: string | URL,\n        private readonly _clientMetadata: OAuthClientMetadata,\n        onRedirect?: (url: URL) => void\n    ) {\n        this._onRedirect =\n            onRedirect ||\n            (url => {\n                console.log(`Redirect to: ${url.toString()}`);\n            });\n    }\n\n    private _onRedirect: (url: URL) => void;\n\n    get redirectUrl(): string | URL {\n        return this._redirectUrl;\n    }\n\n    get clientMetadata(): OAuthClientMetadata {\n        return this._clientMetadata;\n    }\n\n    clientInformation(): OAuthClientInformation | undefined {\n        return this._clientInformation;\n    }\n\n    saveClientInformation(clientInformation: OAuthClientInformationFull): void {\n        this._clientInformation = clientInformation;\n    }\n\n    tokens(): OAuthTokens | undefined {\n        return this._tokens;\n    }\n\n    saveTokens(tokens: OAuthTokens): void {\n        this._tokens = tokens;\n    }\n\n    redirectToAuthorization(authorizationUrl: URL): void {\n        this._onRedirect(authorizationUrl);\n    }\n\n    saveCodeVerifier(codeVerifier: string): void {\n        this._codeVerifier = codeVerifier;\n    }\n\n    codeVerifier(): string {\n        if (!this._codeVerifier) {\n            throw new Error('No code verifier saved');\n        }\n        return this._codeVerifier;\n    }\n}\n/**\n * Interactive MCP client with OAuth authentication\n * Demonstrates the complete OAuth flow with browser-based authorization\n */\nclass InteractiveOAuthClient {\n    private client: Client | null = null;\n    private readonly rl = createInterface({\n        input: process.stdin,\n        output: process.stdout\n    });\n\n    constructor(private serverUrl: string) {}\n\n    /**\n     * Prompts user for input via readline\n     */\n    private async question(query: string): Promise<string> {\n        return new Promise(resolve => {\n            this.rl.question(query, resolve);\n        });\n    }\n\n    /**\n     * Opens the authorization URL in the user's default browser\n     */\n    private async openBrowser(url: string): Promise<void> {\n        console.log(`üåê Opening browser for authorization: ${url}`);\n\n        const command = `open \"${url}\"`;\n\n        exec(command, error => {\n            if (error) {\n                console.error(`Failed to open browser: ${error.message}`);\n                console.log(`Please manually open: ${url}`);\n            }\n        });\n    }\n    /**\n     * Example OAuth callback handler - in production, use a more robust approach\n     * for handling callbacks and storing tokens\n     */\n    /**\n     * Starts a temporary HTTP server to receive the OAuth callback\n     */\n    private async waitForOAuthCallback(): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            const server = createServer((req, res) => {\n                // Ignore favicon requests\n                if (req.url === '/favicon.ico') {\n                    res.writeHead(404);\n                    res.end();\n                    return;\n                }\n\n                console.log(`üì• Received callback: ${req.url}`);\n                const parsedUrl = new URL(req.url || '', 'http://localhost');\n                const code = parsedUrl.searchParams.get('code');\n                const error = parsedUrl.searchParams.get('error');\n\n                if (code) {\n                    console.log(`‚úÖ Authorization code received: ${code?.substring(0, 10)}...`);\n                    res.writeHead(200, { 'Content-Type': 'text/html' });\n                    res.end(`\n            <html>\n              <body>\n                <h1>Authorization Successful!</h1>\n                <p>You can close this window and return to the terminal.</p>\n                <script>setTimeout(() => window.close(), 2000);</script>\n              </body>\n            </html>\n          `);\n\n                    resolve(code);\n                    setTimeout(() => server.close(), 3000);\n                } else if (error) {\n                    console.log(`‚ùå Authorization error: ${error}`);\n                    res.writeHead(400, { 'Content-Type': 'text/html' });\n                    res.end(`\n            <html>\n              <body>\n                <h1>Authorization Failed</h1>\n                <p>Error: ${error}</p>\n              </body>\n            </html>\n          `);\n                    reject(new Error(`OAuth authorization failed: ${error}`));\n                } else {\n                    console.log(`‚ùå No authorization code or error in callback`);\n                    res.writeHead(400);\n                    res.end('Bad request');\n                    reject(new Error('No authorization code provided'));\n                }\n            });\n\n            server.listen(CALLBACK_PORT, () => {\n                console.log(`OAuth callback server started on http://localhost:${CALLBACK_PORT}`);\n            });\n        });\n    }\n\n    private async attemptConnection(oauthProvider: InMemoryOAuthClientProvider): Promise<void> {\n        console.log('üö¢ Creating transport with OAuth provider...');\n        const baseUrl = new URL(this.serverUrl);\n        const transport = new StreamableHTTPClientTransport(baseUrl, {\n            authProvider: oauthProvider\n        });\n        console.log('üö¢ Transport created');\n\n        try {\n            console.log('üîå Attempting connection (this will trigger OAuth redirect)...');\n            await this.client!.connect(transport);\n            console.log('‚úÖ Connected successfully');\n        } catch (error) {\n            if (error instanceof UnauthorizedError) {\n                console.log('üîê OAuth required - waiting for authorization...');\n                const callbackPromise = this.waitForOAuthCallback();\n                const authCode = await callbackPromise;\n                await transport.finishAuth(authCode);\n                console.log('üîê Authorization code received:', authCode);\n                console.log('üîå Reconnecting with authenticated transport...');\n                await this.attemptConnection(oauthProvider);\n            } else {\n                console.error('‚ùå Connection failed with non-auth error:', error);\n                throw error;\n            }\n        }\n    }\n\n    /**\n     * Establishes connection to the MCP server with OAuth authentication\n     */\n    async connect(): Promise<void> {\n        console.log(`üîó Attempting to connect to ${this.serverUrl}...`);\n\n        const clientMetadata: OAuthClientMetadata = {\n            client_name: 'Simple OAuth MCP Client',\n            redirect_uris: [CALLBACK_URL],\n            grant_types: ['authorization_code', 'refresh_token'],\n            response_types: ['code'],\n            token_endpoint_auth_method: 'client_secret_post',\n            scope: 'mcp:tools'\n        };\n\n        console.log('üîê Creating OAuth provider...');\n        const oauthProvider = new InMemoryOAuthClientProvider(CALLBACK_URL, clientMetadata, (redirectUrl: URL) => {\n            console.log(`üìå OAuth redirect handler called - opening browser`);\n            console.log(`Opening browser to: ${redirectUrl.toString()}`);\n            this.openBrowser(redirectUrl.toString());\n        });\n        console.log('üîê OAuth provider created');\n\n        console.log('üë§ Creating MCP client...');\n        this.client = new Client(\n            {\n                name: 'simple-oauth-client',\n                version: '1.0.0'\n            },\n            { capabilities: {} }\n        );\n        console.log('üë§ Client created');\n\n        console.log('üîê Starting OAuth flow...');\n\n        await this.attemptConnection(oauthProvider);\n\n        // Start interactive loop\n        await this.interactiveLoop();\n    }\n\n    /**\n     * Main interactive loop for user commands\n     */\n    async interactiveLoop(): Promise<void> {\n        console.log('\\nüéØ Interactive MCP Client with OAuth');\n        console.log('Commands:');\n        console.log('  list - List available tools');\n        console.log('  call <tool_name> [args] - Call a tool');\n        console.log('  quit - Exit the client');\n        console.log();\n\n        while (true) {\n            try {\n                const command = await this.question('mcp> ');\n\n                if (!command.trim()) {\n                    continue;\n                }\n\n                if (command === 'quit') {\n                    console.log('\\nüëã Goodbye!');\n                    this.close();\n                    process.exit(0);\n                } else if (command === 'list') {\n                    await this.listTools();\n                } else if (command.startsWith('call ')) {\n                    await this.handleCallTool(command);\n                } else {\n                    console.log(\"‚ùå Unknown command. Try 'list', 'call <tool_name>', or 'quit'\");\n                }\n            } catch (error) {\n                if (error instanceof Error && error.message === 'SIGINT') {\n                    console.log('\\n\\nüëã Goodbye!');\n                    break;\n                }\n                console.error('‚ùå Error:', error);\n            }\n        }\n    }\n\n    private async listTools(): Promise<void> {\n        if (!this.client) {\n            console.log('‚ùå Not connected to server');\n            return;\n        }\n\n        try {\n            const request: ListToolsRequest = {\n                method: 'tools/list',\n                params: {}\n            };\n\n            const result = await this.client.request(request, ListToolsResultSchema);\n\n            if (result.tools && result.tools.length > 0) {\n                console.log('\\nüìã Available tools:');\n                result.tools.forEach((tool, index) => {\n                    console.log(`${index + 1}. ${tool.name}`);\n                    if (tool.description) {\n                        console.log(`   Description: ${tool.description}`);\n                    }\n                    console.log();\n                });\n            } else {\n                console.log('No tools available');\n            }\n        } catch (error) {\n            console.error('‚ùå Failed to list tools:', error);\n        }\n    }\n\n    private async handleCallTool(command: string): Promise<void> {\n        const parts = command.split(/\\s+/);\n        const toolName = parts[1];\n\n        if (!toolName) {\n            console.log('‚ùå Please specify a tool name');\n            return;\n        }\n\n        // Parse arguments (simple JSON-like format)\n        let toolArgs: Record<string, unknown> = {};\n        if (parts.length > 2) {\n            const argsString = parts.slice(2).join(' ');\n            try {\n                toolArgs = JSON.parse(argsString);\n            } catch {\n                console.log('‚ùå Invalid arguments format (expected JSON)');\n                return;\n            }\n        }\n\n        await this.callTool(toolName, toolArgs);\n    }\n\n    private async callTool(toolName: string, toolArgs: Record<string, unknown>): Promise<void> {\n        if (!this.client) {\n            console.log('‚ùå Not connected to server');\n            return;\n        }\n\n        try {\n            const request: CallToolRequest = {\n                method: 'tools/call',\n                params: {\n                    name: toolName,\n                    arguments: toolArgs\n                }\n            };\n\n            const result = await this.client.request(request, CallToolResultSchema);\n\n            console.log(`\\nüîß Tool '${toolName}' result:`);\n            if (result.content) {\n                result.content.forEach(content => {\n                    if (content.type === 'text') {\n                        console.log(content.text);\n                    } else {\n                        console.log(content);\n                    }\n                });\n            } else {\n                console.log(result);\n            }\n        } catch (error) {\n            console.error(`‚ùå Failed to call tool '${toolName}':`, error);\n        }\n    }\n\n    close(): void {\n        this.rl.close();\n        if (this.client) {\n            // Note: Client doesn't have a close method in the current implementation\n            // This would typically close the transport connection\n        }\n    }\n}\n\n/**\n * Main entry point\n */\nasync function main(): Promise<void> {\n    const serverUrl = process.env.MCP_SERVER_URL || DEFAULT_SERVER_URL;\n\n    console.log('üöÄ Simple MCP OAuth Client');\n    console.log(`Connecting to: ${serverUrl}`);\n    console.log();\n\n    const client = new InteractiveOAuthClient(serverUrl);\n\n    // Handle graceful shutdown\n    process.on('SIGINT', () => {\n        console.log('\\n\\nüëã Goodbye!');\n        client.close();\n        process.exit(0);\n    });\n\n    try {\n        await client.connect();\n    } catch (error) {\n        console.error('Failed to start client:', error);\n        process.exit(1);\n    } finally {\n        client.close();\n    }\n}\n\n// Run if this file is executed directly\nmain().catch(error => {\n    console.error('Unhandled error:', error);\n    process.exit(1);\n});\n"],"names":[],"mappings":";;;;;;;;;;AAaA,MAAM,qBAAqB;AAC3B,MAAM,gBAAgB;AACtB,MAAM,eAAe,oBAAoB,aAAa;AAMtD,MAAM,4BAA2D;AAAA,EAK7D,YACqB,cACA,iBACjB,YACF;AAHmB,SAAA,eAAA;AACA,SAAA,kBAAA;AAGjB,SAAK,cACD,eACC,CAAA,QAAO;AACJ,cAAQ,IAAI,gBAAgB,IAAI,SAAA,CAAU,EAAE;AAAA,IAChD;AAAA,EACR;AAAA,EAIA,IAAI,cAA4B;AAC5B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,iBAAsC;AACtC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,oBAAwD;AACpD,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,sBAAsB,mBAAqD;AACvE,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EAEA,SAAkC;AAC9B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,WAAW,QAA2B;AAClC,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,wBAAwB,kBAA6B;AACjD,SAAK,YAAY,gBAAgB;AAAA,EACrC;AAAA,EAEA,iBAAiB,cAA4B;AACzC,SAAK,gBAAgB;AAAA,EACzB;AAAA,EAEA,eAAuB;AACnB,QAAI,CAAC,KAAK,eAAe;AACrB,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC5C;AACA,WAAO,KAAK;AAAA,EAChB;AACJ;AAKA,MAAM,uBAAuB;AAAA,EAOzB,YAAoB,WAAmB;AAAnB,SAAA,YAAA;AANpB,SAAQ,SAAwB;AAChC,SAAiB,KAAK,gBAAgB;AAAA,MAClC,OAAO,QAAQ;AAAA,MACf,QAAQ,QAAQ;AAAA,IAAA,CACnB;AAAA,EAEuC;AAAA;AAAA;AAAA;AAAA,EAKxC,MAAc,SAAS,OAAgC;AACnD,WAAO,IAAI,QAAQ,CAAA,YAAW;AAC1B,WAAK,GAAG,SAAS,OAAO,OAAO;AAAA,IACnC,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,YAAY,KAA4B;AAClD,YAAQ,IAAI,yCAAyC,GAAG,EAAE;AAE1D,UAAM,UAAU,SAAS,GAAG;AAE5B,SAAK,SAAS,CAAA,UAAS;AACnB,UAAI,OAAO;AACP,gBAAQ,MAAM,2BAA2B,MAAM,OAAO,EAAE;AACxD,gBAAQ,IAAI,yBAAyB,GAAG,EAAE;AAAA,MAC9C;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAc,uBAAwC;AAClD,WAAO,IAAI,QAAgB,CAAC,SAAS,WAAW;AAC5C,YAAM,SAAS,aAAa,CAAC,KAAK,QAAQ;AAEtC,YAAI,IAAI,QAAQ,gBAAgB;AAC5B,cAAI,UAAU,GAAG;AACjB,cAAI,IAAA;AACJ;AAAA,QACJ;AAEA,gBAAQ,IAAI,yBAAyB,IAAI,GAAG,EAAE;AAC9C,cAAM,YAAY,IAAI,IAAI,IAAI,OAAO,IAAI,kBAAkB;AAC3D,cAAM,OAAO,UAAU,aAAa,IAAI,MAAM;AAC9C,cAAM,QAAQ,UAAU,aAAa,IAAI,OAAO;AAEhD,YAAI,MAAM;AACN,kBAAQ,IAAI,kCAAkC,MAAM,UAAU,GAAG,EAAE,CAAC,KAAK;AACzE,cAAI,UAAU,KAAK,EAAE,gBAAgB,aAAa;AAClD,cAAI,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAQjB;AAES,kBAAQ,IAAI;AACZ,qBAAW,MAAM,OAAO,MAAA,GAAS,GAAI;AAAA,QACzC,WAAW,OAAO;AACd,kBAAQ,IAAI,0BAA0B,KAAK,EAAE;AAC7C,cAAI,UAAU,KAAK,EAAE,gBAAgB,aAAa;AAClD,cAAI,IAAI;AAAA;AAAA;AAAA;AAAA,4BAIA,KAAK;AAAA;AAAA;AAAA,WAGtB;AACS,iBAAO,IAAI,MAAM,+BAA+B,KAAK,EAAE,CAAC;AAAA,QAC5D,OAAO;AACH,kBAAQ,IAAI,8CAA8C;AAC1D,cAAI,UAAU,GAAG;AACjB,cAAI,IAAI,aAAa;AACrB,iBAAO,IAAI,MAAM,gCAAgC,CAAC;AAAA,QACtD;AAAA,MACJ,CAAC;AAED,aAAO,OAAO,eAAe,MAAM;AAC/B,gBAAQ,IAAI,qDAAqD,aAAa,EAAE;AAAA,MACpF,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EAEA,MAAc,kBAAkB,eAA2D;AACvF,YAAQ,IAAI,8CAA8C;AAC1D,UAAM,UAAU,IAAI,IAAI,KAAK,SAAS;AACtC,UAAM,YAAY,IAAI,8BAA8B,SAAS;AAAA,MACzD,cAAc;AAAA,IAAA,CACjB;AACD,YAAQ,IAAI,sBAAsB;AAElC,QAAI;AACA,cAAQ,IAAI,gEAAgE;AAC5E,YAAM,KAAK,OAAQ,QAAQ,SAAS;AACpC,cAAQ,IAAI,0BAA0B;AAAA,IAC1C,SAAS,OAAO;AACZ,UAAI,iBAAiB,mBAAmB;AACpC,gBAAQ,IAAI,kDAAkD;AAC9D,cAAM,kBAAkB,KAAK,qBAAA;AAC7B,cAAM,WAAW,MAAM;AACvB,cAAM,UAAU,WAAW,QAAQ;AACnC,gBAAQ,IAAI,mCAAmC,QAAQ;AACvD,gBAAQ,IAAI,iDAAiD;AAC7D,cAAM,KAAK,kBAAkB,aAAa;AAAA,MAC9C,OAAO;AACH,gBAAQ,MAAM,4CAA4C,KAAK;AAC/D,cAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAyB;AAC3B,YAAQ,IAAI,+BAA+B,KAAK,SAAS,KAAK;AAE9D,UAAM,iBAAsC;AAAA,MACxC,aAAa;AAAA,MACb,eAAe,CAAC,YAAY;AAAA,MAC5B,aAAa,CAAC,sBAAsB,eAAe;AAAA,MACnD,gBAAgB,CAAC,MAAM;AAAA,MACvB,4BAA4B;AAAA,MAC5B,OAAO;AAAA,IAAA;AAGX,YAAQ,IAAI,+BAA+B;AAC3C,UAAM,gBAAgB,IAAI,4BAA4B,cAAc,gBAAgB,CAAC,gBAAqB;AACtG,cAAQ,IAAI,oDAAoD;AAChE,cAAQ,IAAI,uBAAuB,YAAY,SAAA,CAAU,EAAE;AAC3D,WAAK,YAAY,YAAY,UAAU;AAAA,IAC3C,CAAC;AACD,YAAQ,IAAI,2BAA2B;AAEvC,YAAQ,IAAI,2BAA2B;AACvC,SAAK,SAAS,IAAI;AAAA,MACd;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,MAAA;AAAA,MAEb,EAAE,cAAc,CAAA,EAAC;AAAA,IAAE;AAEvB,YAAQ,IAAI,mBAAmB;AAE/B,YAAQ,IAAI,2BAA2B;AAEvC,UAAM,KAAK,kBAAkB,aAAa;AAG1C,UAAM,KAAK,gBAAA;AAAA,EACf;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,kBAAiC;AACnC,YAAQ,IAAI,wCAAwC;AACpD,YAAQ,IAAI,WAAW;AACvB,YAAQ,IAAI,+BAA+B;AAC3C,YAAQ,IAAI,yCAAyC;AACrD,YAAQ,IAAI,0BAA0B;AACtC,YAAQ,IAAA;AAER,WAAO,MAAM;AACT,UAAI;AACA,cAAM,UAAU,MAAM,KAAK,SAAS,OAAO;AAE3C,YAAI,CAAC,QAAQ,QAAQ;AACjB;AAAA,QACJ;AAEA,YAAI,YAAY,QAAQ;AACpB,kBAAQ,IAAI,eAAe;AAC3B,eAAK,MAAA;AACL,kBAAQ,KAAK,CAAC;AAAA,QAClB,WAAW,YAAY,QAAQ;AAC3B,gBAAM,KAAK,UAAA;AAAA,QACf,WAAW,QAAQ,WAAW,OAAO,GAAG;AACpC,gBAAM,KAAK,eAAe,OAAO;AAAA,QACrC,OAAO;AACH,kBAAQ,IAAI,8DAA8D;AAAA,QAC9E;AAAA,MACJ,SAAS,OAAO;AACZ,YAAI,iBAAiB,SAAS,MAAM,YAAY,UAAU;AACtD,kBAAQ,IAAI,iBAAiB;AAC7B;AAAA,QACJ;AACA,gBAAQ,MAAM,YAAY,KAAK;AAAA,MACnC;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAc,YAA2B;AACrC,QAAI,CAAC,KAAK,QAAQ;AACd,cAAQ,IAAI,2BAA2B;AACvC;AAAA,IACJ;AAEA,QAAI;AACA,YAAM,UAA4B;AAAA,QAC9B,QAAQ;AAAA,QACR,QAAQ,CAAA;AAAA,MAAC;AAGb,YAAM,SAAS,MAAM,KAAK,OAAO,QAAQ,SAAS,qBAAqB;AAEvE,UAAI,OAAO,SAAS,OAAO,MAAM,SAAS,GAAG;AACzC,gBAAQ,IAAI,uBAAuB;AACnC,eAAO,MAAM,QAAQ,CAAC,MAAM,UAAU;AAClC,kBAAQ,IAAI,GAAG,QAAQ,CAAC,KAAK,KAAK,IAAI,EAAE;AACxC,cAAI,KAAK,aAAa;AAClB,oBAAQ,IAAI,mBAAmB,KAAK,WAAW,EAAE;AAAA,UACrD;AACA,kBAAQ,IAAA;AAAA,QACZ,CAAC;AAAA,MACL,OAAO;AACH,gBAAQ,IAAI,oBAAoB;AAAA,MACpC;AAAA,IACJ,SAAS,OAAO;AACZ,cAAQ,MAAM,2BAA2B,KAAK;AAAA,IAClD;AAAA,EACJ;AAAA,EAEA,MAAc,eAAe,SAAgC;AACzD,UAAM,QAAQ,QAAQ,MAAM,KAAK;AACjC,UAAM,WAAW,MAAM,CAAC;AAExB,QAAI,CAAC,UAAU;AACX,cAAQ,IAAI,8BAA8B;AAC1C;AAAA,IACJ;AAGA,QAAI,WAAoC,CAAA;AACxC,QAAI,MAAM,SAAS,GAAG;AAClB,YAAM,aAAa,MAAM,MAAM,CAAC,EAAE,KAAK,GAAG;AAC1C,UAAI;AACA,mBAAW,KAAK,MAAM,UAAU;AAAA,MACpC,QAAQ;AACJ,gBAAQ,IAAI,4CAA4C;AACxD;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,KAAK,SAAS,UAAU,QAAQ;AAAA,EAC1C;AAAA,EAEA,MAAc,SAAS,UAAkB,UAAkD;AACvF,QAAI,CAAC,KAAK,QAAQ;AACd,cAAQ,IAAI,2BAA2B;AACvC;AAAA,IACJ;AAEA,QAAI;AACA,YAAM,UAA2B;AAAA,QAC7B,QAAQ;AAAA,QACR,QAAQ;AAAA,UACJ,MAAM;AAAA,UACN,WAAW;AAAA,QAAA;AAAA,MACf;AAGJ,YAAM,SAAS,MAAM,KAAK,OAAO,QAAQ,SAAS,oBAAoB;AAEtE,cAAQ,IAAI;AAAA,WAAc,QAAQ,WAAW;AAC7C,UAAI,OAAO,SAAS;AAChB,eAAO,QAAQ,QAAQ,CAAA,YAAW;AAC9B,cAAI,QAAQ,SAAS,QAAQ;AACzB,oBAAQ,IAAI,QAAQ,IAAI;AAAA,UAC5B,OAAO;AACH,oBAAQ,IAAI,OAAO;AAAA,UACvB;AAAA,QACJ,CAAC;AAAA,MACL,OAAO;AACH,gBAAQ,IAAI,MAAM;AAAA,MACtB;AAAA,IACJ,SAAS,OAAO;AACZ,cAAQ,MAAM,0BAA0B,QAAQ,MAAM,KAAK;AAAA,IAC/D;AAAA,EACJ;AAAA,EAEA,QAAc;AACV,SAAK,GAAG,MAAA;AACR,QAAI,KAAK,QAAQ;AAAA,IAGjB;AAAA,EACJ;AACJ;AAKA,eAAe,OAAsB;AACjC,QAAM,YAAY,2BAAY,kBAAkB;AAEhD,UAAQ,IAAI,4BAA4B;AACxC,UAAQ,IAAI,kBAAkB,SAAS,EAAE;AACzC,UAAQ,IAAA;AAER,QAAM,SAAS,IAAI,uBAAuB,SAAS;AAGnD,UAAQ,GAAG,UAAU,MAAM;AACvB,YAAQ,IAAI,iBAAiB;AAC7B,WAAO,MAAA;AACP,YAAQ,KAAK,CAAC;AAAA,EAClB,CAAC;AAED,MAAI;AACA,UAAM,OAAO,QAAA;AAAA,EACjB,SAAS,OAAO;AACZ,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,YAAQ,KAAK,CAAC;AAAA,EAClB,UAAA;AACI,WAAO,MAAA;AAAA,EACX;AACJ;AAGA,OAAO,MAAM,CAAA,UAAS;AAClB,UAAQ,MAAM,oBAAoB,KAAK;AACvC,UAAQ,KAAK,CAAC;AAClB,CAAC;"}